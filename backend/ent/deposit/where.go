// Code generated by entc, DO NOT EDIT.

package deposit

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team15/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Addedtime applies equality check predicate on the "addedtime" field. It's identical to AddedtimeEQ.
func Addedtime(v time.Time) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedtime), v))
	})
}

// Info applies equality check predicate on the "info" field. It's identical to InfoEQ.
func Info(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInfo), v))
	})
}

// Depositorname applies equality check predicate on the "depositorname" field. It's identical to DepositornameEQ.
func Depositorname(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositorname), v))
	})
}

// Depositortell applies equality check predicate on the "depositortell" field. It's identical to DepositortellEQ.
func Depositortell(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositortell), v))
	})
}

// Recipienttell applies equality check predicate on the "recipienttell" field. It's identical to RecipienttellEQ.
func Recipienttell(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecipienttell), v))
	})
}

// Parcelcode applies equality check predicate on the "parcelcode" field. It's identical to ParcelcodeEQ.
func Parcelcode(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParcelcode), v))
	})
}

// AddedtimeEQ applies the EQ predicate on the "addedtime" field.
func AddedtimeEQ(v time.Time) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedtime), v))
	})
}

// AddedtimeNEQ applies the NEQ predicate on the "addedtime" field.
func AddedtimeNEQ(v time.Time) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddedtime), v))
	})
}

// AddedtimeIn applies the In predicate on the "addedtime" field.
func AddedtimeIn(vs ...time.Time) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddedtime), v...))
	})
}

// AddedtimeNotIn applies the NotIn predicate on the "addedtime" field.
func AddedtimeNotIn(vs ...time.Time) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddedtime), v...))
	})
}

// AddedtimeGT applies the GT predicate on the "addedtime" field.
func AddedtimeGT(v time.Time) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddedtime), v))
	})
}

// AddedtimeGTE applies the GTE predicate on the "addedtime" field.
func AddedtimeGTE(v time.Time) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddedtime), v))
	})
}

// AddedtimeLT applies the LT predicate on the "addedtime" field.
func AddedtimeLT(v time.Time) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddedtime), v))
	})
}

// AddedtimeLTE applies the LTE predicate on the "addedtime" field.
func AddedtimeLTE(v time.Time) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddedtime), v))
	})
}

// InfoEQ applies the EQ predicate on the "info" field.
func InfoEQ(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInfo), v))
	})
}

// InfoNEQ applies the NEQ predicate on the "info" field.
func InfoNEQ(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInfo), v))
	})
}

// InfoIn applies the In predicate on the "info" field.
func InfoIn(vs ...string) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInfo), v...))
	})
}

// InfoNotIn applies the NotIn predicate on the "info" field.
func InfoNotIn(vs ...string) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInfo), v...))
	})
}

// InfoGT applies the GT predicate on the "info" field.
func InfoGT(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInfo), v))
	})
}

// InfoGTE applies the GTE predicate on the "info" field.
func InfoGTE(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInfo), v))
	})
}

// InfoLT applies the LT predicate on the "info" field.
func InfoLT(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInfo), v))
	})
}

// InfoLTE applies the LTE predicate on the "info" field.
func InfoLTE(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInfo), v))
	})
}

// InfoContains applies the Contains predicate on the "info" field.
func InfoContains(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInfo), v))
	})
}

// InfoHasPrefix applies the HasPrefix predicate on the "info" field.
func InfoHasPrefix(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInfo), v))
	})
}

// InfoHasSuffix applies the HasSuffix predicate on the "info" field.
func InfoHasSuffix(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInfo), v))
	})
}

// InfoEqualFold applies the EqualFold predicate on the "info" field.
func InfoEqualFold(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInfo), v))
	})
}

// InfoContainsFold applies the ContainsFold predicate on the "info" field.
func InfoContainsFold(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInfo), v))
	})
}

// DepositornameEQ applies the EQ predicate on the "depositorname" field.
func DepositornameEQ(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositorname), v))
	})
}

// DepositornameNEQ applies the NEQ predicate on the "depositorname" field.
func DepositornameNEQ(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepositorname), v))
	})
}

// DepositornameIn applies the In predicate on the "depositorname" field.
func DepositornameIn(vs ...string) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDepositorname), v...))
	})
}

// DepositornameNotIn applies the NotIn predicate on the "depositorname" field.
func DepositornameNotIn(vs ...string) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDepositorname), v...))
	})
}

// DepositornameGT applies the GT predicate on the "depositorname" field.
func DepositornameGT(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepositorname), v))
	})
}

// DepositornameGTE applies the GTE predicate on the "depositorname" field.
func DepositornameGTE(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepositorname), v))
	})
}

// DepositornameLT applies the LT predicate on the "depositorname" field.
func DepositornameLT(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepositorname), v))
	})
}

// DepositornameLTE applies the LTE predicate on the "depositorname" field.
func DepositornameLTE(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepositorname), v))
	})
}

// DepositornameContains applies the Contains predicate on the "depositorname" field.
func DepositornameContains(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDepositorname), v))
	})
}

// DepositornameHasPrefix applies the HasPrefix predicate on the "depositorname" field.
func DepositornameHasPrefix(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDepositorname), v))
	})
}

// DepositornameHasSuffix applies the HasSuffix predicate on the "depositorname" field.
func DepositornameHasSuffix(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDepositorname), v))
	})
}

// DepositornameEqualFold applies the EqualFold predicate on the "depositorname" field.
func DepositornameEqualFold(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDepositorname), v))
	})
}

// DepositornameContainsFold applies the ContainsFold predicate on the "depositorname" field.
func DepositornameContainsFold(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDepositorname), v))
	})
}

// DepositortellEQ applies the EQ predicate on the "depositortell" field.
func DepositortellEQ(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepositortell), v))
	})
}

// DepositortellNEQ applies the NEQ predicate on the "depositortell" field.
func DepositortellNEQ(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepositortell), v))
	})
}

// DepositortellIn applies the In predicate on the "depositortell" field.
func DepositortellIn(vs ...string) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDepositortell), v...))
	})
}

// DepositortellNotIn applies the NotIn predicate on the "depositortell" field.
func DepositortellNotIn(vs ...string) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDepositortell), v...))
	})
}

// DepositortellGT applies the GT predicate on the "depositortell" field.
func DepositortellGT(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepositortell), v))
	})
}

// DepositortellGTE applies the GTE predicate on the "depositortell" field.
func DepositortellGTE(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepositortell), v))
	})
}

// DepositortellLT applies the LT predicate on the "depositortell" field.
func DepositortellLT(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepositortell), v))
	})
}

// DepositortellLTE applies the LTE predicate on the "depositortell" field.
func DepositortellLTE(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepositortell), v))
	})
}

// DepositortellContains applies the Contains predicate on the "depositortell" field.
func DepositortellContains(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDepositortell), v))
	})
}

// DepositortellHasPrefix applies the HasPrefix predicate on the "depositortell" field.
func DepositortellHasPrefix(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDepositortell), v))
	})
}

// DepositortellHasSuffix applies the HasSuffix predicate on the "depositortell" field.
func DepositortellHasSuffix(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDepositortell), v))
	})
}

// DepositortellEqualFold applies the EqualFold predicate on the "depositortell" field.
func DepositortellEqualFold(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDepositortell), v))
	})
}

// DepositortellContainsFold applies the ContainsFold predicate on the "depositortell" field.
func DepositortellContainsFold(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDepositortell), v))
	})
}

// RecipienttellEQ applies the EQ predicate on the "recipienttell" field.
func RecipienttellEQ(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecipienttell), v))
	})
}

// RecipienttellNEQ applies the NEQ predicate on the "recipienttell" field.
func RecipienttellNEQ(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecipienttell), v))
	})
}

// RecipienttellIn applies the In predicate on the "recipienttell" field.
func RecipienttellIn(vs ...string) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecipienttell), v...))
	})
}

// RecipienttellNotIn applies the NotIn predicate on the "recipienttell" field.
func RecipienttellNotIn(vs ...string) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecipienttell), v...))
	})
}

// RecipienttellGT applies the GT predicate on the "recipienttell" field.
func RecipienttellGT(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecipienttell), v))
	})
}

// RecipienttellGTE applies the GTE predicate on the "recipienttell" field.
func RecipienttellGTE(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecipienttell), v))
	})
}

// RecipienttellLT applies the LT predicate on the "recipienttell" field.
func RecipienttellLT(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecipienttell), v))
	})
}

// RecipienttellLTE applies the LTE predicate on the "recipienttell" field.
func RecipienttellLTE(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecipienttell), v))
	})
}

// RecipienttellContains applies the Contains predicate on the "recipienttell" field.
func RecipienttellContains(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRecipienttell), v))
	})
}

// RecipienttellHasPrefix applies the HasPrefix predicate on the "recipienttell" field.
func RecipienttellHasPrefix(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRecipienttell), v))
	})
}

// RecipienttellHasSuffix applies the HasSuffix predicate on the "recipienttell" field.
func RecipienttellHasSuffix(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRecipienttell), v))
	})
}

// RecipienttellEqualFold applies the EqualFold predicate on the "recipienttell" field.
func RecipienttellEqualFold(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRecipienttell), v))
	})
}

// RecipienttellContainsFold applies the ContainsFold predicate on the "recipienttell" field.
func RecipienttellContainsFold(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRecipienttell), v))
	})
}

// ParcelcodeEQ applies the EQ predicate on the "parcelcode" field.
func ParcelcodeEQ(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParcelcode), v))
	})
}

// ParcelcodeNEQ applies the NEQ predicate on the "parcelcode" field.
func ParcelcodeNEQ(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParcelcode), v))
	})
}

// ParcelcodeIn applies the In predicate on the "parcelcode" field.
func ParcelcodeIn(vs ...string) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParcelcode), v...))
	})
}

// ParcelcodeNotIn applies the NotIn predicate on the "parcelcode" field.
func ParcelcodeNotIn(vs ...string) predicate.Deposit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Deposit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParcelcode), v...))
	})
}

// ParcelcodeGT applies the GT predicate on the "parcelcode" field.
func ParcelcodeGT(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParcelcode), v))
	})
}

// ParcelcodeGTE applies the GTE predicate on the "parcelcode" field.
func ParcelcodeGTE(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParcelcode), v))
	})
}

// ParcelcodeLT applies the LT predicate on the "parcelcode" field.
func ParcelcodeLT(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParcelcode), v))
	})
}

// ParcelcodeLTE applies the LTE predicate on the "parcelcode" field.
func ParcelcodeLTE(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParcelcode), v))
	})
}

// ParcelcodeContains applies the Contains predicate on the "parcelcode" field.
func ParcelcodeContains(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParcelcode), v))
	})
}

// ParcelcodeHasPrefix applies the HasPrefix predicate on the "parcelcode" field.
func ParcelcodeHasPrefix(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParcelcode), v))
	})
}

// ParcelcodeHasSuffix applies the HasSuffix predicate on the "parcelcode" field.
func ParcelcodeHasSuffix(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParcelcode), v))
	})
}

// ParcelcodeEqualFold applies the EqualFold predicate on the "parcelcode" field.
func ParcelcodeEqualFold(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParcelcode), v))
	})
}

// ParcelcodeContainsFold applies the ContainsFold predicate on the "parcelcode" field.
func ParcelcodeContainsFold(v string) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParcelcode), v))
	})
}

// HasEmployee applies the HasEdge predicate on the "Employee" edge.
func HasEmployee() predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "Employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusd applies the HasEdge predicate on the "Statusd" edge.
func HasStatusd() predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusdTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusdTable, StatusdColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusdWith applies the HasEdge predicate on the "Statusd" edge with a given conditions (other predicates).
func HasStatusdWith(preds ...predicate.Statusd) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusdInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusdTable, StatusdColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLease applies the HasEdge predicate on the "Lease" edge.
func HasLease() predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LeaseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LeaseTable, LeaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeaseWith applies the HasEdge predicate on the "Lease" edge with a given conditions (other predicates).
func HasLeaseWith(preds ...predicate.Lease) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LeaseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LeaseTable, LeaseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Deposit) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Deposit) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Deposit) predicate.Deposit {
	return predicate.Deposit(func(s *sql.Selector) {
		p(s.Not())
	})
}
