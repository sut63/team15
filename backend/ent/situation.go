// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/situation"
)

// Situation is the model entity for the Situation schema.
type Situation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Situationname holds the value of the "situationname" field.
	Situationname string `json:"situationname,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SituationQuery when eager-loading is set.
	Edges SituationEdges `json:"edges"`
}

// SituationEdges holds the relations/edges for other nodes in the graph.
type SituationEdges struct {
	// Situations holds the value of the situations edge.
	Situations []*Bill
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SituationsOrErr returns the Situations value or an error if the edge
// was not loaded in eager-loading.
func (e SituationEdges) SituationsOrErr() ([]*Bill, error) {
	if e.loadedTypes[0] {
		return e.Situations, nil
	}
	return nil, &NotLoadedError{edge: "situations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Situation) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // situationname
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Situation fields.
func (s *Situation) assignValues(values ...interface{}) error {
	if m, n := len(values), len(situation.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field situationname", values[0])
	} else if value.Valid {
		s.Situationname = value.String
	}
	return nil
}

// QuerySituations queries the situations edge of the Situation.
func (s *Situation) QuerySituations() *BillQuery {
	return (&SituationClient{config: s.config}).QuerySituations(s)
}

// Update returns a builder for updating this Situation.
// Note that, you need to call Situation.Unwrap() before calling this method, if this Situation
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Situation) Update() *SituationUpdateOne {
	return (&SituationClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Situation) Unwrap() *Situation {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Situation is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Situation) String() string {
	var builder strings.Builder
	builder.WriteString("Situation(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", situationname=")
	builder.WriteString(s.Situationname)
	builder.WriteByte(')')
	return builder.String()
}

// Situations is a parsable slice of Situation.
type Situations []*Situation

func (s Situations) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
