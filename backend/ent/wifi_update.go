// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/lease"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/wifi"
)

// WifiUpdate is the builder for updating Wifi entities.
type WifiUpdate struct {
	config
	hooks      []Hook
	mutation   *WifiMutation
	predicates []predicate.Wifi
}

// Where adds a new predicate for the builder.
func (wu *WifiUpdate) Where(ps ...predicate.Wifi) *WifiUpdate {
	wu.predicates = append(wu.predicates, ps...)
	return wu
}

// SetWifiname sets the wifiname field.
func (wu *WifiUpdate) SetWifiname(s string) *WifiUpdate {
	wu.mutation.SetWifiname(s)
	return wu
}

// AddWifiIDs adds the wifis edge to Lease by ids.
func (wu *WifiUpdate) AddWifiIDs(ids ...int) *WifiUpdate {
	wu.mutation.AddWifiIDs(ids...)
	return wu
}

// AddWifis adds the wifis edges to Lease.
func (wu *WifiUpdate) AddWifis(l ...*Lease) *WifiUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wu.AddWifiIDs(ids...)
}

// Mutation returns the WifiMutation object of the builder.
func (wu *WifiUpdate) Mutation() *WifiMutation {
	return wu.mutation
}

// RemoveWifiIDs removes the wifis edge to Lease by ids.
func (wu *WifiUpdate) RemoveWifiIDs(ids ...int) *WifiUpdate {
	wu.mutation.RemoveWifiIDs(ids...)
	return wu
}

// RemoveWifis removes wifis edges to Lease.
func (wu *WifiUpdate) RemoveWifis(l ...*Lease) *WifiUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wu.RemoveWifiIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (wu *WifiUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := wu.mutation.Wifiname(); ok {
		if err := wifi.WifinameValidator(v); err != nil {
			return 0, &ValidationError{Name: "wifiname", err: fmt.Errorf("ent: validator failed for field \"wifiname\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(wu.hooks) == 0 {
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WifiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WifiUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WifiUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WifiUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WifiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wifi.Table,
			Columns: wifi.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wifi.FieldID,
			},
		},
	}
	if ps := wu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Wifiname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wifi.FieldWifiname,
		})
	}
	if nodes := wu.mutation.RemovedWifisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wifi.WifisTable,
			Columns: []string{wifi.WifisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WifisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wifi.WifisTable,
			Columns: []string{wifi.WifisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wifi.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WifiUpdateOne is the builder for updating a single Wifi entity.
type WifiUpdateOne struct {
	config
	hooks    []Hook
	mutation *WifiMutation
}

// SetWifiname sets the wifiname field.
func (wuo *WifiUpdateOne) SetWifiname(s string) *WifiUpdateOne {
	wuo.mutation.SetWifiname(s)
	return wuo
}

// AddWifiIDs adds the wifis edge to Lease by ids.
func (wuo *WifiUpdateOne) AddWifiIDs(ids ...int) *WifiUpdateOne {
	wuo.mutation.AddWifiIDs(ids...)
	return wuo
}

// AddWifis adds the wifis edges to Lease.
func (wuo *WifiUpdateOne) AddWifis(l ...*Lease) *WifiUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wuo.AddWifiIDs(ids...)
}

// Mutation returns the WifiMutation object of the builder.
func (wuo *WifiUpdateOne) Mutation() *WifiMutation {
	return wuo.mutation
}

// RemoveWifiIDs removes the wifis edge to Lease by ids.
func (wuo *WifiUpdateOne) RemoveWifiIDs(ids ...int) *WifiUpdateOne {
	wuo.mutation.RemoveWifiIDs(ids...)
	return wuo
}

// RemoveWifis removes wifis edges to Lease.
func (wuo *WifiUpdateOne) RemoveWifis(l ...*Lease) *WifiUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wuo.RemoveWifiIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (wuo *WifiUpdateOne) Save(ctx context.Context) (*Wifi, error) {
	if v, ok := wuo.mutation.Wifiname(); ok {
		if err := wifi.WifinameValidator(v); err != nil {
			return nil, &ValidationError{Name: "wifiname", err: fmt.Errorf("ent: validator failed for field \"wifiname\": %w", err)}
		}
	}

	var (
		err  error
		node *Wifi
	)
	if len(wuo.hooks) == 0 {
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WifiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			mut = wuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WifiUpdateOne) SaveX(ctx context.Context) *Wifi {
	w, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return w
}

// Exec executes the query on the entity.
func (wuo *WifiUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WifiUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WifiUpdateOne) sqlSave(ctx context.Context) (w *Wifi, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wifi.Table,
			Columns: wifi.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wifi.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Wifi.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := wuo.mutation.Wifiname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wifi.FieldWifiname,
		})
	}
	if nodes := wuo.mutation.RemovedWifisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wifi.WifisTable,
			Columns: []string{wifi.WifisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WifisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wifi.WifisTable,
			Columns: []string{wifi.WifisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	w = &Wifi{config: wuo.config}
	_spec.Assign = w.assignValues
	_spec.ScanValues = w.scanValues()
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wifi.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return w, nil
}
