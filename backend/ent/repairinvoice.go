// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/rentalstatus"
	"github.com/team15/app/ent/repairinvoice"
)

// Repairinvoice is the model entity for the Repairinvoice schema.
type Repairinvoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Bequipment holds the value of the "bequipment" field.
	Bequipment string `json:"bequipment,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepairinvoiceQuery when eager-loading is set.
	Edges                       RepairinvoiceEdges `json:"edges"`
	employee_id                 *int
	rentalstatus_repairinvoices *int
}

// RepairinvoiceEdges holds the relations/edges for other nodes in the graph.
type RepairinvoiceEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Rentalstatus holds the value of the Rentalstatus edge.
	Rentalstatus *Rentalstatus
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepairinvoiceEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// RentalstatusOrErr returns the Rentalstatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepairinvoiceEdges) RentalstatusOrErr() (*Rentalstatus, error) {
	if e.loadedTypes[1] {
		if e.Rentalstatus == nil {
			// The edge Rentalstatus was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rentalstatus.Label}
		}
		return e.Rentalstatus, nil
	}
	return nil, &NotLoadedError{edge: "Rentalstatus"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Repairinvoice) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // bequipment
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Repairinvoice) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // employee_id
		&sql.NullInt64{}, // rentalstatus_repairinvoices
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Repairinvoice fields.
func (r *Repairinvoice) assignValues(values ...interface{}) error {
	if m, n := len(values), len(repairinvoice.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field bequipment", values[0])
	} else if value.Valid {
		r.Bequipment = value.String
	}
	values = values[1:]
	if len(values) == len(repairinvoice.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_id", value)
		} else if value.Valid {
			r.employee_id = new(int)
			*r.employee_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field rentalstatus_repairinvoices", value)
		} else if value.Valid {
			r.rentalstatus_repairinvoices = new(int)
			*r.rentalstatus_repairinvoices = int(value.Int64)
		}
	}
	return nil
}

// QueryEmployee queries the employee edge of the Repairinvoice.
func (r *Repairinvoice) QueryEmployee() *EmployeeQuery {
	return (&RepairinvoiceClient{config: r.config}).QueryEmployee(r)
}

// QueryRentalstatus queries the Rentalstatus edge of the Repairinvoice.
func (r *Repairinvoice) QueryRentalstatus() *RentalstatusQuery {
	return (&RepairinvoiceClient{config: r.config}).QueryRentalstatus(r)
}

// Update returns a builder for updating this Repairinvoice.
// Note that, you need to call Repairinvoice.Unwrap() before calling this method, if this Repairinvoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Repairinvoice) Update() *RepairinvoiceUpdateOne {
	return (&RepairinvoiceClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Repairinvoice) Unwrap() *Repairinvoice {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Repairinvoice is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Repairinvoice) String() string {
	var builder strings.Builder
	builder.WriteString("Repairinvoice(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", bequipment=")
	builder.WriteString(r.Bequipment)
	builder.WriteByte(')')
	return builder.String()
}

// Repairinvoices is a parsable slice of Repairinvoice.
type Repairinvoices []*Repairinvoice

func (r Repairinvoices) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
