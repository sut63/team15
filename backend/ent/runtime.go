// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/team15/app/ent/cleanername"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/lengthtime"
	"github.com/team15/app/ent/quantity"
	"github.com/team15/app/ent/room"
	"github.com/team15/app/ent/schema"
	"github.com/team15/app/ent/statusd"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	cleanernameFields := schema.CleanerName{}.Fields()
	_ = cleanernameFields
	// cleanernameDescCleanername is the schema descriptor for cleanername field.
	cleanernameDescCleanername := cleanernameFields[0].Descriptor()
	// cleanername.CleanernameValidator is a validator for the "cleanername" field. It is called by the builders before save.
	cleanername.CleanernameValidator = cleanernameDescCleanername.Validators[0].(func(string) error)
	employeeFields := schema.Employee{}.Fields()
	_ = employeeFields
	// employeeDescEmployeename is the schema descriptor for employeename field.
	employeeDescEmployeename := employeeFields[0].Descriptor()
	// employee.EmployeenameValidator is a validator for the "employeename" field. It is called by the builders before save.
	employee.EmployeenameValidator = employeeDescEmployeename.Validators[0].(func(string) error)
	// employeeDescEmployeeemail is the schema descriptor for employeeemail field.
	employeeDescEmployeeemail := employeeFields[1].Descriptor()
	// employee.EmployeeemailValidator is a validator for the "employeeemail" field. It is called by the builders before save.
	employee.EmployeeemailValidator = employeeDescEmployeeemail.Validators[0].(func(string) error)
	// employeeDescPassword is the schema descriptor for password field.
	employeeDescPassword := employeeFields[2].Descriptor()
	// employee.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	employee.PasswordValidator = employeeDescPassword.Validators[0].(func(string) error)
	lengthtimeFields := schema.LengthTime{}.Fields()
	_ = lengthtimeFields
	// lengthtimeDescLengthtime is the schema descriptor for lengthtime field.
	lengthtimeDescLengthtime := lengthtimeFields[0].Descriptor()
	// lengthtime.LengthtimeValidator is a validator for the "lengthtime" field. It is called by the builders before save.
	lengthtime.LengthtimeValidator = lengthtimeDescLengthtime.Validators[0].(func(string) error)
	quantityFields := schema.Quantity{}.Fields()
	_ = quantityFields
	// quantityDescQuantity is the schema descriptor for quantity field.
	quantityDescQuantity := quantityFields[0].Descriptor()
	// quantity.QuantityValidator is a validator for the "quantity" field. It is called by the builders before save.
	quantity.QuantityValidator = quantityDescQuantity.Validators[0].(func(int) error)
	roomFields := schema.Room{}.Fields()
	_ = roomFields
	// roomDescRoomprice is the schema descriptor for roomprice field.
	roomDescRoomprice := roomFields[0].Descriptor()
	// room.RoompriceValidator is a validator for the "roomprice" field. It is called by the builders before save.
	room.RoompriceValidator = roomDescRoomprice.Validators[0].(func(int) error)
	statusdFields := schema.Statusd{}.Fields()
	_ = statusdFields
	// statusdDescStatusdname is the schema descriptor for statusdname field.
	statusdDescStatusdname := statusdFields[0].Descriptor()
	// statusd.StatusdnameValidator is a validator for the "statusdname" field. It is called by the builders before save.
	statusd.StatusdnameValidator = statusdDescStatusdname.Validators[0].(func(string) error)
}
