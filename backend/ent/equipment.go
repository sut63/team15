// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/equipment"
	"github.com/team15/app/ent/roomdetail"
)

// Equipment is the model entity for the Equipment schema.
type Equipment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Equipment holds the value of the "equipment" field.
	Equipment string `json:"equipment,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentQuery when eager-loading is set.
	Edges                 EquipmentEdges `json:"edges"`
	roomdetail_equipments *int
}

// EquipmentEdges holds the relations/edges for other nodes in the graph.
type EquipmentEdges struct {
	// Roomdetail holds the value of the roomdetail edge.
	Roomdetail *Roomdetail
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoomdetailOrErr returns the Roomdetail value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) RoomdetailOrErr() (*Roomdetail, error) {
	if e.loadedTypes[0] {
		if e.Roomdetail == nil {
			// The edge roomdetail was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomdetail.Label}
		}
		return e.Roomdetail, nil
	}
	return nil, &NotLoadedError{edge: "roomdetail"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Equipment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // equipment
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Equipment) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // roomdetail_equipments
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Equipment fields.
func (e *Equipment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(equipment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field equipment", values[0])
	} else if value.Valid {
		e.Equipment = value.String
	}
	values = values[1:]
	if len(values) == len(equipment.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field roomdetail_equipments", value)
		} else if value.Valid {
			e.roomdetail_equipments = new(int)
			*e.roomdetail_equipments = int(value.Int64)
		}
	}
	return nil
}

// QueryRoomdetail queries the roomdetail edge of the Equipment.
func (e *Equipment) QueryRoomdetail() *RoomdetailQuery {
	return (&EquipmentClient{config: e.config}).QueryRoomdetail(e)
}

// Update returns a builder for updating this Equipment.
// Note that, you need to call Equipment.Unwrap() before calling this method, if this Equipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Equipment) Update() *EquipmentUpdateOne {
	return (&EquipmentClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Equipment) Unwrap() *Equipment {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Equipment is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Equipment) String() string {
	var builder strings.Builder
	builder.WriteString("Equipment(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", equipment=")
	builder.WriteString(e.Equipment)
	builder.WriteByte(')')
	return builder.String()
}

// EquipmentSlice is a parsable slice of Equipment.
type EquipmentSlice []*Equipment

func (e EquipmentSlice) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
