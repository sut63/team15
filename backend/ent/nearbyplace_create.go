// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/nearbyplace"
	"github.com/team15/app/ent/room"
)

// NearbyPlaceCreate is the builder for creating a NearbyPlace entity.
type NearbyPlaceCreate struct {
	config
	mutation *NearbyPlaceMutation
	hooks    []Hook
}

// SetPlacename sets the placename field.
func (npc *NearbyPlaceCreate) SetPlacename(s string) *NearbyPlaceCreate {
	npc.mutation.SetPlacename(s)
	return npc
}

// AddRoomIDs adds the room edge to Room by ids.
func (npc *NearbyPlaceCreate) AddRoomIDs(ids ...int) *NearbyPlaceCreate {
	npc.mutation.AddRoomIDs(ids...)
	return npc
}

// AddRoom adds the room edges to Room.
func (npc *NearbyPlaceCreate) AddRoom(r ...*Room) *NearbyPlaceCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return npc.AddRoomIDs(ids...)
}

// Mutation returns the NearbyPlaceMutation object of the builder.
func (npc *NearbyPlaceCreate) Mutation() *NearbyPlaceMutation {
	return npc.mutation
}

// Save creates the NearbyPlace in the database.
func (npc *NearbyPlaceCreate) Save(ctx context.Context) (*NearbyPlace, error) {
	if _, ok := npc.mutation.Placename(); !ok {
		return nil, &ValidationError{Name: "placename", err: errors.New("ent: missing required field \"placename\"")}
	}
	var (
		err  error
		node *NearbyPlace
	)
	if len(npc.hooks) == 0 {
		node, err = npc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NearbyPlaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			npc.mutation = mutation
			node, err = npc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(npc.hooks) - 1; i >= 0; i-- {
			mut = npc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, npc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (npc *NearbyPlaceCreate) SaveX(ctx context.Context) *NearbyPlace {
	v, err := npc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (npc *NearbyPlaceCreate) sqlSave(ctx context.Context) (*NearbyPlace, error) {
	np, _spec := npc.createSpec()
	if err := sqlgraph.CreateNode(ctx, npc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	np.ID = int(id)
	return np, nil
}

func (npc *NearbyPlaceCreate) createSpec() (*NearbyPlace, *sqlgraph.CreateSpec) {
	var (
		np    = &NearbyPlace{config: npc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: nearbyplace.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nearbyplace.FieldID,
			},
		}
	)
	if value, ok := npc.mutation.Placename(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nearbyplace.FieldPlacename,
		})
		np.Placename = value
	}
	if nodes := npc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   nearbyplace.RoomTable,
			Columns: nearbyplace.RoomPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return np, _spec
}
