// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/nearbyplace"
	"github.com/team15/app/ent/roomdetail"
)

// NearbyplaceCreate is the builder for creating a Nearbyplace entity.
type NearbyplaceCreate struct {
	config
	mutation *NearbyplaceMutation
	hooks    []Hook
}

// SetNearbyplace sets the nearbyplace field.
func (nc *NearbyplaceCreate) SetNearbyplace(s string) *NearbyplaceCreate {
	nc.mutation.SetNearbyplace(s)
	return nc
}

// AddRoomdetailIDs adds the roomdetail edge to Roomdetail by ids.
func (nc *NearbyplaceCreate) AddRoomdetailIDs(ids ...int) *NearbyplaceCreate {
	nc.mutation.AddRoomdetailIDs(ids...)
	return nc
}

// AddRoomdetail adds the roomdetail edges to Roomdetail.
func (nc *NearbyplaceCreate) AddRoomdetail(r ...*Roomdetail) *NearbyplaceCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return nc.AddRoomdetailIDs(ids...)
}

// Mutation returns the NearbyplaceMutation object of the builder.
func (nc *NearbyplaceCreate) Mutation() *NearbyplaceMutation {
	return nc.mutation
}

// Save creates the Nearbyplace in the database.
func (nc *NearbyplaceCreate) Save(ctx context.Context) (*Nearbyplace, error) {
	if _, ok := nc.mutation.Nearbyplace(); !ok {
		return nil, &ValidationError{Name: "nearbyplace", err: errors.New("ent: missing required field \"nearbyplace\"")}
	}
	var (
		err  error
		node *Nearbyplace
	)
	if len(nc.hooks) == 0 {
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NearbyplaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nc.mutation = mutation
			node, err = nc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			mut = nc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NearbyplaceCreate) SaveX(ctx context.Context) *Nearbyplace {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (nc *NearbyplaceCreate) sqlSave(ctx context.Context) (*Nearbyplace, error) {
	n, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	n.ID = int(id)
	return n, nil
}

func (nc *NearbyplaceCreate) createSpec() (*Nearbyplace, *sqlgraph.CreateSpec) {
	var (
		n     = &Nearbyplace{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: nearbyplace.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nearbyplace.FieldID,
			},
		}
	)
	if value, ok := nc.mutation.Nearbyplace(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nearbyplace.FieldNearbyplace,
		})
		n.Nearbyplace = value
	}
	if nodes := nc.mutation.RoomdetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nearbyplace.RoomdetailTable,
			Columns: []string{nearbyplace.RoomdetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return n, _spec
}
