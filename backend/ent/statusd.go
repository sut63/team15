// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/statusd"
)

// Statusd is the model entity for the Statusd schema.
type Statusd struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Statusdname holds the value of the "statusdname" field.
	Statusdname string `json:"statusdname,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusdQuery when eager-loading is set.
	Edges StatusdEdges `json:"edges"`
}

// StatusdEdges holds the relations/edges for other nodes in the graph.
type StatusdEdges struct {
	// Statusds holds the value of the statusds edge.
	Statusds []*Deposit
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StatusdsOrErr returns the Statusds value or an error if the edge
// was not loaded in eager-loading.
func (e StatusdEdges) StatusdsOrErr() ([]*Deposit, error) {
	if e.loadedTypes[0] {
		return e.Statusds, nil
	}
	return nil, &NotLoadedError{edge: "statusds"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Statusd) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // statusdname
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Statusd fields.
func (s *Statusd) assignValues(values ...interface{}) error {
	if m, n := len(values), len(statusd.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field statusdname", values[0])
	} else if value.Valid {
		s.Statusdname = value.String
	}
	return nil
}

// QueryStatusds queries the statusds edge of the Statusd.
func (s *Statusd) QueryStatusds() *DepositQuery {
	return (&StatusdClient{config: s.config}).QueryStatusds(s)
}

// Update returns a builder for updating this Statusd.
// Note that, you need to call Statusd.Unwrap() before calling this method, if this Statusd
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Statusd) Update() *StatusdUpdateOne {
	return (&StatusdClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Statusd) Unwrap() *Statusd {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Statusd is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Statusd) String() string {
	var builder strings.Builder
	builder.WriteString("Statusd(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", statusdname=")
	builder.WriteString(s.Statusdname)
	builder.WriteByte(')')
	return builder.String()
}

// Statusds is a parsable slice of Statusd.
type Statusds []*Statusd

func (s Statusds) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
