// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/bedtype"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/jobposition"
	"github.com/team15/app/ent/lease"
	"github.com/team15/app/ent/petrule"
	"github.com/team15/app/ent/pledge"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/roomdetail"
	"github.com/team15/app/ent/staytype"
)

// RoomdetailUpdate is the builder for updating Roomdetail entities.
type RoomdetailUpdate struct {
	config
	hooks      []Hook
	mutation   *RoomdetailMutation
	predicates []predicate.Roomdetail
}

// Where adds a new predicate for the builder.
func (ru *RoomdetailUpdate) Where(ps ...predicate.Roomdetail) *RoomdetailUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetRoomnumber sets the roomnumber field.
func (ru *RoomdetailUpdate) SetRoomnumber(s string) *RoomdetailUpdate {
	ru.mutation.SetRoomnumber(s)
	return ru
}

// SetRoomtypename sets the roomtypename field.
func (ru *RoomdetailUpdate) SetRoomtypename(s string) *RoomdetailUpdate {
	ru.mutation.SetRoomtypename(s)
	return ru
}

// SetRoomprice sets the roomprice field.
func (ru *RoomdetailUpdate) SetRoomprice(s string) *RoomdetailUpdate {
	ru.mutation.SetRoomprice(s)
	return ru
}

// SetPhone sets the phone field.
func (ru *RoomdetailUpdate) SetPhone(s string) *RoomdetailUpdate {
	ru.mutation.SetPhone(s)
	return ru
}

// SetSleep sets the sleep field.
func (ru *RoomdetailUpdate) SetSleep(i int) *RoomdetailUpdate {
	ru.mutation.ResetSleep()
	ru.mutation.SetSleep(i)
	return ru
}

// AddSleep adds i to sleep.
func (ru *RoomdetailUpdate) AddSleep(i int) *RoomdetailUpdate {
	ru.mutation.AddSleep(i)
	return ru
}

// SetBed sets the bed field.
func (ru *RoomdetailUpdate) SetBed(i int) *RoomdetailUpdate {
	ru.mutation.ResetBed()
	ru.mutation.SetBed(i)
	return ru
}

// AddBed adds i to bed.
func (ru *RoomdetailUpdate) AddBed(i int) *RoomdetailUpdate {
	ru.mutation.AddBed(i)
	return ru
}

// SetPledgeID sets the pledge edge to Pledge by id.
func (ru *RoomdetailUpdate) SetPledgeID(id int) *RoomdetailUpdate {
	ru.mutation.SetPledgeID(id)
	return ru
}

// SetNillablePledgeID sets the pledge edge to Pledge by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillablePledgeID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetPledgeID(*id)
	}
	return ru
}

// SetPledge sets the pledge edge to Pledge.
func (ru *RoomdetailUpdate) SetPledge(p *Pledge) *RoomdetailUpdate {
	return ru.SetPledgeID(p.ID)
}

// SetPetruleID sets the petrule edge to Petrule by id.
func (ru *RoomdetailUpdate) SetPetruleID(id int) *RoomdetailUpdate {
	ru.mutation.SetPetruleID(id)
	return ru
}

// SetNillablePetruleID sets the petrule edge to Petrule by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillablePetruleID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetPetruleID(*id)
	}
	return ru
}

// SetPetrule sets the petrule edge to Petrule.
func (ru *RoomdetailUpdate) SetPetrule(p *Petrule) *RoomdetailUpdate {
	return ru.SetPetruleID(p.ID)
}

// SetBedtypeID sets the bedtype edge to Bedtype by id.
func (ru *RoomdetailUpdate) SetBedtypeID(id int) *RoomdetailUpdate {
	ru.mutation.SetBedtypeID(id)
	return ru
}

// SetNillableBedtypeID sets the bedtype edge to Bedtype by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillableBedtypeID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetBedtypeID(*id)
	}
	return ru
}

// SetBedtype sets the bedtype edge to Bedtype.
func (ru *RoomdetailUpdate) SetBedtype(b *Bedtype) *RoomdetailUpdate {
	return ru.SetBedtypeID(b.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (ru *RoomdetailUpdate) SetEmployeeID(id int) *RoomdetailUpdate {
	ru.mutation.SetEmployeeID(id)
	return ru
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillableEmployeeID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetEmployeeID(*id)
	}
	return ru
}

// SetEmployee sets the employee edge to Employee.
func (ru *RoomdetailUpdate) SetEmployee(e *Employee) *RoomdetailUpdate {
	return ru.SetEmployeeID(e.ID)
}

// SetJobpositionID sets the jobposition edge to Jobposition by id.
func (ru *RoomdetailUpdate) SetJobpositionID(id int) *RoomdetailUpdate {
	ru.mutation.SetJobpositionID(id)
	return ru
}

// SetNillableJobpositionID sets the jobposition edge to Jobposition by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillableJobpositionID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetJobpositionID(*id)
	}
	return ru
}

// SetJobposition sets the jobposition edge to Jobposition.
func (ru *RoomdetailUpdate) SetJobposition(j *Jobposition) *RoomdetailUpdate {
	return ru.SetJobpositionID(j.ID)
}

// SetStaytypeID sets the staytype edge to Staytype by id.
func (ru *RoomdetailUpdate) SetStaytypeID(id int) *RoomdetailUpdate {
	ru.mutation.SetStaytypeID(id)
	return ru
}

// SetNillableStaytypeID sets the staytype edge to Staytype by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillableStaytypeID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetStaytypeID(*id)
	}
	return ru
}

// SetStaytype sets the staytype edge to Staytype.
func (ru *RoomdetailUpdate) SetStaytype(s *Staytype) *RoomdetailUpdate {
	return ru.SetStaytypeID(s.ID)
}

// SetRoomdetailsID sets the roomdetails edge to Lease by id.
func (ru *RoomdetailUpdate) SetRoomdetailsID(id int) *RoomdetailUpdate {
	ru.mutation.SetRoomdetailsID(id)
	return ru
}

// SetNillableRoomdetailsID sets the roomdetails edge to Lease by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillableRoomdetailsID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetRoomdetailsID(*id)
	}
	return ru
}

// SetRoomdetails sets the roomdetails edge to Lease.
func (ru *RoomdetailUpdate) SetRoomdetails(l *Lease) *RoomdetailUpdate {
	return ru.SetRoomdetailsID(l.ID)
}

// AddCleaningroomIDs adds the cleaningrooms edge to CleaningRoom by ids.
func (ru *RoomdetailUpdate) AddCleaningroomIDs(ids ...int) *RoomdetailUpdate {
	ru.mutation.AddCleaningroomIDs(ids...)
	return ru
}

// AddCleaningrooms adds the cleaningrooms edges to CleaningRoom.
func (ru *RoomdetailUpdate) AddCleaningrooms(c ...*CleaningRoom) *RoomdetailUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddCleaningroomIDs(ids...)
}

// Mutation returns the RoomdetailMutation object of the builder.
func (ru *RoomdetailUpdate) Mutation() *RoomdetailMutation {
	return ru.mutation
}

// ClearPledge clears the pledge edge to Pledge.
func (ru *RoomdetailUpdate) ClearPledge() *RoomdetailUpdate {
	ru.mutation.ClearPledge()
	return ru
}

// ClearPetrule clears the petrule edge to Petrule.
func (ru *RoomdetailUpdate) ClearPetrule() *RoomdetailUpdate {
	ru.mutation.ClearPetrule()
	return ru
}

// ClearBedtype clears the bedtype edge to Bedtype.
func (ru *RoomdetailUpdate) ClearBedtype() *RoomdetailUpdate {
	ru.mutation.ClearBedtype()
	return ru
}

// ClearEmployee clears the employee edge to Employee.
func (ru *RoomdetailUpdate) ClearEmployee() *RoomdetailUpdate {
	ru.mutation.ClearEmployee()
	return ru
}

// ClearJobposition clears the jobposition edge to Jobposition.
func (ru *RoomdetailUpdate) ClearJobposition() *RoomdetailUpdate {
	ru.mutation.ClearJobposition()
	return ru
}

// ClearStaytype clears the staytype edge to Staytype.
func (ru *RoomdetailUpdate) ClearStaytype() *RoomdetailUpdate {
	ru.mutation.ClearStaytype()
	return ru
}

// ClearRoomdetails clears the roomdetails edge to Lease.
func (ru *RoomdetailUpdate) ClearRoomdetails() *RoomdetailUpdate {
	ru.mutation.ClearRoomdetails()
	return ru
}

// RemoveCleaningroomIDs removes the cleaningrooms edge to CleaningRoom by ids.
func (ru *RoomdetailUpdate) RemoveCleaningroomIDs(ids ...int) *RoomdetailUpdate {
	ru.mutation.RemoveCleaningroomIDs(ids...)
	return ru
}

// RemoveCleaningrooms removes cleaningrooms edges to CleaningRoom.
func (ru *RoomdetailUpdate) RemoveCleaningrooms(c ...*CleaningRoom) *RoomdetailUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveCleaningroomIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RoomdetailUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ru.mutation.Roomnumber(); ok {
		if err := roomdetail.RoomnumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "roomnumber", err: fmt.Errorf("ent: validator failed for field \"roomnumber\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Roomtypename(); ok {
		if err := roomdetail.RoomtypenameValidator(v); err != nil {
			return 0, &ValidationError{Name: "roomtypename", err: fmt.Errorf("ent: validator failed for field \"roomtypename\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Roomprice(); ok {
		if err := roomdetail.RoompriceValidator(v); err != nil {
			return 0, &ValidationError{Name: "roomprice", err: fmt.Errorf("ent: validator failed for field \"roomprice\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Phone(); ok {
		if err := roomdetail.PhoneValidator(v); err != nil {
			return 0, &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Sleep(); ok {
		if err := roomdetail.SleepValidator(v); err != nil {
			return 0, &ValidationError{Name: "sleep", err: fmt.Errorf("ent: validator failed for field \"sleep\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Bed(); ok {
		if err := roomdetail.BedValidator(v); err != nil {
			return 0, &ValidationError{Name: "bed", err: fmt.Errorf("ent: validator failed for field \"bed\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomdetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomdetailUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomdetailUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomdetailUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoomdetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roomdetail.Table,
			Columns: roomdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roomdetail.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Roomnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldRoomnumber,
		})
	}
	if value, ok := ru.mutation.Roomtypename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldRoomtypename,
		})
	}
	if value, ok := ru.mutation.Roomprice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldRoomprice,
		})
	}
	if value, ok := ru.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldPhone,
		})
	}
	if value, ok := ru.mutation.Sleep(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomdetail.FieldSleep,
		})
	}
	if value, ok := ru.mutation.AddedSleep(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomdetail.FieldSleep,
		})
	}
	if value, ok := ru.mutation.Bed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomdetail.FieldBed,
		})
	}
	if value, ok := ru.mutation.AddedBed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomdetail.FieldBed,
		})
	}
	if ru.mutation.PledgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.PledgeTable,
			Columns: []string{roomdetail.PledgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pledge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PledgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.PledgeTable,
			Columns: []string{roomdetail.PledgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pledge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PetruleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.PetruleTable,
			Columns: []string{roomdetail.PetruleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: petrule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PetruleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.PetruleTable,
			Columns: []string{roomdetail.PetruleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: petrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.BedtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.BedtypeTable,
			Columns: []string{roomdetail.BedtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BedtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.BedtypeTable,
			Columns: []string{roomdetail.BedtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EmployeeTable,
			Columns: []string{roomdetail.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EmployeeTable,
			Columns: []string{roomdetail.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.JobpositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.JobpositionTable,
			Columns: []string{roomdetail.JobpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobposition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.JobpositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.JobpositionTable,
			Columns: []string{roomdetail.JobpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobposition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.StaytypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.StaytypeTable,
			Columns: []string{roomdetail.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StaytypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.StaytypeTable,
			Columns: []string{roomdetail.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RoomdetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   roomdetail.RoomdetailsTable,
			Columns: []string{roomdetail.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   roomdetail.RoomdetailsTable,
			Columns: []string{roomdetail.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ru.mutation.RemovedCleaningroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roomdetail.CleaningroomsTable,
			Columns: []string{roomdetail.CleaningroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleaningroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CleaningroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roomdetail.CleaningroomsTable,
			Columns: []string{roomdetail.CleaningroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleaningroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RoomdetailUpdateOne is the builder for updating a single Roomdetail entity.
type RoomdetailUpdateOne struct {
	config
	hooks    []Hook
	mutation *RoomdetailMutation
}

// SetRoomnumber sets the roomnumber field.
func (ruo *RoomdetailUpdateOne) SetRoomnumber(s string) *RoomdetailUpdateOne {
	ruo.mutation.SetRoomnumber(s)
	return ruo
}

// SetRoomtypename sets the roomtypename field.
func (ruo *RoomdetailUpdateOne) SetRoomtypename(s string) *RoomdetailUpdateOne {
	ruo.mutation.SetRoomtypename(s)
	return ruo
}

// SetRoomprice sets the roomprice field.
func (ruo *RoomdetailUpdateOne) SetRoomprice(s string) *RoomdetailUpdateOne {
	ruo.mutation.SetRoomprice(s)
	return ruo
}

// SetPhone sets the phone field.
func (ruo *RoomdetailUpdateOne) SetPhone(s string) *RoomdetailUpdateOne {
	ruo.mutation.SetPhone(s)
	return ruo
}

// SetSleep sets the sleep field.
func (ruo *RoomdetailUpdateOne) SetSleep(i int) *RoomdetailUpdateOne {
	ruo.mutation.ResetSleep()
	ruo.mutation.SetSleep(i)
	return ruo
}

// AddSleep adds i to sleep.
func (ruo *RoomdetailUpdateOne) AddSleep(i int) *RoomdetailUpdateOne {
	ruo.mutation.AddSleep(i)
	return ruo
}

// SetBed sets the bed field.
func (ruo *RoomdetailUpdateOne) SetBed(i int) *RoomdetailUpdateOne {
	ruo.mutation.ResetBed()
	ruo.mutation.SetBed(i)
	return ruo
}

// AddBed adds i to bed.
func (ruo *RoomdetailUpdateOne) AddBed(i int) *RoomdetailUpdateOne {
	ruo.mutation.AddBed(i)
	return ruo
}

// SetPledgeID sets the pledge edge to Pledge by id.
func (ruo *RoomdetailUpdateOne) SetPledgeID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetPledgeID(id)
	return ruo
}

// SetNillablePledgeID sets the pledge edge to Pledge by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillablePledgeID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetPledgeID(*id)
	}
	return ruo
}

// SetPledge sets the pledge edge to Pledge.
func (ruo *RoomdetailUpdateOne) SetPledge(p *Pledge) *RoomdetailUpdateOne {
	return ruo.SetPledgeID(p.ID)
}

// SetPetruleID sets the petrule edge to Petrule by id.
func (ruo *RoomdetailUpdateOne) SetPetruleID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetPetruleID(id)
	return ruo
}

// SetNillablePetruleID sets the petrule edge to Petrule by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillablePetruleID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetPetruleID(*id)
	}
	return ruo
}

// SetPetrule sets the petrule edge to Petrule.
func (ruo *RoomdetailUpdateOne) SetPetrule(p *Petrule) *RoomdetailUpdateOne {
	return ruo.SetPetruleID(p.ID)
}

// SetBedtypeID sets the bedtype edge to Bedtype by id.
func (ruo *RoomdetailUpdateOne) SetBedtypeID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetBedtypeID(id)
	return ruo
}

// SetNillableBedtypeID sets the bedtype edge to Bedtype by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillableBedtypeID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetBedtypeID(*id)
	}
	return ruo
}

// SetBedtype sets the bedtype edge to Bedtype.
func (ruo *RoomdetailUpdateOne) SetBedtype(b *Bedtype) *RoomdetailUpdateOne {
	return ruo.SetBedtypeID(b.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (ruo *RoomdetailUpdateOne) SetEmployeeID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetEmployeeID(id)
	return ruo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillableEmployeeID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetEmployeeID(*id)
	}
	return ruo
}

// SetEmployee sets the employee edge to Employee.
func (ruo *RoomdetailUpdateOne) SetEmployee(e *Employee) *RoomdetailUpdateOne {
	return ruo.SetEmployeeID(e.ID)
}

// SetJobpositionID sets the jobposition edge to Jobposition by id.
func (ruo *RoomdetailUpdateOne) SetJobpositionID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetJobpositionID(id)
	return ruo
}

// SetNillableJobpositionID sets the jobposition edge to Jobposition by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillableJobpositionID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetJobpositionID(*id)
	}
	return ruo
}

// SetJobposition sets the jobposition edge to Jobposition.
func (ruo *RoomdetailUpdateOne) SetJobposition(j *Jobposition) *RoomdetailUpdateOne {
	return ruo.SetJobpositionID(j.ID)
}

// SetStaytypeID sets the staytype edge to Staytype by id.
func (ruo *RoomdetailUpdateOne) SetStaytypeID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetStaytypeID(id)
	return ruo
}

// SetNillableStaytypeID sets the staytype edge to Staytype by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillableStaytypeID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetStaytypeID(*id)
	}
	return ruo
}

// SetStaytype sets the staytype edge to Staytype.
func (ruo *RoomdetailUpdateOne) SetStaytype(s *Staytype) *RoomdetailUpdateOne {
	return ruo.SetStaytypeID(s.ID)
}

// SetRoomdetailsID sets the roomdetails edge to Lease by id.
func (ruo *RoomdetailUpdateOne) SetRoomdetailsID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetRoomdetailsID(id)
	return ruo
}

// SetNillableRoomdetailsID sets the roomdetails edge to Lease by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillableRoomdetailsID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetRoomdetailsID(*id)
	}
	return ruo
}

// SetRoomdetails sets the roomdetails edge to Lease.
func (ruo *RoomdetailUpdateOne) SetRoomdetails(l *Lease) *RoomdetailUpdateOne {
	return ruo.SetRoomdetailsID(l.ID)
}

// AddCleaningroomIDs adds the cleaningrooms edge to CleaningRoom by ids.
func (ruo *RoomdetailUpdateOne) AddCleaningroomIDs(ids ...int) *RoomdetailUpdateOne {
	ruo.mutation.AddCleaningroomIDs(ids...)
	return ruo
}

// AddCleaningrooms adds the cleaningrooms edges to CleaningRoom.
func (ruo *RoomdetailUpdateOne) AddCleaningrooms(c ...*CleaningRoom) *RoomdetailUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddCleaningroomIDs(ids...)
}

// Mutation returns the RoomdetailMutation object of the builder.
func (ruo *RoomdetailUpdateOne) Mutation() *RoomdetailMutation {
	return ruo.mutation
}

// ClearPledge clears the pledge edge to Pledge.
func (ruo *RoomdetailUpdateOne) ClearPledge() *RoomdetailUpdateOne {
	ruo.mutation.ClearPledge()
	return ruo
}

// ClearPetrule clears the petrule edge to Petrule.
func (ruo *RoomdetailUpdateOne) ClearPetrule() *RoomdetailUpdateOne {
	ruo.mutation.ClearPetrule()
	return ruo
}

// ClearBedtype clears the bedtype edge to Bedtype.
func (ruo *RoomdetailUpdateOne) ClearBedtype() *RoomdetailUpdateOne {
	ruo.mutation.ClearBedtype()
	return ruo
}

// ClearEmployee clears the employee edge to Employee.
func (ruo *RoomdetailUpdateOne) ClearEmployee() *RoomdetailUpdateOne {
	ruo.mutation.ClearEmployee()
	return ruo
}

// ClearJobposition clears the jobposition edge to Jobposition.
func (ruo *RoomdetailUpdateOne) ClearJobposition() *RoomdetailUpdateOne {
	ruo.mutation.ClearJobposition()
	return ruo
}

// ClearStaytype clears the staytype edge to Staytype.
func (ruo *RoomdetailUpdateOne) ClearStaytype() *RoomdetailUpdateOne {
	ruo.mutation.ClearStaytype()
	return ruo
}

// ClearRoomdetails clears the roomdetails edge to Lease.
func (ruo *RoomdetailUpdateOne) ClearRoomdetails() *RoomdetailUpdateOne {
	ruo.mutation.ClearRoomdetails()
	return ruo
}

// RemoveCleaningroomIDs removes the cleaningrooms edge to CleaningRoom by ids.
func (ruo *RoomdetailUpdateOne) RemoveCleaningroomIDs(ids ...int) *RoomdetailUpdateOne {
	ruo.mutation.RemoveCleaningroomIDs(ids...)
	return ruo
}

// RemoveCleaningrooms removes cleaningrooms edges to CleaningRoom.
func (ruo *RoomdetailUpdateOne) RemoveCleaningrooms(c ...*CleaningRoom) *RoomdetailUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveCleaningroomIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *RoomdetailUpdateOne) Save(ctx context.Context) (*Roomdetail, error) {
	if v, ok := ruo.mutation.Roomnumber(); ok {
		if err := roomdetail.RoomnumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "roomnumber", err: fmt.Errorf("ent: validator failed for field \"roomnumber\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Roomtypename(); ok {
		if err := roomdetail.RoomtypenameValidator(v); err != nil {
			return nil, &ValidationError{Name: "roomtypename", err: fmt.Errorf("ent: validator failed for field \"roomtypename\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Roomprice(); ok {
		if err := roomdetail.RoompriceValidator(v); err != nil {
			return nil, &ValidationError{Name: "roomprice", err: fmt.Errorf("ent: validator failed for field \"roomprice\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Phone(); ok {
		if err := roomdetail.PhoneValidator(v); err != nil {
			return nil, &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Sleep(); ok {
		if err := roomdetail.SleepValidator(v); err != nil {
			return nil, &ValidationError{Name: "sleep", err: fmt.Errorf("ent: validator failed for field \"sleep\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Bed(); ok {
		if err := roomdetail.BedValidator(v); err != nil {
			return nil, &ValidationError{Name: "bed", err: fmt.Errorf("ent: validator failed for field \"bed\": %w", err)}
		}
	}

	var (
		err  error
		node *Roomdetail
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomdetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomdetailUpdateOne) SaveX(ctx context.Context) *Roomdetail {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RoomdetailUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomdetailUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoomdetailUpdateOne) sqlSave(ctx context.Context) (r *Roomdetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roomdetail.Table,
			Columns: roomdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roomdetail.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Roomdetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Roomnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldRoomnumber,
		})
	}
	if value, ok := ruo.mutation.Roomtypename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldRoomtypename,
		})
	}
	if value, ok := ruo.mutation.Roomprice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldRoomprice,
		})
	}
	if value, ok := ruo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldPhone,
		})
	}
	if value, ok := ruo.mutation.Sleep(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomdetail.FieldSleep,
		})
	}
	if value, ok := ruo.mutation.AddedSleep(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomdetail.FieldSleep,
		})
	}
	if value, ok := ruo.mutation.Bed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomdetail.FieldBed,
		})
	}
	if value, ok := ruo.mutation.AddedBed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomdetail.FieldBed,
		})
	}
	if ruo.mutation.PledgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.PledgeTable,
			Columns: []string{roomdetail.PledgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pledge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PledgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.PledgeTable,
			Columns: []string{roomdetail.PledgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pledge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PetruleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.PetruleTable,
			Columns: []string{roomdetail.PetruleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: petrule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PetruleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.PetruleTable,
			Columns: []string{roomdetail.PetruleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: petrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.BedtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.BedtypeTable,
			Columns: []string{roomdetail.BedtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BedtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.BedtypeTable,
			Columns: []string{roomdetail.BedtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bedtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EmployeeTable,
			Columns: []string{roomdetail.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EmployeeTable,
			Columns: []string{roomdetail.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.JobpositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.JobpositionTable,
			Columns: []string{roomdetail.JobpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobposition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.JobpositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.JobpositionTable,
			Columns: []string{roomdetail.JobpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobposition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.StaytypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.StaytypeTable,
			Columns: []string{roomdetail.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StaytypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.StaytypeTable,
			Columns: []string{roomdetail.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RoomdetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   roomdetail.RoomdetailsTable,
			Columns: []string{roomdetail.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   roomdetail.RoomdetailsTable,
			Columns: []string{roomdetail.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ruo.mutation.RemovedCleaningroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roomdetail.CleaningroomsTable,
			Columns: []string{roomdetail.CleaningroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleaningroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CleaningroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roomdetail.CleaningroomsTable,
			Columns: []string{roomdetail.CleaningroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleaningroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Roomdetail{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
