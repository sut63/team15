// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/equipment"
	"github.com/team15/app/ent/facilitie"
	"github.com/team15/app/ent/nearbyplace"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/quantity"
	"github.com/team15/app/ent/roomdetail"
	"github.com/team15/app/ent/staytype"
)

// RoomdetailUpdate is the builder for updating Roomdetail entities.
type RoomdetailUpdate struct {
	config
	hooks      []Hook
	mutation   *RoomdetailMutation
	predicates []predicate.Roomdetail
}

// Where adds a new predicate for the builder.
func (ru *RoomdetailUpdate) Where(ps ...predicate.Roomdetail) *RoomdetailUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetRoomtypename sets the roomtypename field.
func (ru *RoomdetailUpdate) SetRoomtypename(s string) *RoomdetailUpdate {
	ru.mutation.SetRoomtypename(s)
	return ru
}

// SetRoomprice sets the roomprice field.
func (ru *RoomdetailUpdate) SetRoomprice(s string) *RoomdetailUpdate {
	ru.mutation.SetRoomprice(s)
	return ru
}

// SetEquipmentsID sets the equipments edge to Equipment by id.
func (ru *RoomdetailUpdate) SetEquipmentsID(id int) *RoomdetailUpdate {
	ru.mutation.SetEquipmentsID(id)
	return ru
}

// SetNillableEquipmentsID sets the equipments edge to Equipment by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillableEquipmentsID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetEquipmentsID(*id)
	}
	return ru
}

// SetEquipments sets the equipments edge to Equipment.
func (ru *RoomdetailUpdate) SetEquipments(e *Equipment) *RoomdetailUpdate {
	return ru.SetEquipmentsID(e.ID)
}

// SetFacilitiesID sets the facilities edge to Facilitie by id.
func (ru *RoomdetailUpdate) SetFacilitiesID(id int) *RoomdetailUpdate {
	ru.mutation.SetFacilitiesID(id)
	return ru
}

// SetNillableFacilitiesID sets the facilities edge to Facilitie by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillableFacilitiesID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetFacilitiesID(*id)
	}
	return ru
}

// SetFacilities sets the facilities edge to Facilitie.
func (ru *RoomdetailUpdate) SetFacilities(f *Facilitie) *RoomdetailUpdate {
	return ru.SetFacilitiesID(f.ID)
}

// SetNearbyplacesID sets the nearbyplaces edge to Nearbyplace by id.
func (ru *RoomdetailUpdate) SetNearbyplacesID(id int) *RoomdetailUpdate {
	ru.mutation.SetNearbyplacesID(id)
	return ru
}

// SetNillableNearbyplacesID sets the nearbyplaces edge to Nearbyplace by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillableNearbyplacesID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetNearbyplacesID(*id)
	}
	return ru
}

// SetNearbyplaces sets the nearbyplaces edge to Nearbyplace.
func (ru *RoomdetailUpdate) SetNearbyplaces(n *Nearbyplace) *RoomdetailUpdate {
	return ru.SetNearbyplacesID(n.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (ru *RoomdetailUpdate) SetEmployeeID(id int) *RoomdetailUpdate {
	ru.mutation.SetEmployeeID(id)
	return ru
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillableEmployeeID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetEmployeeID(*id)
	}
	return ru
}

// SetEmployee sets the employee edge to Employee.
func (ru *RoomdetailUpdate) SetEmployee(e *Employee) *RoomdetailUpdate {
	return ru.SetEmployeeID(e.ID)
}

// SetQuantityID sets the quantity edge to Quantity by id.
func (ru *RoomdetailUpdate) SetQuantityID(id int) *RoomdetailUpdate {
	ru.mutation.SetQuantityID(id)
	return ru
}

// SetNillableQuantityID sets the quantity edge to Quantity by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillableQuantityID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetQuantityID(*id)
	}
	return ru
}

// SetQuantity sets the quantity edge to Quantity.
func (ru *RoomdetailUpdate) SetQuantity(q *Quantity) *RoomdetailUpdate {
	return ru.SetQuantityID(q.ID)
}

// SetStaytypeID sets the staytype edge to Staytype by id.
func (ru *RoomdetailUpdate) SetStaytypeID(id int) *RoomdetailUpdate {
	ru.mutation.SetStaytypeID(id)
	return ru
}

// SetNillableStaytypeID sets the staytype edge to Staytype by id if the given value is not nil.
func (ru *RoomdetailUpdate) SetNillableStaytypeID(id *int) *RoomdetailUpdate {
	if id != nil {
		ru = ru.SetStaytypeID(*id)
	}
	return ru
}

// SetStaytype sets the staytype edge to Staytype.
func (ru *RoomdetailUpdate) SetStaytype(s *Staytype) *RoomdetailUpdate {
	return ru.SetStaytypeID(s.ID)
}

// Mutation returns the RoomdetailMutation object of the builder.
func (ru *RoomdetailUpdate) Mutation() *RoomdetailMutation {
	return ru.mutation
}

// ClearEquipments clears the equipments edge to Equipment.
func (ru *RoomdetailUpdate) ClearEquipments() *RoomdetailUpdate {
	ru.mutation.ClearEquipments()
	return ru
}

// ClearFacilities clears the facilities edge to Facilitie.
func (ru *RoomdetailUpdate) ClearFacilities() *RoomdetailUpdate {
	ru.mutation.ClearFacilities()
	return ru
}

// ClearNearbyplaces clears the nearbyplaces edge to Nearbyplace.
func (ru *RoomdetailUpdate) ClearNearbyplaces() *RoomdetailUpdate {
	ru.mutation.ClearNearbyplaces()
	return ru
}

// ClearEmployee clears the employee edge to Employee.
func (ru *RoomdetailUpdate) ClearEmployee() *RoomdetailUpdate {
	ru.mutation.ClearEmployee()
	return ru
}

// ClearQuantity clears the quantity edge to Quantity.
func (ru *RoomdetailUpdate) ClearQuantity() *RoomdetailUpdate {
	ru.mutation.ClearQuantity()
	return ru
}

// ClearStaytype clears the staytype edge to Staytype.
func (ru *RoomdetailUpdate) ClearStaytype() *RoomdetailUpdate {
	ru.mutation.ClearStaytype()
	return ru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RoomdetailUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomdetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomdetailUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomdetailUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomdetailUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoomdetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roomdetail.Table,
			Columns: roomdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roomdetail.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Roomtypename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldRoomtypename,
		})
	}
	if value, ok := ru.mutation.Roomprice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldRoomprice,
		})
	}
	if ru.mutation.EquipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EquipmentsTable,
			Columns: []string{roomdetail.EquipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EquipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EquipmentsTable,
			Columns: []string{roomdetail.EquipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.FacilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.FacilitiesTable,
			Columns: []string{roomdetail.FacilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.FacilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.FacilitiesTable,
			Columns: []string{roomdetail.FacilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.NearbyplacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.NearbyplacesTable,
			Columns: []string{roomdetail.NearbyplacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nearbyplace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.NearbyplacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.NearbyplacesTable,
			Columns: []string{roomdetail.NearbyplacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nearbyplace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EmployeeTable,
			Columns: []string{roomdetail.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EmployeeTable,
			Columns: []string{roomdetail.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.QuantityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.QuantityTable,
			Columns: []string{roomdetail.QuantityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quantity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.QuantityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.QuantityTable,
			Columns: []string{roomdetail.QuantityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quantity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.StaytypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.StaytypeTable,
			Columns: []string{roomdetail.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StaytypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.StaytypeTable,
			Columns: []string{roomdetail.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RoomdetailUpdateOne is the builder for updating a single Roomdetail entity.
type RoomdetailUpdateOne struct {
	config
	hooks    []Hook
	mutation *RoomdetailMutation
}

// SetRoomtypename sets the roomtypename field.
func (ruo *RoomdetailUpdateOne) SetRoomtypename(s string) *RoomdetailUpdateOne {
	ruo.mutation.SetRoomtypename(s)
	return ruo
}

// SetRoomprice sets the roomprice field.
func (ruo *RoomdetailUpdateOne) SetRoomprice(s string) *RoomdetailUpdateOne {
	ruo.mutation.SetRoomprice(s)
	return ruo
}

// SetEquipmentsID sets the equipments edge to Equipment by id.
func (ruo *RoomdetailUpdateOne) SetEquipmentsID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetEquipmentsID(id)
	return ruo
}

// SetNillableEquipmentsID sets the equipments edge to Equipment by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillableEquipmentsID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetEquipmentsID(*id)
	}
	return ruo
}

// SetEquipments sets the equipments edge to Equipment.
func (ruo *RoomdetailUpdateOne) SetEquipments(e *Equipment) *RoomdetailUpdateOne {
	return ruo.SetEquipmentsID(e.ID)
}

// SetFacilitiesID sets the facilities edge to Facilitie by id.
func (ruo *RoomdetailUpdateOne) SetFacilitiesID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetFacilitiesID(id)
	return ruo
}

// SetNillableFacilitiesID sets the facilities edge to Facilitie by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillableFacilitiesID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetFacilitiesID(*id)
	}
	return ruo
}

// SetFacilities sets the facilities edge to Facilitie.
func (ruo *RoomdetailUpdateOne) SetFacilities(f *Facilitie) *RoomdetailUpdateOne {
	return ruo.SetFacilitiesID(f.ID)
}

// SetNearbyplacesID sets the nearbyplaces edge to Nearbyplace by id.
func (ruo *RoomdetailUpdateOne) SetNearbyplacesID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetNearbyplacesID(id)
	return ruo
}

// SetNillableNearbyplacesID sets the nearbyplaces edge to Nearbyplace by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillableNearbyplacesID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetNearbyplacesID(*id)
	}
	return ruo
}

// SetNearbyplaces sets the nearbyplaces edge to Nearbyplace.
func (ruo *RoomdetailUpdateOne) SetNearbyplaces(n *Nearbyplace) *RoomdetailUpdateOne {
	return ruo.SetNearbyplacesID(n.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (ruo *RoomdetailUpdateOne) SetEmployeeID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetEmployeeID(id)
	return ruo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillableEmployeeID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetEmployeeID(*id)
	}
	return ruo
}

// SetEmployee sets the employee edge to Employee.
func (ruo *RoomdetailUpdateOne) SetEmployee(e *Employee) *RoomdetailUpdateOne {
	return ruo.SetEmployeeID(e.ID)
}

// SetQuantityID sets the quantity edge to Quantity by id.
func (ruo *RoomdetailUpdateOne) SetQuantityID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetQuantityID(id)
	return ruo
}

// SetNillableQuantityID sets the quantity edge to Quantity by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillableQuantityID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetQuantityID(*id)
	}
	return ruo
}

// SetQuantity sets the quantity edge to Quantity.
func (ruo *RoomdetailUpdateOne) SetQuantity(q *Quantity) *RoomdetailUpdateOne {
	return ruo.SetQuantityID(q.ID)
}

// SetStaytypeID sets the staytype edge to Staytype by id.
func (ruo *RoomdetailUpdateOne) SetStaytypeID(id int) *RoomdetailUpdateOne {
	ruo.mutation.SetStaytypeID(id)
	return ruo
}

// SetNillableStaytypeID sets the staytype edge to Staytype by id if the given value is not nil.
func (ruo *RoomdetailUpdateOne) SetNillableStaytypeID(id *int) *RoomdetailUpdateOne {
	if id != nil {
		ruo = ruo.SetStaytypeID(*id)
	}
	return ruo
}

// SetStaytype sets the staytype edge to Staytype.
func (ruo *RoomdetailUpdateOne) SetStaytype(s *Staytype) *RoomdetailUpdateOne {
	return ruo.SetStaytypeID(s.ID)
}

// Mutation returns the RoomdetailMutation object of the builder.
func (ruo *RoomdetailUpdateOne) Mutation() *RoomdetailMutation {
	return ruo.mutation
}

// ClearEquipments clears the equipments edge to Equipment.
func (ruo *RoomdetailUpdateOne) ClearEquipments() *RoomdetailUpdateOne {
	ruo.mutation.ClearEquipments()
	return ruo
}

// ClearFacilities clears the facilities edge to Facilitie.
func (ruo *RoomdetailUpdateOne) ClearFacilities() *RoomdetailUpdateOne {
	ruo.mutation.ClearFacilities()
	return ruo
}

// ClearNearbyplaces clears the nearbyplaces edge to Nearbyplace.
func (ruo *RoomdetailUpdateOne) ClearNearbyplaces() *RoomdetailUpdateOne {
	ruo.mutation.ClearNearbyplaces()
	return ruo
}

// ClearEmployee clears the employee edge to Employee.
func (ruo *RoomdetailUpdateOne) ClearEmployee() *RoomdetailUpdateOne {
	ruo.mutation.ClearEmployee()
	return ruo
}

// ClearQuantity clears the quantity edge to Quantity.
func (ruo *RoomdetailUpdateOne) ClearQuantity() *RoomdetailUpdateOne {
	ruo.mutation.ClearQuantity()
	return ruo
}

// ClearStaytype clears the staytype edge to Staytype.
func (ruo *RoomdetailUpdateOne) ClearStaytype() *RoomdetailUpdateOne {
	ruo.mutation.ClearStaytype()
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *RoomdetailUpdateOne) Save(ctx context.Context) (*Roomdetail, error) {

	var (
		err  error
		node *Roomdetail
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomdetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomdetailUpdateOne) SaveX(ctx context.Context) *Roomdetail {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RoomdetailUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomdetailUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoomdetailUpdateOne) sqlSave(ctx context.Context) (r *Roomdetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roomdetail.Table,
			Columns: roomdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roomdetail.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Roomdetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Roomtypename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldRoomtypename,
		})
	}
	if value, ok := ruo.mutation.Roomprice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomdetail.FieldRoomprice,
		})
	}
	if ruo.mutation.EquipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EquipmentsTable,
			Columns: []string{roomdetail.EquipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EquipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EquipmentsTable,
			Columns: []string{roomdetail.EquipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.FacilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.FacilitiesTable,
			Columns: []string{roomdetail.FacilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.FacilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.FacilitiesTable,
			Columns: []string{roomdetail.FacilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facilitie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.NearbyplacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.NearbyplacesTable,
			Columns: []string{roomdetail.NearbyplacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nearbyplace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.NearbyplacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.NearbyplacesTable,
			Columns: []string{roomdetail.NearbyplacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nearbyplace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EmployeeTable,
			Columns: []string{roomdetail.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.EmployeeTable,
			Columns: []string{roomdetail.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.QuantityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.QuantityTable,
			Columns: []string{roomdetail.QuantityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quantity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.QuantityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.QuantityTable,
			Columns: []string{roomdetail.QuantityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quantity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.StaytypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.StaytypeTable,
			Columns: []string{roomdetail.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StaytypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomdetail.StaytypeTable,
			Columns: []string{roomdetail.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Roomdetail{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomdetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
