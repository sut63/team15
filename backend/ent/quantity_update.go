// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/quantity"
	"github.com/team15/app/ent/roomdetail"
)

// QuantityUpdate is the builder for updating Quantity entities.
type QuantityUpdate struct {
	config
	hooks      []Hook
	mutation   *QuantityMutation
	predicates []predicate.Quantity
}

// Where adds a new predicate for the builder.
func (qu *QuantityUpdate) Where(ps ...predicate.Quantity) *QuantityUpdate {
	qu.predicates = append(qu.predicates, ps...)
	return qu
}

// SetQuantity sets the quantity field.
func (qu *QuantityUpdate) SetQuantity(s string) *QuantityUpdate {
	qu.mutation.SetQuantity(s)
	return qu
}

// AddRoomdetailIDs adds the roomdetails edge to Roomdetail by ids.
func (qu *QuantityUpdate) AddRoomdetailIDs(ids ...int) *QuantityUpdate {
	qu.mutation.AddRoomdetailIDs(ids...)
	return qu
}

// AddRoomdetails adds the roomdetails edges to Roomdetail.
func (qu *QuantityUpdate) AddRoomdetails(r ...*Roomdetail) *QuantityUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return qu.AddRoomdetailIDs(ids...)
}

// Mutation returns the QuantityMutation object of the builder.
func (qu *QuantityUpdate) Mutation() *QuantityMutation {
	return qu.mutation
}

// RemoveRoomdetailIDs removes the roomdetails edge to Roomdetail by ids.
func (qu *QuantityUpdate) RemoveRoomdetailIDs(ids ...int) *QuantityUpdate {
	qu.mutation.RemoveRoomdetailIDs(ids...)
	return qu
}

// RemoveRoomdetails removes roomdetails edges to Roomdetail.
func (qu *QuantityUpdate) RemoveRoomdetails(r ...*Roomdetail) *QuantityUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return qu.RemoveRoomdetailIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (qu *QuantityUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(qu.hooks) == 0 {
		affected, err = qu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuantityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			qu.mutation = mutation
			affected, err = qu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(qu.hooks) - 1; i >= 0; i-- {
			mut = qu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuantityUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuantityUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuantityUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qu *QuantityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   quantity.Table,
			Columns: quantity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quantity.FieldID,
			},
		},
	}
	if ps := qu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: quantity.FieldQuantity,
		})
	}
	if nodes := qu.mutation.RemovedRoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quantity.RoomdetailsTable,
			Columns: []string{quantity.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quantity.RoomdetailsTable,
			Columns: []string{quantity.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quantity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// QuantityUpdateOne is the builder for updating a single Quantity entity.
type QuantityUpdateOne struct {
	config
	hooks    []Hook
	mutation *QuantityMutation
}

// SetQuantity sets the quantity field.
func (quo *QuantityUpdateOne) SetQuantity(s string) *QuantityUpdateOne {
	quo.mutation.SetQuantity(s)
	return quo
}

// AddRoomdetailIDs adds the roomdetails edge to Roomdetail by ids.
func (quo *QuantityUpdateOne) AddRoomdetailIDs(ids ...int) *QuantityUpdateOne {
	quo.mutation.AddRoomdetailIDs(ids...)
	return quo
}

// AddRoomdetails adds the roomdetails edges to Roomdetail.
func (quo *QuantityUpdateOne) AddRoomdetails(r ...*Roomdetail) *QuantityUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return quo.AddRoomdetailIDs(ids...)
}

// Mutation returns the QuantityMutation object of the builder.
func (quo *QuantityUpdateOne) Mutation() *QuantityMutation {
	return quo.mutation
}

// RemoveRoomdetailIDs removes the roomdetails edge to Roomdetail by ids.
func (quo *QuantityUpdateOne) RemoveRoomdetailIDs(ids ...int) *QuantityUpdateOne {
	quo.mutation.RemoveRoomdetailIDs(ids...)
	return quo
}

// RemoveRoomdetails removes roomdetails edges to Roomdetail.
func (quo *QuantityUpdateOne) RemoveRoomdetails(r ...*Roomdetail) *QuantityUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return quo.RemoveRoomdetailIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (quo *QuantityUpdateOne) Save(ctx context.Context) (*Quantity, error) {

	var (
		err  error
		node *Quantity
	)
	if len(quo.hooks) == 0 {
		node, err = quo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuantityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			quo.mutation = mutation
			node, err = quo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(quo.hooks) - 1; i >= 0; i-- {
			mut = quo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, quo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuantityUpdateOne) SaveX(ctx context.Context) *Quantity {
	q, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return q
}

// Exec executes the query on the entity.
func (quo *QuantityUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuantityUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (quo *QuantityUpdateOne) sqlSave(ctx context.Context) (q *Quantity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   quantity.Table,
			Columns: quantity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quantity.FieldID,
			},
		},
	}
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Quantity.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := quo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: quantity.FieldQuantity,
		})
	}
	if nodes := quo.mutation.RemovedRoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quantity.RoomdetailsTable,
			Columns: []string{quantity.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quantity.RoomdetailsTable,
			Columns: []string{quantity.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	q = &Quantity{config: quo.config}
	_spec.Assign = q.assignValues
	_spec.ScanValues = q.scanValues()
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quantity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return q, nil
}
