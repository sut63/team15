// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/quantity"
)

// Quantity is the model entity for the Quantity schema.
type Quantity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity string `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuantityQuery when eager-loading is set.
	Edges QuantityEdges `json:"edges"`
}

// QuantityEdges holds the relations/edges for other nodes in the graph.
type QuantityEdges struct {
	// Roomdetails holds the value of the roomdetails edge.
	Roomdetails []*Roomdetail
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoomdetailsOrErr returns the Roomdetails value or an error if the edge
// was not loaded in eager-loading.
func (e QuantityEdges) RoomdetailsOrErr() ([]*Roomdetail, error) {
	if e.loadedTypes[0] {
		return e.Roomdetails, nil
	}
	return nil, &NotLoadedError{edge: "roomdetails"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Quantity) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // quantity
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Quantity fields.
func (q *Quantity) assignValues(values ...interface{}) error {
	if m, n := len(values), len(quantity.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	q.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field quantity", values[0])
	} else if value.Valid {
		q.Quantity = value.String
	}
	return nil
}

// QueryRoomdetails queries the roomdetails edge of the Quantity.
func (q *Quantity) QueryRoomdetails() *RoomdetailQuery {
	return (&QuantityClient{config: q.config}).QueryRoomdetails(q)
}

// Update returns a builder for updating this Quantity.
// Note that, you need to call Quantity.Unwrap() before calling this method, if this Quantity
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Quantity) Update() *QuantityUpdateOne {
	return (&QuantityClient{config: q.config}).UpdateOne(q)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (q *Quantity) Unwrap() *Quantity {
	tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Quantity is not a transactional entity")
	}
	q.config.driver = tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Quantity) String() string {
	var builder strings.Builder
	builder.WriteString("Quantity(")
	builder.WriteString(fmt.Sprintf("id=%v", q.ID))
	builder.WriteString(", quantity=")
	builder.WriteString(q.Quantity)
	builder.WriteByte(')')
	return builder.String()
}

// Quantities is a parsable slice of Quantity.
type Quantities []*Quantity

func (q Quantities) config(cfg config) {
	for _i := range q {
		q[_i].config = cfg
	}
}
