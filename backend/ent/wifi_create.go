// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/lease"
	"github.com/team15/app/ent/wifi"
)

// WifiCreate is the builder for creating a Wifi entity.
type WifiCreate struct {
	config
	mutation *WifiMutation
	hooks    []Hook
}

// SetWifiname sets the wifiname field.
func (wc *WifiCreate) SetWifiname(s string) *WifiCreate {
	wc.mutation.SetWifiname(s)
	return wc
}

// AddWifiIDs adds the wifis edge to Lease by ids.
func (wc *WifiCreate) AddWifiIDs(ids ...int) *WifiCreate {
	wc.mutation.AddWifiIDs(ids...)
	return wc
}

// AddWifis adds the wifis edges to Lease.
func (wc *WifiCreate) AddWifis(l ...*Lease) *WifiCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wc.AddWifiIDs(ids...)
}

// Mutation returns the WifiMutation object of the builder.
func (wc *WifiCreate) Mutation() *WifiMutation {
	return wc.mutation
}

// Save creates the Wifi in the database.
func (wc *WifiCreate) Save(ctx context.Context) (*Wifi, error) {
	if _, ok := wc.mutation.Wifiname(); !ok {
		return nil, &ValidationError{Name: "wifiname", err: errors.New("ent: missing required field \"wifiname\"")}
	}
	if v, ok := wc.mutation.Wifiname(); ok {
		if err := wifi.WifinameValidator(v); err != nil {
			return nil, &ValidationError{Name: "wifiname", err: fmt.Errorf("ent: validator failed for field \"wifiname\": %w", err)}
		}
	}
	var (
		err  error
		node *Wifi
	)
	if len(wc.hooks) == 0 {
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WifiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wc.mutation = mutation
			node, err = wc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WifiCreate) SaveX(ctx context.Context) *Wifi {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wc *WifiCreate) sqlSave(ctx context.Context) (*Wifi, error) {
	w, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	w.ID = int(id)
	return w, nil
}

func (wc *WifiCreate) createSpec() (*Wifi, *sqlgraph.CreateSpec) {
	var (
		w     = &Wifi{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: wifi.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wifi.FieldID,
			},
		}
	)
	if value, ok := wc.mutation.Wifiname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wifi.FieldWifiname,
		})
		w.Wifiname = value
	}
	if nodes := wc.mutation.WifisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wifi.WifisTable,
			Columns: []string{wifi.WifisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return w, _spec
}
