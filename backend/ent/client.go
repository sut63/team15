// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/team15/app/ent/migrate"

	"github.com/team15/app/ent/cleanername"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/deposit"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/lengthtime"
	"github.com/team15/app/ent/statusd"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CleanerName is the client for interacting with the CleanerName builders.
	CleanerName *CleanerNameClient
	// CleaningRoom is the client for interacting with the CleaningRoom builders.
	CleaningRoom *CleaningRoomClient
	// Deposit is the client for interacting with the Deposit builders.
	Deposit *DepositClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// LengthTime is the client for interacting with the LengthTime builders.
	LengthTime *LengthTimeClient
	// Statusd is the client for interacting with the Statusd builders.
	Statusd *StatusdClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CleanerName = NewCleanerNameClient(c.config)
	c.CleaningRoom = NewCleaningRoomClient(c.config)
	c.Deposit = NewDepositClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.LengthTime = NewLengthTimeClient(c.config)
	c.Statusd = NewStatusdClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CleanerName:  NewCleanerNameClient(cfg),
		CleaningRoom: NewCleaningRoomClient(cfg),
		Deposit:      NewDepositClient(cfg),
		Employee:     NewEmployeeClient(cfg),
		LengthTime:   NewLengthTimeClient(cfg),
		Statusd:      NewStatusdClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:       cfg,
		CleanerName:  NewCleanerNameClient(cfg),
		CleaningRoom: NewCleaningRoomClient(cfg),
		Deposit:      NewDepositClient(cfg),
		Employee:     NewEmployeeClient(cfg),
		LengthTime:   NewLengthTimeClient(cfg),
		Statusd:      NewStatusdClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CleanerName.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CleanerName.Use(hooks...)
	c.CleaningRoom.Use(hooks...)
	c.Deposit.Use(hooks...)
	c.Employee.Use(hooks...)
	c.LengthTime.Use(hooks...)
	c.Statusd.Use(hooks...)
}

// CleanerNameClient is a client for the CleanerName schema.
type CleanerNameClient struct {
	config
}

// NewCleanerNameClient returns a client for the CleanerName from the given config.
func NewCleanerNameClient(c config) *CleanerNameClient {
	return &CleanerNameClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cleanername.Hooks(f(g(h())))`.
func (c *CleanerNameClient) Use(hooks ...Hook) {
	c.hooks.CleanerName = append(c.hooks.CleanerName, hooks...)
}

// Create returns a create builder for CleanerName.
func (c *CleanerNameClient) Create() *CleanerNameCreate {
	mutation := newCleanerNameMutation(c.config, OpCreate)
	return &CleanerNameCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CleanerName.
func (c *CleanerNameClient) Update() *CleanerNameUpdate {
	mutation := newCleanerNameMutation(c.config, OpUpdate)
	return &CleanerNameUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CleanerNameClient) UpdateOne(cn *CleanerName) *CleanerNameUpdateOne {
	mutation := newCleanerNameMutation(c.config, OpUpdateOne, withCleanerName(cn))
	return &CleanerNameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CleanerNameClient) UpdateOneID(id int) *CleanerNameUpdateOne {
	mutation := newCleanerNameMutation(c.config, OpUpdateOne, withCleanerNameID(id))
	return &CleanerNameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CleanerName.
func (c *CleanerNameClient) Delete() *CleanerNameDelete {
	mutation := newCleanerNameMutation(c.config, OpDelete)
	return &CleanerNameDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CleanerNameClient) DeleteOne(cn *CleanerName) *CleanerNameDeleteOne {
	return c.DeleteOneID(cn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CleanerNameClient) DeleteOneID(id int) *CleanerNameDeleteOne {
	builder := c.Delete().Where(cleanername.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CleanerNameDeleteOne{builder}
}

// Create returns a query builder for CleanerName.
func (c *CleanerNameClient) Query() *CleanerNameQuery {
	return &CleanerNameQuery{config: c.config}
}

// Get returns a CleanerName entity by its id.
func (c *CleanerNameClient) Get(ctx context.Context, id int) (*CleanerName, error) {
	return c.Query().Where(cleanername.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CleanerNameClient) GetX(ctx context.Context, id int) *CleanerName {
	cn, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cn
}

// QueryCleaningrooms queries the cleaningrooms edge of a CleanerName.
func (c *CleanerNameClient) QueryCleaningrooms(cn *CleanerName) *CleaningRoomQuery {
	query := &CleaningRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cleanername.Table, cleanername.FieldID, id),
			sqlgraph.To(cleaningroom.Table, cleaningroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cleanername.CleaningroomsTable, cleanername.CleaningroomsColumn),
		)
		fromV = sqlgraph.Neighbors(cn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CleanerNameClient) Hooks() []Hook {
	return c.hooks.CleanerName
}

// CleaningRoomClient is a client for the CleaningRoom schema.
type CleaningRoomClient struct {
	config
}

// NewCleaningRoomClient returns a client for the CleaningRoom from the given config.
func NewCleaningRoomClient(c config) *CleaningRoomClient {
	return &CleaningRoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cleaningroom.Hooks(f(g(h())))`.
func (c *CleaningRoomClient) Use(hooks ...Hook) {
	c.hooks.CleaningRoom = append(c.hooks.CleaningRoom, hooks...)
}

// Create returns a create builder for CleaningRoom.
func (c *CleaningRoomClient) Create() *CleaningRoomCreate {
	mutation := newCleaningRoomMutation(c.config, OpCreate)
	return &CleaningRoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CleaningRoom.
func (c *CleaningRoomClient) Update() *CleaningRoomUpdate {
	mutation := newCleaningRoomMutation(c.config, OpUpdate)
	return &CleaningRoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CleaningRoomClient) UpdateOne(cr *CleaningRoom) *CleaningRoomUpdateOne {
	mutation := newCleaningRoomMutation(c.config, OpUpdateOne, withCleaningRoom(cr))
	return &CleaningRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CleaningRoomClient) UpdateOneID(id int) *CleaningRoomUpdateOne {
	mutation := newCleaningRoomMutation(c.config, OpUpdateOne, withCleaningRoomID(id))
	return &CleaningRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CleaningRoom.
func (c *CleaningRoomClient) Delete() *CleaningRoomDelete {
	mutation := newCleaningRoomMutation(c.config, OpDelete)
	return &CleaningRoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CleaningRoomClient) DeleteOne(cr *CleaningRoom) *CleaningRoomDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CleaningRoomClient) DeleteOneID(id int) *CleaningRoomDeleteOne {
	builder := c.Delete().Where(cleaningroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CleaningRoomDeleteOne{builder}
}

// Create returns a query builder for CleaningRoom.
func (c *CleaningRoomClient) Query() *CleaningRoomQuery {
	return &CleaningRoomQuery{config: c.config}
}

// Get returns a CleaningRoom entity by its id.
func (c *CleaningRoomClient) Get(ctx context.Context, id int) (*CleaningRoom, error) {
	return c.Query().Where(cleaningroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CleaningRoomClient) GetX(ctx context.Context, id int) *CleaningRoom {
	cr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cr
}

// QueryCleanerName queries the CleanerName edge of a CleaningRoom.
func (c *CleaningRoomClient) QueryCleanerName(cr *CleaningRoom) *CleanerNameQuery {
	query := &CleanerNameQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cleaningroom.Table, cleaningroom.FieldID, id),
			sqlgraph.To(cleanername.Table, cleanername.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cleaningroom.CleanerNameTable, cleaningroom.CleanerNameColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLengthTime queries the LengthTime edge of a CleaningRoom.
func (c *CleaningRoomClient) QueryLengthTime(cr *CleaningRoom) *LengthTimeQuery {
	query := &LengthTimeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cleaningroom.Table, cleaningroom.FieldID, id),
			sqlgraph.To(lengthtime.Table, lengthtime.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cleaningroom.LengthTimeTable, cleaningroom.LengthTimeColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CleaningRoomClient) Hooks() []Hook {
	return c.hooks.CleaningRoom
}

// DepositClient is a client for the Deposit schema.
type DepositClient struct {
	config
}

// NewDepositClient returns a client for the Deposit from the given config.
func NewDepositClient(c config) *DepositClient {
	return &DepositClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deposit.Hooks(f(g(h())))`.
func (c *DepositClient) Use(hooks ...Hook) {
	c.hooks.Deposit = append(c.hooks.Deposit, hooks...)
}

// Create returns a create builder for Deposit.
func (c *DepositClient) Create() *DepositCreate {
	mutation := newDepositMutation(c.config, OpCreate)
	return &DepositCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Deposit.
func (c *DepositClient) Update() *DepositUpdate {
	mutation := newDepositMutation(c.config, OpUpdate)
	return &DepositUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepositClient) UpdateOne(d *Deposit) *DepositUpdateOne {
	mutation := newDepositMutation(c.config, OpUpdateOne, withDeposit(d))
	return &DepositUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepositClient) UpdateOneID(id int) *DepositUpdateOne {
	mutation := newDepositMutation(c.config, OpUpdateOne, withDepositID(id))
	return &DepositUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Deposit.
func (c *DepositClient) Delete() *DepositDelete {
	mutation := newDepositMutation(c.config, OpDelete)
	return &DepositDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DepositClient) DeleteOne(d *Deposit) *DepositDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DepositClient) DeleteOneID(id int) *DepositDeleteOne {
	builder := c.Delete().Where(deposit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepositDeleteOne{builder}
}

// Create returns a query builder for Deposit.
func (c *DepositClient) Query() *DepositQuery {
	return &DepositQuery{config: c.config}
}

// Get returns a Deposit entity by its id.
func (c *DepositClient) Get(ctx context.Context, id int) (*Deposit, error) {
	return c.Query().Where(deposit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepositClient) GetX(ctx context.Context, id int) *Deposit {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryEmployee queries the Employee edge of a Deposit.
func (c *DepositClient) QueryEmployee(d *Deposit) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deposit.Table, deposit.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deposit.EmployeeTable, deposit.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusd queries the Statusd edge of a Deposit.
func (c *DepositClient) QueryStatusd(d *Deposit) *StatusdQuery {
	query := &StatusdQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deposit.Table, deposit.FieldID, id),
			sqlgraph.To(statusd.Table, statusd.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deposit.StatusdTable, deposit.StatusdColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepositClient) Hooks() []Hook {
	return c.hooks.Deposit
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Create returns a create builder for Employee.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Create returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{config: c.config}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryEmployees queries the employees edge of a Employee.
func (c *EmployeeClient) QueryEmployees(e *Employee) *DepositQuery {
	query := &DepositQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(deposit.Table, deposit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.EmployeesTable, employee.EmployeesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// LengthTimeClient is a client for the LengthTime schema.
type LengthTimeClient struct {
	config
}

// NewLengthTimeClient returns a client for the LengthTime from the given config.
func NewLengthTimeClient(c config) *LengthTimeClient {
	return &LengthTimeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lengthtime.Hooks(f(g(h())))`.
func (c *LengthTimeClient) Use(hooks ...Hook) {
	c.hooks.LengthTime = append(c.hooks.LengthTime, hooks...)
}

// Create returns a create builder for LengthTime.
func (c *LengthTimeClient) Create() *LengthTimeCreate {
	mutation := newLengthTimeMutation(c.config, OpCreate)
	return &LengthTimeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for LengthTime.
func (c *LengthTimeClient) Update() *LengthTimeUpdate {
	mutation := newLengthTimeMutation(c.config, OpUpdate)
	return &LengthTimeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LengthTimeClient) UpdateOne(lt *LengthTime) *LengthTimeUpdateOne {
	mutation := newLengthTimeMutation(c.config, OpUpdateOne, withLengthTime(lt))
	return &LengthTimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LengthTimeClient) UpdateOneID(id int) *LengthTimeUpdateOne {
	mutation := newLengthTimeMutation(c.config, OpUpdateOne, withLengthTimeID(id))
	return &LengthTimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LengthTime.
func (c *LengthTimeClient) Delete() *LengthTimeDelete {
	mutation := newLengthTimeMutation(c.config, OpDelete)
	return &LengthTimeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LengthTimeClient) DeleteOne(lt *LengthTime) *LengthTimeDeleteOne {
	return c.DeleteOneID(lt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LengthTimeClient) DeleteOneID(id int) *LengthTimeDeleteOne {
	builder := c.Delete().Where(lengthtime.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LengthTimeDeleteOne{builder}
}

// Create returns a query builder for LengthTime.
func (c *LengthTimeClient) Query() *LengthTimeQuery {
	return &LengthTimeQuery{config: c.config}
}

// Get returns a LengthTime entity by its id.
func (c *LengthTimeClient) Get(ctx context.Context, id int) (*LengthTime, error) {
	return c.Query().Where(lengthtime.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LengthTimeClient) GetX(ctx context.Context, id int) *LengthTime {
	lt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return lt
}

// QueryCleaningrooms queries the cleaningrooms edge of a LengthTime.
func (c *LengthTimeClient) QueryCleaningrooms(lt *LengthTime) *CleaningRoomQuery {
	query := &CleaningRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lengthtime.Table, lengthtime.FieldID, id),
			sqlgraph.To(cleaningroom.Table, cleaningroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lengthtime.CleaningroomsTable, lengthtime.CleaningroomsColumn),
		)
		fromV = sqlgraph.Neighbors(lt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LengthTimeClient) Hooks() []Hook {
	return c.hooks.LengthTime
}

// StatusdClient is a client for the Statusd schema.
type StatusdClient struct {
	config
}

// NewStatusdClient returns a client for the Statusd from the given config.
func NewStatusdClient(c config) *StatusdClient {
	return &StatusdClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statusd.Hooks(f(g(h())))`.
func (c *StatusdClient) Use(hooks ...Hook) {
	c.hooks.Statusd = append(c.hooks.Statusd, hooks...)
}

// Create returns a create builder for Statusd.
func (c *StatusdClient) Create() *StatusdCreate {
	mutation := newStatusdMutation(c.config, OpCreate)
	return &StatusdCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Statusd.
func (c *StatusdClient) Update() *StatusdUpdate {
	mutation := newStatusdMutation(c.config, OpUpdate)
	return &StatusdUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusdClient) UpdateOne(s *Statusd) *StatusdUpdateOne {
	mutation := newStatusdMutation(c.config, OpUpdateOne, withStatusd(s))
	return &StatusdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusdClient) UpdateOneID(id int) *StatusdUpdateOne {
	mutation := newStatusdMutation(c.config, OpUpdateOne, withStatusdID(id))
	return &StatusdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Statusd.
func (c *StatusdClient) Delete() *StatusdDelete {
	mutation := newStatusdMutation(c.config, OpDelete)
	return &StatusdDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusdClient) DeleteOne(s *Statusd) *StatusdDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusdClient) DeleteOneID(id int) *StatusdDeleteOne {
	builder := c.Delete().Where(statusd.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusdDeleteOne{builder}
}

// Create returns a query builder for Statusd.
func (c *StatusdClient) Query() *StatusdQuery {
	return &StatusdQuery{config: c.config}
}

// Get returns a Statusd entity by its id.
func (c *StatusdClient) Get(ctx context.Context, id int) (*Statusd, error) {
	return c.Query().Where(statusd.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusdClient) GetX(ctx context.Context, id int) *Statusd {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryStatusds queries the statusds edge of a Statusd.
func (c *StatusdClient) QueryStatusds(s *Statusd) *DepositQuery {
	query := &DepositQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusd.Table, statusd.FieldID, id),
			sqlgraph.To(deposit.Table, deposit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusd.StatusdsTable, statusd.StatusdsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusdClient) Hooks() []Hook {
	return c.hooks.Statusd
}
