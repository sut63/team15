// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/team15/app/ent/migrate"

	"github.com/team15/app/ent/cleanername"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/deposit"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/equipment"
	"github.com/team15/app/ent/facilitie"
	"github.com/team15/app/ent/jobposition"
	"github.com/team15/app/ent/lease"
	"github.com/team15/app/ent/lengthtime"
	"github.com/team15/app/ent/nearbyplace"
	"github.com/team15/app/ent/quantity"
	"github.com/team15/app/ent/roomdetail"
	"github.com/team15/app/ent/statusd"
	"github.com/team15/app/ent/staytype"
	"github.com/team15/app/ent/wifi"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CleanerName is the client for interacting with the CleanerName builders.
	CleanerName *CleanerNameClient
	// CleaningRoom is the client for interacting with the CleaningRoom builders.
	CleaningRoom *CleaningRoomClient
	// Deposit is the client for interacting with the Deposit builders.
	Deposit *DepositClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Equipment is the client for interacting with the Equipment builders.
	Equipment *EquipmentClient
	// Facilitie is the client for interacting with the Facilitie builders.
	Facilitie *FacilitieClient
	// Jobposition is the client for interacting with the Jobposition builders.
	Jobposition *JobpositionClient
	// Lease is the client for interacting with the Lease builders.
	Lease *LeaseClient
	// LengthTime is the client for interacting with the LengthTime builders.
	LengthTime *LengthTimeClient
	// Nearbyplace is the client for interacting with the Nearbyplace builders.
	Nearbyplace *NearbyplaceClient
	// Quantity is the client for interacting with the Quantity builders.
	Quantity *QuantityClient
	// Roomdetail is the client for interacting with the Roomdetail builders.
	Roomdetail *RoomdetailClient
	// Statusd is the client for interacting with the Statusd builders.
	Statusd *StatusdClient
	// Staytype is the client for interacting with the Staytype builders.
	Staytype *StaytypeClient
	// Wifi is the client for interacting with the Wifi builders.
	Wifi *WifiClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CleanerName = NewCleanerNameClient(c.config)
	c.CleaningRoom = NewCleaningRoomClient(c.config)
	c.Deposit = NewDepositClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Equipment = NewEquipmentClient(c.config)
	c.Facilitie = NewFacilitieClient(c.config)
	c.Jobposition = NewJobpositionClient(c.config)
	c.Lease = NewLeaseClient(c.config)
	c.LengthTime = NewLengthTimeClient(c.config)
	c.Nearbyplace = NewNearbyplaceClient(c.config)
	c.Quantity = NewQuantityClient(c.config)
	c.Roomdetail = NewRoomdetailClient(c.config)
	c.Statusd = NewStatusdClient(c.config)
	c.Staytype = NewStaytypeClient(c.config)
	c.Wifi = NewWifiClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CleanerName:  NewCleanerNameClient(cfg),
		CleaningRoom: NewCleaningRoomClient(cfg),
		Deposit:      NewDepositClient(cfg),
		Employee:     NewEmployeeClient(cfg),
		Equipment:    NewEquipmentClient(cfg),
		Facilitie:    NewFacilitieClient(cfg),
		Jobposition:  NewJobpositionClient(cfg),
		Lease:        NewLeaseClient(cfg),
		LengthTime:   NewLengthTimeClient(cfg),
		Nearbyplace:  NewNearbyplaceClient(cfg),
		Quantity:     NewQuantityClient(cfg),
		Roomdetail:   NewRoomdetailClient(cfg),
		Statusd:      NewStatusdClient(cfg),
		Staytype:     NewStaytypeClient(cfg),
		Wifi:         NewWifiClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:       cfg,
		CleanerName:  NewCleanerNameClient(cfg),
		CleaningRoom: NewCleaningRoomClient(cfg),
		Deposit:      NewDepositClient(cfg),
		Employee:     NewEmployeeClient(cfg),
		Equipment:    NewEquipmentClient(cfg),
		Facilitie:    NewFacilitieClient(cfg),
		Jobposition:  NewJobpositionClient(cfg),
		Lease:        NewLeaseClient(cfg),
		LengthTime:   NewLengthTimeClient(cfg),
		Nearbyplace:  NewNearbyplaceClient(cfg),
		Quantity:     NewQuantityClient(cfg),
		Roomdetail:   NewRoomdetailClient(cfg),
		Statusd:      NewStatusdClient(cfg),
		Staytype:     NewStaytypeClient(cfg),
		Wifi:         NewWifiClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CleanerName.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CleanerName.Use(hooks...)
	c.CleaningRoom.Use(hooks...)
	c.Deposit.Use(hooks...)
	c.Employee.Use(hooks...)
	c.Equipment.Use(hooks...)
	c.Facilitie.Use(hooks...)
	c.Jobposition.Use(hooks...)
	c.Lease.Use(hooks...)
	c.LengthTime.Use(hooks...)
	c.Nearbyplace.Use(hooks...)
	c.Quantity.Use(hooks...)
	c.Roomdetail.Use(hooks...)
	c.Statusd.Use(hooks...)
	c.Staytype.Use(hooks...)
	c.Wifi.Use(hooks...)
}

// CleanerNameClient is a client for the CleanerName schema.
type CleanerNameClient struct {
	config
}

// NewCleanerNameClient returns a client for the CleanerName from the given config.
func NewCleanerNameClient(c config) *CleanerNameClient {
	return &CleanerNameClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cleanername.Hooks(f(g(h())))`.
func (c *CleanerNameClient) Use(hooks ...Hook) {
	c.hooks.CleanerName = append(c.hooks.CleanerName, hooks...)
}

// Create returns a create builder for CleanerName.
func (c *CleanerNameClient) Create() *CleanerNameCreate {
	mutation := newCleanerNameMutation(c.config, OpCreate)
	return &CleanerNameCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CleanerName.
func (c *CleanerNameClient) Update() *CleanerNameUpdate {
	mutation := newCleanerNameMutation(c.config, OpUpdate)
	return &CleanerNameUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CleanerNameClient) UpdateOne(cn *CleanerName) *CleanerNameUpdateOne {
	mutation := newCleanerNameMutation(c.config, OpUpdateOne, withCleanerName(cn))
	return &CleanerNameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CleanerNameClient) UpdateOneID(id int) *CleanerNameUpdateOne {
	mutation := newCleanerNameMutation(c.config, OpUpdateOne, withCleanerNameID(id))
	return &CleanerNameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CleanerName.
func (c *CleanerNameClient) Delete() *CleanerNameDelete {
	mutation := newCleanerNameMutation(c.config, OpDelete)
	return &CleanerNameDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CleanerNameClient) DeleteOne(cn *CleanerName) *CleanerNameDeleteOne {
	return c.DeleteOneID(cn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CleanerNameClient) DeleteOneID(id int) *CleanerNameDeleteOne {
	builder := c.Delete().Where(cleanername.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CleanerNameDeleteOne{builder}
}

// Create returns a query builder for CleanerName.
func (c *CleanerNameClient) Query() *CleanerNameQuery {
	return &CleanerNameQuery{config: c.config}
}

// Get returns a CleanerName entity by its id.
func (c *CleanerNameClient) Get(ctx context.Context, id int) (*CleanerName, error) {
	return c.Query().Where(cleanername.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CleanerNameClient) GetX(ctx context.Context, id int) *CleanerName {
	cn, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cn
}

// QueryCleaningrooms queries the cleaningrooms edge of a CleanerName.
func (c *CleanerNameClient) QueryCleaningrooms(cn *CleanerName) *CleaningRoomQuery {
	query := &CleaningRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cleanername.Table, cleanername.FieldID, id),
			sqlgraph.To(cleaningroom.Table, cleaningroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cleanername.CleaningroomsTable, cleanername.CleaningroomsColumn),
		)
		fromV = sqlgraph.Neighbors(cn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CleanerNameClient) Hooks() []Hook {
	return c.hooks.CleanerName
}

// CleaningRoomClient is a client for the CleaningRoom schema.
type CleaningRoomClient struct {
	config
}

// NewCleaningRoomClient returns a client for the CleaningRoom from the given config.
func NewCleaningRoomClient(c config) *CleaningRoomClient {
	return &CleaningRoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cleaningroom.Hooks(f(g(h())))`.
func (c *CleaningRoomClient) Use(hooks ...Hook) {
	c.hooks.CleaningRoom = append(c.hooks.CleaningRoom, hooks...)
}

// Create returns a create builder for CleaningRoom.
func (c *CleaningRoomClient) Create() *CleaningRoomCreate {
	mutation := newCleaningRoomMutation(c.config, OpCreate)
	return &CleaningRoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CleaningRoom.
func (c *CleaningRoomClient) Update() *CleaningRoomUpdate {
	mutation := newCleaningRoomMutation(c.config, OpUpdate)
	return &CleaningRoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CleaningRoomClient) UpdateOne(cr *CleaningRoom) *CleaningRoomUpdateOne {
	mutation := newCleaningRoomMutation(c.config, OpUpdateOne, withCleaningRoom(cr))
	return &CleaningRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CleaningRoomClient) UpdateOneID(id int) *CleaningRoomUpdateOne {
	mutation := newCleaningRoomMutation(c.config, OpUpdateOne, withCleaningRoomID(id))
	return &CleaningRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CleaningRoom.
func (c *CleaningRoomClient) Delete() *CleaningRoomDelete {
	mutation := newCleaningRoomMutation(c.config, OpDelete)
	return &CleaningRoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CleaningRoomClient) DeleteOne(cr *CleaningRoom) *CleaningRoomDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CleaningRoomClient) DeleteOneID(id int) *CleaningRoomDeleteOne {
	builder := c.Delete().Where(cleaningroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CleaningRoomDeleteOne{builder}
}

// Create returns a query builder for CleaningRoom.
func (c *CleaningRoomClient) Query() *CleaningRoomQuery {
	return &CleaningRoomQuery{config: c.config}
}

// Get returns a CleaningRoom entity by its id.
func (c *CleaningRoomClient) Get(ctx context.Context, id int) (*CleaningRoom, error) {
	return c.Query().Where(cleaningroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CleaningRoomClient) GetX(ctx context.Context, id int) *CleaningRoom {
	cr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cr
}

// QueryCleanerName queries the CleanerName edge of a CleaningRoom.
func (c *CleaningRoomClient) QueryCleanerName(cr *CleaningRoom) *CleanerNameQuery {
	query := &CleanerNameQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cleaningroom.Table, cleaningroom.FieldID, id),
			sqlgraph.To(cleanername.Table, cleanername.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cleaningroom.CleanerNameTable, cleaningroom.CleanerNameColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLengthTime queries the LengthTime edge of a CleaningRoom.
func (c *CleaningRoomClient) QueryLengthTime(cr *CleaningRoom) *LengthTimeQuery {
	query := &LengthTimeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cleaningroom.Table, cleaningroom.FieldID, id),
			sqlgraph.To(lengthtime.Table, lengthtime.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cleaningroom.LengthTimeTable, cleaningroom.LengthTimeColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CleaningRoomClient) Hooks() []Hook {
	return c.hooks.CleaningRoom
}

// DepositClient is a client for the Deposit schema.
type DepositClient struct {
	config
}

// NewDepositClient returns a client for the Deposit from the given config.
func NewDepositClient(c config) *DepositClient {
	return &DepositClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deposit.Hooks(f(g(h())))`.
func (c *DepositClient) Use(hooks ...Hook) {
	c.hooks.Deposit = append(c.hooks.Deposit, hooks...)
}

// Create returns a create builder for Deposit.
func (c *DepositClient) Create() *DepositCreate {
	mutation := newDepositMutation(c.config, OpCreate)
	return &DepositCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Deposit.
func (c *DepositClient) Update() *DepositUpdate {
	mutation := newDepositMutation(c.config, OpUpdate)
	return &DepositUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepositClient) UpdateOne(d *Deposit) *DepositUpdateOne {
	mutation := newDepositMutation(c.config, OpUpdateOne, withDeposit(d))
	return &DepositUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepositClient) UpdateOneID(id int) *DepositUpdateOne {
	mutation := newDepositMutation(c.config, OpUpdateOne, withDepositID(id))
	return &DepositUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Deposit.
func (c *DepositClient) Delete() *DepositDelete {
	mutation := newDepositMutation(c.config, OpDelete)
	return &DepositDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DepositClient) DeleteOne(d *Deposit) *DepositDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DepositClient) DeleteOneID(id int) *DepositDeleteOne {
	builder := c.Delete().Where(deposit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepositDeleteOne{builder}
}

// Create returns a query builder for Deposit.
func (c *DepositClient) Query() *DepositQuery {
	return &DepositQuery{config: c.config}
}

// Get returns a Deposit entity by its id.
func (c *DepositClient) Get(ctx context.Context, id int) (*Deposit, error) {
	return c.Query().Where(deposit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepositClient) GetX(ctx context.Context, id int) *Deposit {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryEmployee queries the Employee edge of a Deposit.
func (c *DepositClient) QueryEmployee(d *Deposit) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deposit.Table, deposit.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deposit.EmployeeTable, deposit.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusd queries the Statusd edge of a Deposit.
func (c *DepositClient) QueryStatusd(d *Deposit) *StatusdQuery {
	query := &StatusdQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deposit.Table, deposit.FieldID, id),
			sqlgraph.To(statusd.Table, statusd.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deposit.StatusdTable, deposit.StatusdColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepositClient) Hooks() []Hook {
	return c.hooks.Deposit
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Create returns a create builder for Employee.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Create returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{config: c.config}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryEmployees queries the employees edge of a Employee.
func (c *EmployeeClient) QueryEmployees(e *Employee) *DepositQuery {
	query := &DepositQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(deposit.Table, deposit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.EmployeesTable, employee.EmployeesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomdetails queries the roomdetails edge of a Employee.
func (c *EmployeeClient) QueryRoomdetails(e *Employee) *RoomdetailQuery {
	query := &RoomdetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(roomdetail.Table, roomdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.RoomdetailsTable, employee.RoomdetailsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobposition queries the jobposition edge of a Employee.
func (c *EmployeeClient) QueryJobposition(e *Employee) *JobpositionQuery {
	query := &JobpositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.JobpositionTable, employee.JobpositionColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// EquipmentClient is a client for the Equipment schema.
type EquipmentClient struct {
	config
}

// NewEquipmentClient returns a client for the Equipment from the given config.
func NewEquipmentClient(c config) *EquipmentClient {
	return &EquipmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipment.Hooks(f(g(h())))`.
func (c *EquipmentClient) Use(hooks ...Hook) {
	c.hooks.Equipment = append(c.hooks.Equipment, hooks...)
}

// Create returns a create builder for Equipment.
func (c *EquipmentClient) Create() *EquipmentCreate {
	mutation := newEquipmentMutation(c.config, OpCreate)
	return &EquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Equipment.
func (c *EquipmentClient) Update() *EquipmentUpdate {
	mutation := newEquipmentMutation(c.config, OpUpdate)
	return &EquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentClient) UpdateOne(e *Equipment) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipment(e))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentClient) UpdateOneID(id int) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipmentID(id))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Equipment.
func (c *EquipmentClient) Delete() *EquipmentDelete {
	mutation := newEquipmentMutation(c.config, OpDelete)
	return &EquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmentClient) DeleteOne(e *Equipment) *EquipmentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmentClient) DeleteOneID(id int) *EquipmentDeleteOne {
	builder := c.Delete().Where(equipment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentDeleteOne{builder}
}

// Create returns a query builder for Equipment.
func (c *EquipmentClient) Query() *EquipmentQuery {
	return &EquipmentQuery{config: c.config}
}

// Get returns a Equipment entity by its id.
func (c *EquipmentClient) Get(ctx context.Context, id int) (*Equipment, error) {
	return c.Query().Where(equipment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentClient) GetX(ctx context.Context, id int) *Equipment {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryRoomdetail queries the roomdetail edge of a Equipment.
func (c *EquipmentClient) QueryRoomdetail(e *Equipment) *RoomdetailQuery {
	query := &RoomdetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(roomdetail.Table, roomdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.RoomdetailTable, equipment.RoomdetailColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentClient) Hooks() []Hook {
	return c.hooks.Equipment
}

// FacilitieClient is a client for the Facilitie schema.
type FacilitieClient struct {
	config
}

// NewFacilitieClient returns a client for the Facilitie from the given config.
func NewFacilitieClient(c config) *FacilitieClient {
	return &FacilitieClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `facilitie.Hooks(f(g(h())))`.
func (c *FacilitieClient) Use(hooks ...Hook) {
	c.hooks.Facilitie = append(c.hooks.Facilitie, hooks...)
}

// Create returns a create builder for Facilitie.
func (c *FacilitieClient) Create() *FacilitieCreate {
	mutation := newFacilitieMutation(c.config, OpCreate)
	return &FacilitieCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Facilitie.
func (c *FacilitieClient) Update() *FacilitieUpdate {
	mutation := newFacilitieMutation(c.config, OpUpdate)
	return &FacilitieUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FacilitieClient) UpdateOne(f *Facilitie) *FacilitieUpdateOne {
	mutation := newFacilitieMutation(c.config, OpUpdateOne, withFacilitie(f))
	return &FacilitieUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FacilitieClient) UpdateOneID(id int) *FacilitieUpdateOne {
	mutation := newFacilitieMutation(c.config, OpUpdateOne, withFacilitieID(id))
	return &FacilitieUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Facilitie.
func (c *FacilitieClient) Delete() *FacilitieDelete {
	mutation := newFacilitieMutation(c.config, OpDelete)
	return &FacilitieDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FacilitieClient) DeleteOne(f *Facilitie) *FacilitieDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FacilitieClient) DeleteOneID(id int) *FacilitieDeleteOne {
	builder := c.Delete().Where(facilitie.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FacilitieDeleteOne{builder}
}

// Create returns a query builder for Facilitie.
func (c *FacilitieClient) Query() *FacilitieQuery {
	return &FacilitieQuery{config: c.config}
}

// Get returns a Facilitie entity by its id.
func (c *FacilitieClient) Get(ctx context.Context, id int) (*Facilitie, error) {
	return c.Query().Where(facilitie.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FacilitieClient) GetX(ctx context.Context, id int) *Facilitie {
	f, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return f
}

// QueryRoomdetail queries the roomdetail edge of a Facilitie.
func (c *FacilitieClient) QueryRoomdetail(f *Facilitie) *RoomdetailQuery {
	query := &RoomdetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(facilitie.Table, facilitie.FieldID, id),
			sqlgraph.To(roomdetail.Table, roomdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, facilitie.RoomdetailTable, facilitie.RoomdetailColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FacilitieClient) Hooks() []Hook {
	return c.hooks.Facilitie
}

// JobpositionClient is a client for the Jobposition schema.
type JobpositionClient struct {
	config
}

// NewJobpositionClient returns a client for the Jobposition from the given config.
func NewJobpositionClient(c config) *JobpositionClient {
	return &JobpositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobposition.Hooks(f(g(h())))`.
func (c *JobpositionClient) Use(hooks ...Hook) {
	c.hooks.Jobposition = append(c.hooks.Jobposition, hooks...)
}

// Create returns a create builder for Jobposition.
func (c *JobpositionClient) Create() *JobpositionCreate {
	mutation := newJobpositionMutation(c.config, OpCreate)
	return &JobpositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Jobposition.
func (c *JobpositionClient) Update() *JobpositionUpdate {
	mutation := newJobpositionMutation(c.config, OpUpdate)
	return &JobpositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobpositionClient) UpdateOne(j *Jobposition) *JobpositionUpdateOne {
	mutation := newJobpositionMutation(c.config, OpUpdateOne, withJobposition(j))
	return &JobpositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobpositionClient) UpdateOneID(id int) *JobpositionUpdateOne {
	mutation := newJobpositionMutation(c.config, OpUpdateOne, withJobpositionID(id))
	return &JobpositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Jobposition.
func (c *JobpositionClient) Delete() *JobpositionDelete {
	mutation := newJobpositionMutation(c.config, OpDelete)
	return &JobpositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *JobpositionClient) DeleteOne(j *Jobposition) *JobpositionDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *JobpositionClient) DeleteOneID(id int) *JobpositionDeleteOne {
	builder := c.Delete().Where(jobposition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobpositionDeleteOne{builder}
}

// Create returns a query builder for Jobposition.
func (c *JobpositionClient) Query() *JobpositionQuery {
	return &JobpositionQuery{config: c.config}
}

// Get returns a Jobposition entity by its id.
func (c *JobpositionClient) Get(ctx context.Context, id int) (*Jobposition, error) {
	return c.Query().Where(jobposition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobpositionClient) GetX(ctx context.Context, id int) *Jobposition {
	j, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return j
}

// QueryEmployees queries the employees edge of a Jobposition.
func (c *JobpositionClient) QueryEmployees(j *Jobposition) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.EmployeesTable, jobposition.EmployeesColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobpositionClient) Hooks() []Hook {
	return c.hooks.Jobposition
}

// LeaseClient is a client for the Lease schema.
type LeaseClient struct {
	config
}

// NewLeaseClient returns a client for the Lease from the given config.
func NewLeaseClient(c config) *LeaseClient {
	return &LeaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lease.Hooks(f(g(h())))`.
func (c *LeaseClient) Use(hooks ...Hook) {
	c.hooks.Lease = append(c.hooks.Lease, hooks...)
}

// Create returns a create builder for Lease.
func (c *LeaseClient) Create() *LeaseCreate {
	mutation := newLeaseMutation(c.config, OpCreate)
	return &LeaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Lease.
func (c *LeaseClient) Update() *LeaseUpdate {
	mutation := newLeaseMutation(c.config, OpUpdate)
	return &LeaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LeaseClient) UpdateOne(l *Lease) *LeaseUpdateOne {
	mutation := newLeaseMutation(c.config, OpUpdateOne, withLease(l))
	return &LeaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LeaseClient) UpdateOneID(id int) *LeaseUpdateOne {
	mutation := newLeaseMutation(c.config, OpUpdateOne, withLeaseID(id))
	return &LeaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Lease.
func (c *LeaseClient) Delete() *LeaseDelete {
	mutation := newLeaseMutation(c.config, OpDelete)
	return &LeaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LeaseClient) DeleteOne(l *Lease) *LeaseDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LeaseClient) DeleteOneID(id int) *LeaseDeleteOne {
	builder := c.Delete().Where(lease.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LeaseDeleteOne{builder}
}

// Create returns a query builder for Lease.
func (c *LeaseClient) Query() *LeaseQuery {
	return &LeaseQuery{config: c.config}
}

// Get returns a Lease entity by its id.
func (c *LeaseClient) Get(ctx context.Context, id int) (*Lease, error) {
	return c.Query().Where(lease.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LeaseClient) GetX(ctx context.Context, id int) *Lease {
	l, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return l
}

// QueryWifi queries the Wifi edge of a Lease.
func (c *LeaseClient) QueryWifi(l *Lease) *WifiQuery {
	query := &WifiQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lease.Table, lease.FieldID, id),
			sqlgraph.To(wifi.Table, wifi.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lease.WifiTable, lease.WifiColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomdetail queries the Roomdetail edge of a Lease.
func (c *LeaseClient) QueryRoomdetail(l *Lease) *RoomdetailQuery {
	query := &RoomdetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lease.Table, lease.FieldID, id),
			sqlgraph.To(roomdetail.Table, roomdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, lease.RoomdetailTable, lease.RoomdetailColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LeaseClient) Hooks() []Hook {
	return c.hooks.Lease
}

// LengthTimeClient is a client for the LengthTime schema.
type LengthTimeClient struct {
	config
}

// NewLengthTimeClient returns a client for the LengthTime from the given config.
func NewLengthTimeClient(c config) *LengthTimeClient {
	return &LengthTimeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lengthtime.Hooks(f(g(h())))`.
func (c *LengthTimeClient) Use(hooks ...Hook) {
	c.hooks.LengthTime = append(c.hooks.LengthTime, hooks...)
}

// Create returns a create builder for LengthTime.
func (c *LengthTimeClient) Create() *LengthTimeCreate {
	mutation := newLengthTimeMutation(c.config, OpCreate)
	return &LengthTimeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for LengthTime.
func (c *LengthTimeClient) Update() *LengthTimeUpdate {
	mutation := newLengthTimeMutation(c.config, OpUpdate)
	return &LengthTimeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LengthTimeClient) UpdateOne(lt *LengthTime) *LengthTimeUpdateOne {
	mutation := newLengthTimeMutation(c.config, OpUpdateOne, withLengthTime(lt))
	return &LengthTimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LengthTimeClient) UpdateOneID(id int) *LengthTimeUpdateOne {
	mutation := newLengthTimeMutation(c.config, OpUpdateOne, withLengthTimeID(id))
	return &LengthTimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LengthTime.
func (c *LengthTimeClient) Delete() *LengthTimeDelete {
	mutation := newLengthTimeMutation(c.config, OpDelete)
	return &LengthTimeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LengthTimeClient) DeleteOne(lt *LengthTime) *LengthTimeDeleteOne {
	return c.DeleteOneID(lt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LengthTimeClient) DeleteOneID(id int) *LengthTimeDeleteOne {
	builder := c.Delete().Where(lengthtime.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LengthTimeDeleteOne{builder}
}

// Create returns a query builder for LengthTime.
func (c *LengthTimeClient) Query() *LengthTimeQuery {
	return &LengthTimeQuery{config: c.config}
}

// Get returns a LengthTime entity by its id.
func (c *LengthTimeClient) Get(ctx context.Context, id int) (*LengthTime, error) {
	return c.Query().Where(lengthtime.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LengthTimeClient) GetX(ctx context.Context, id int) *LengthTime {
	lt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return lt
}

// QueryCleaningrooms queries the cleaningrooms edge of a LengthTime.
func (c *LengthTimeClient) QueryCleaningrooms(lt *LengthTime) *CleaningRoomQuery {
	query := &CleaningRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lengthtime.Table, lengthtime.FieldID, id),
			sqlgraph.To(cleaningroom.Table, cleaningroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lengthtime.CleaningroomsTable, lengthtime.CleaningroomsColumn),
		)
		fromV = sqlgraph.Neighbors(lt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LengthTimeClient) Hooks() []Hook {
	return c.hooks.LengthTime
}

// NearbyplaceClient is a client for the Nearbyplace schema.
type NearbyplaceClient struct {
	config
}

// NewNearbyplaceClient returns a client for the Nearbyplace from the given config.
func NewNearbyplaceClient(c config) *NearbyplaceClient {
	return &NearbyplaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nearbyplace.Hooks(f(g(h())))`.
func (c *NearbyplaceClient) Use(hooks ...Hook) {
	c.hooks.Nearbyplace = append(c.hooks.Nearbyplace, hooks...)
}

// Create returns a create builder for Nearbyplace.
func (c *NearbyplaceClient) Create() *NearbyplaceCreate {
	mutation := newNearbyplaceMutation(c.config, OpCreate)
	return &NearbyplaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Nearbyplace.
func (c *NearbyplaceClient) Update() *NearbyplaceUpdate {
	mutation := newNearbyplaceMutation(c.config, OpUpdate)
	return &NearbyplaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NearbyplaceClient) UpdateOne(n *Nearbyplace) *NearbyplaceUpdateOne {
	mutation := newNearbyplaceMutation(c.config, OpUpdateOne, withNearbyplace(n))
	return &NearbyplaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NearbyplaceClient) UpdateOneID(id int) *NearbyplaceUpdateOne {
	mutation := newNearbyplaceMutation(c.config, OpUpdateOne, withNearbyplaceID(id))
	return &NearbyplaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nearbyplace.
func (c *NearbyplaceClient) Delete() *NearbyplaceDelete {
	mutation := newNearbyplaceMutation(c.config, OpDelete)
	return &NearbyplaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NearbyplaceClient) DeleteOne(n *Nearbyplace) *NearbyplaceDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NearbyplaceClient) DeleteOneID(id int) *NearbyplaceDeleteOne {
	builder := c.Delete().Where(nearbyplace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NearbyplaceDeleteOne{builder}
}

// Create returns a query builder for Nearbyplace.
func (c *NearbyplaceClient) Query() *NearbyplaceQuery {
	return &NearbyplaceQuery{config: c.config}
}

// Get returns a Nearbyplace entity by its id.
func (c *NearbyplaceClient) Get(ctx context.Context, id int) (*Nearbyplace, error) {
	return c.Query().Where(nearbyplace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NearbyplaceClient) GetX(ctx context.Context, id int) *Nearbyplace {
	n, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return n
}

// QueryRoomdetail queries the roomdetail edge of a Nearbyplace.
func (c *NearbyplaceClient) QueryRoomdetail(n *Nearbyplace) *RoomdetailQuery {
	query := &RoomdetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nearbyplace.Table, nearbyplace.FieldID, id),
			sqlgraph.To(roomdetail.Table, roomdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nearbyplace.RoomdetailTable, nearbyplace.RoomdetailColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NearbyplaceClient) Hooks() []Hook {
	return c.hooks.Nearbyplace
}

// QuantityClient is a client for the Quantity schema.
type QuantityClient struct {
	config
}

// NewQuantityClient returns a client for the Quantity from the given config.
func NewQuantityClient(c config) *QuantityClient {
	return &QuantityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `quantity.Hooks(f(g(h())))`.
func (c *QuantityClient) Use(hooks ...Hook) {
	c.hooks.Quantity = append(c.hooks.Quantity, hooks...)
}

// Create returns a create builder for Quantity.
func (c *QuantityClient) Create() *QuantityCreate {
	mutation := newQuantityMutation(c.config, OpCreate)
	return &QuantityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Quantity.
func (c *QuantityClient) Update() *QuantityUpdate {
	mutation := newQuantityMutation(c.config, OpUpdate)
	return &QuantityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuantityClient) UpdateOne(q *Quantity) *QuantityUpdateOne {
	mutation := newQuantityMutation(c.config, OpUpdateOne, withQuantity(q))
	return &QuantityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuantityClient) UpdateOneID(id int) *QuantityUpdateOne {
	mutation := newQuantityMutation(c.config, OpUpdateOne, withQuantityID(id))
	return &QuantityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Quantity.
func (c *QuantityClient) Delete() *QuantityDelete {
	mutation := newQuantityMutation(c.config, OpDelete)
	return &QuantityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *QuantityClient) DeleteOne(q *Quantity) *QuantityDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *QuantityClient) DeleteOneID(id int) *QuantityDeleteOne {
	builder := c.Delete().Where(quantity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuantityDeleteOne{builder}
}

// Create returns a query builder for Quantity.
func (c *QuantityClient) Query() *QuantityQuery {
	return &QuantityQuery{config: c.config}
}

// Get returns a Quantity entity by its id.
func (c *QuantityClient) Get(ctx context.Context, id int) (*Quantity, error) {
	return c.Query().Where(quantity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuantityClient) GetX(ctx context.Context, id int) *Quantity {
	q, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return q
}

// QueryRoomdetails queries the roomdetails edge of a Quantity.
func (c *QuantityClient) QueryRoomdetails(q *Quantity) *RoomdetailQuery {
	query := &RoomdetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(quantity.Table, quantity.FieldID, id),
			sqlgraph.To(roomdetail.Table, roomdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, quantity.RoomdetailsTable, quantity.RoomdetailsColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuantityClient) Hooks() []Hook {
	return c.hooks.Quantity
}

// RoomdetailClient is a client for the Roomdetail schema.
type RoomdetailClient struct {
	config
}

// NewRoomdetailClient returns a client for the Roomdetail from the given config.
func NewRoomdetailClient(c config) *RoomdetailClient {
	return &RoomdetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomdetail.Hooks(f(g(h())))`.
func (c *RoomdetailClient) Use(hooks ...Hook) {
	c.hooks.Roomdetail = append(c.hooks.Roomdetail, hooks...)
}

// Create returns a create builder for Roomdetail.
func (c *RoomdetailClient) Create() *RoomdetailCreate {
	mutation := newRoomdetailMutation(c.config, OpCreate)
	return &RoomdetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Roomdetail.
func (c *RoomdetailClient) Update() *RoomdetailUpdate {
	mutation := newRoomdetailMutation(c.config, OpUpdate)
	return &RoomdetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomdetailClient) UpdateOne(r *Roomdetail) *RoomdetailUpdateOne {
	mutation := newRoomdetailMutation(c.config, OpUpdateOne, withRoomdetail(r))
	return &RoomdetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomdetailClient) UpdateOneID(id int) *RoomdetailUpdateOne {
	mutation := newRoomdetailMutation(c.config, OpUpdateOne, withRoomdetailID(id))
	return &RoomdetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Roomdetail.
func (c *RoomdetailClient) Delete() *RoomdetailDelete {
	mutation := newRoomdetailMutation(c.config, OpDelete)
	return &RoomdetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomdetailClient) DeleteOne(r *Roomdetail) *RoomdetailDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomdetailClient) DeleteOneID(id int) *RoomdetailDeleteOne {
	builder := c.Delete().Where(roomdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomdetailDeleteOne{builder}
}

// Create returns a query builder for Roomdetail.
func (c *RoomdetailClient) Query() *RoomdetailQuery {
	return &RoomdetailQuery{config: c.config}
}

// Get returns a Roomdetail entity by its id.
func (c *RoomdetailClient) Get(ctx context.Context, id int) (*Roomdetail, error) {
	return c.Query().Where(roomdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomdetailClient) GetX(ctx context.Context, id int) *Roomdetail {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryEquipments queries the equipments edge of a Roomdetail.
func (c *RoomdetailClient) QueryEquipments(r *Roomdetail) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomdetail.Table, roomdetail.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roomdetail.EquipmentsTable, roomdetail.EquipmentsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFacilities queries the facilities edge of a Roomdetail.
func (c *RoomdetailClient) QueryFacilities(r *Roomdetail) *FacilitieQuery {
	query := &FacilitieQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomdetail.Table, roomdetail.FieldID, id),
			sqlgraph.To(facilitie.Table, facilitie.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roomdetail.FacilitiesTable, roomdetail.FacilitiesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNearbyplaces queries the nearbyplaces edge of a Roomdetail.
func (c *RoomdetailClient) QueryNearbyplaces(r *Roomdetail) *NearbyplaceQuery {
	query := &NearbyplaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomdetail.Table, roomdetail.FieldID, id),
			sqlgraph.To(nearbyplace.Table, nearbyplace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roomdetail.NearbyplacesTable, roomdetail.NearbyplacesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Roomdetail.
func (c *RoomdetailClient) QueryEmployee(r *Roomdetail) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomdetail.Table, roomdetail.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roomdetail.EmployeeTable, roomdetail.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuantity queries the quantity edge of a Roomdetail.
func (c *RoomdetailClient) QueryQuantity(r *Roomdetail) *QuantityQuery {
	query := &QuantityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomdetail.Table, roomdetail.FieldID, id),
			sqlgraph.To(quantity.Table, quantity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roomdetail.QuantityTable, roomdetail.QuantityColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStaytype queries the staytype edge of a Roomdetail.
func (c *RoomdetailClient) QueryStaytype(r *Roomdetail) *StaytypeQuery {
	query := &StaytypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomdetail.Table, roomdetail.FieldID, id),
			sqlgraph.To(staytype.Table, staytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roomdetail.StaytypeTable, roomdetail.StaytypeColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomdetails queries the roomdetails edge of a Roomdetail.
func (c *RoomdetailClient) QueryRoomdetails(r *Roomdetail) *LeaseQuery {
	query := &LeaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomdetail.Table, roomdetail.FieldID, id),
			sqlgraph.To(lease.Table, lease.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, roomdetail.RoomdetailsTable, roomdetail.RoomdetailsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomdetailClient) Hooks() []Hook {
	return c.hooks.Roomdetail
}

// StatusdClient is a client for the Statusd schema.
type StatusdClient struct {
	config
}

// NewStatusdClient returns a client for the Statusd from the given config.
func NewStatusdClient(c config) *StatusdClient {
	return &StatusdClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statusd.Hooks(f(g(h())))`.
func (c *StatusdClient) Use(hooks ...Hook) {
	c.hooks.Statusd = append(c.hooks.Statusd, hooks...)
}

// Create returns a create builder for Statusd.
func (c *StatusdClient) Create() *StatusdCreate {
	mutation := newStatusdMutation(c.config, OpCreate)
	return &StatusdCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Statusd.
func (c *StatusdClient) Update() *StatusdUpdate {
	mutation := newStatusdMutation(c.config, OpUpdate)
	return &StatusdUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusdClient) UpdateOne(s *Statusd) *StatusdUpdateOne {
	mutation := newStatusdMutation(c.config, OpUpdateOne, withStatusd(s))
	return &StatusdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusdClient) UpdateOneID(id int) *StatusdUpdateOne {
	mutation := newStatusdMutation(c.config, OpUpdateOne, withStatusdID(id))
	return &StatusdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Statusd.
func (c *StatusdClient) Delete() *StatusdDelete {
	mutation := newStatusdMutation(c.config, OpDelete)
	return &StatusdDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusdClient) DeleteOne(s *Statusd) *StatusdDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusdClient) DeleteOneID(id int) *StatusdDeleteOne {
	builder := c.Delete().Where(statusd.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusdDeleteOne{builder}
}

// Create returns a query builder for Statusd.
func (c *StatusdClient) Query() *StatusdQuery {
	return &StatusdQuery{config: c.config}
}

// Get returns a Statusd entity by its id.
func (c *StatusdClient) Get(ctx context.Context, id int) (*Statusd, error) {
	return c.Query().Where(statusd.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusdClient) GetX(ctx context.Context, id int) *Statusd {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryStatusds queries the statusds edge of a Statusd.
func (c *StatusdClient) QueryStatusds(s *Statusd) *DepositQuery {
	query := &DepositQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusd.Table, statusd.FieldID, id),
			sqlgraph.To(deposit.Table, deposit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusd.StatusdsTable, statusd.StatusdsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusdClient) Hooks() []Hook {
	return c.hooks.Statusd
}

// StaytypeClient is a client for the Staytype schema.
type StaytypeClient struct {
	config
}

// NewStaytypeClient returns a client for the Staytype from the given config.
func NewStaytypeClient(c config) *StaytypeClient {
	return &StaytypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `staytype.Hooks(f(g(h())))`.
func (c *StaytypeClient) Use(hooks ...Hook) {
	c.hooks.Staytype = append(c.hooks.Staytype, hooks...)
}

// Create returns a create builder for Staytype.
func (c *StaytypeClient) Create() *StaytypeCreate {
	mutation := newStaytypeMutation(c.config, OpCreate)
	return &StaytypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Staytype.
func (c *StaytypeClient) Update() *StaytypeUpdate {
	mutation := newStaytypeMutation(c.config, OpUpdate)
	return &StaytypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StaytypeClient) UpdateOne(s *Staytype) *StaytypeUpdateOne {
	mutation := newStaytypeMutation(c.config, OpUpdateOne, withStaytype(s))
	return &StaytypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StaytypeClient) UpdateOneID(id int) *StaytypeUpdateOne {
	mutation := newStaytypeMutation(c.config, OpUpdateOne, withStaytypeID(id))
	return &StaytypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Staytype.
func (c *StaytypeClient) Delete() *StaytypeDelete {
	mutation := newStaytypeMutation(c.config, OpDelete)
	return &StaytypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StaytypeClient) DeleteOne(s *Staytype) *StaytypeDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StaytypeClient) DeleteOneID(id int) *StaytypeDeleteOne {
	builder := c.Delete().Where(staytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StaytypeDeleteOne{builder}
}

// Create returns a query builder for Staytype.
func (c *StaytypeClient) Query() *StaytypeQuery {
	return &StaytypeQuery{config: c.config}
}

// Get returns a Staytype entity by its id.
func (c *StaytypeClient) Get(ctx context.Context, id int) (*Staytype, error) {
	return c.Query().Where(staytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StaytypeClient) GetX(ctx context.Context, id int) *Staytype {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryRoomdetails queries the roomdetails edge of a Staytype.
func (c *StaytypeClient) QueryRoomdetails(s *Staytype) *RoomdetailQuery {
	query := &RoomdetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(staytype.Table, staytype.FieldID, id),
			sqlgraph.To(roomdetail.Table, roomdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, staytype.RoomdetailsTable, staytype.RoomdetailsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StaytypeClient) Hooks() []Hook {
	return c.hooks.Staytype
}

// WifiClient is a client for the Wifi schema.
type WifiClient struct {
	config
}

// NewWifiClient returns a client for the Wifi from the given config.
func NewWifiClient(c config) *WifiClient {
	return &WifiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wifi.Hooks(f(g(h())))`.
func (c *WifiClient) Use(hooks ...Hook) {
	c.hooks.Wifi = append(c.hooks.Wifi, hooks...)
}

// Create returns a create builder for Wifi.
func (c *WifiClient) Create() *WifiCreate {
	mutation := newWifiMutation(c.config, OpCreate)
	return &WifiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Wifi.
func (c *WifiClient) Update() *WifiUpdate {
	mutation := newWifiMutation(c.config, OpUpdate)
	return &WifiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WifiClient) UpdateOne(w *Wifi) *WifiUpdateOne {
	mutation := newWifiMutation(c.config, OpUpdateOne, withWifi(w))
	return &WifiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WifiClient) UpdateOneID(id int) *WifiUpdateOne {
	mutation := newWifiMutation(c.config, OpUpdateOne, withWifiID(id))
	return &WifiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Wifi.
func (c *WifiClient) Delete() *WifiDelete {
	mutation := newWifiMutation(c.config, OpDelete)
	return &WifiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WifiClient) DeleteOne(w *Wifi) *WifiDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WifiClient) DeleteOneID(id int) *WifiDeleteOne {
	builder := c.Delete().Where(wifi.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WifiDeleteOne{builder}
}

// Create returns a query builder for Wifi.
func (c *WifiClient) Query() *WifiQuery {
	return &WifiQuery{config: c.config}
}

// Get returns a Wifi entity by its id.
func (c *WifiClient) Get(ctx context.Context, id int) (*Wifi, error) {
	return c.Query().Where(wifi.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WifiClient) GetX(ctx context.Context, id int) *Wifi {
	w, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return w
}

// QueryWifis queries the wifis edge of a Wifi.
func (c *WifiClient) QueryWifis(w *Wifi) *LeaseQuery {
	query := &LeaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(wifi.Table, wifi.FieldID, id),
			sqlgraph.To(lease.Table, lease.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, wifi.WifisTable, wifi.WifisColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WifiClient) Hooks() []Hook {
	return c.hooks.Wifi
}
