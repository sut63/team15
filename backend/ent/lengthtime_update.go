// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/lengthtime"
	"github.com/team15/app/ent/predicate"
)

// LengthtimeUpdate is the builder for updating Lengthtime entities.
type LengthtimeUpdate struct {
	config
	hooks      []Hook
	mutation   *LengthtimeMutation
	predicates []predicate.Lengthtime
}

// Where adds a new predicate for the builder.
func (lu *LengthtimeUpdate) Where(ps ...predicate.Lengthtime) *LengthtimeUpdate {
	lu.predicates = append(lu.predicates, ps...)
	return lu
}

// SetLengthtime sets the lengthtime field.
func (lu *LengthtimeUpdate) SetLengthtime(s string) *LengthtimeUpdate {
	lu.mutation.SetLengthtime(s)
	return lu
}

// AddCleaningroomIDs adds the cleaningrooms edge to Cleaningroom by ids.
func (lu *LengthtimeUpdate) AddCleaningroomIDs(ids ...int) *LengthtimeUpdate {
	lu.mutation.AddCleaningroomIDs(ids...)
	return lu
}

// AddCleaningrooms adds the cleaningrooms edges to Cleaningroom.
func (lu *LengthtimeUpdate) AddCleaningrooms(c ...*Cleaningroom) *LengthtimeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.AddCleaningroomIDs(ids...)
}

// Mutation returns the LengthtimeMutation object of the builder.
func (lu *LengthtimeUpdate) Mutation() *LengthtimeMutation {
	return lu.mutation
}

// RemoveCleaningroomIDs removes the cleaningrooms edge to Cleaningroom by ids.
func (lu *LengthtimeUpdate) RemoveCleaningroomIDs(ids ...int) *LengthtimeUpdate {
	lu.mutation.RemoveCleaningroomIDs(ids...)
	return lu
}

// RemoveCleaningrooms removes cleaningrooms edges to Cleaningroom.
func (lu *LengthtimeUpdate) RemoveCleaningrooms(c ...*Cleaningroom) *LengthtimeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.RemoveCleaningroomIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (lu *LengthtimeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := lu.mutation.Lengthtime(); ok {
		if err := lengthtime.LengthtimeValidator(v); err != nil {
			return 0, &ValidationError{Name: "lengthtime", err: fmt.Errorf("ent: validator failed for field \"lengthtime\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LengthtimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LengthtimeUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LengthtimeUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LengthtimeUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LengthtimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lengthtime.Table,
			Columns: lengthtime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lengthtime.FieldID,
			},
		},
	}
	if ps := lu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Lengthtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lengthtime.FieldLengthtime,
		})
	}
	if nodes := lu.mutation.RemovedCleaningroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lengthtime.CleaningroomsTable,
			Columns: []string{lengthtime.CleaningroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleaningroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.CleaningroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lengthtime.CleaningroomsTable,
			Columns: []string{lengthtime.CleaningroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleaningroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lengthtime.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LengthtimeUpdateOne is the builder for updating a single Lengthtime entity.
type LengthtimeUpdateOne struct {
	config
	hooks    []Hook
	mutation *LengthtimeMutation
}

// SetLengthtime sets the lengthtime field.
func (luo *LengthtimeUpdateOne) SetLengthtime(s string) *LengthtimeUpdateOne {
	luo.mutation.SetLengthtime(s)
	return luo
}

// AddCleaningroomIDs adds the cleaningrooms edge to Cleaningroom by ids.
func (luo *LengthtimeUpdateOne) AddCleaningroomIDs(ids ...int) *LengthtimeUpdateOne {
	luo.mutation.AddCleaningroomIDs(ids...)
	return luo
}

// AddCleaningrooms adds the cleaningrooms edges to Cleaningroom.
func (luo *LengthtimeUpdateOne) AddCleaningrooms(c ...*Cleaningroom) *LengthtimeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.AddCleaningroomIDs(ids...)
}

// Mutation returns the LengthtimeMutation object of the builder.
func (luo *LengthtimeUpdateOne) Mutation() *LengthtimeMutation {
	return luo.mutation
}

// RemoveCleaningroomIDs removes the cleaningrooms edge to Cleaningroom by ids.
func (luo *LengthtimeUpdateOne) RemoveCleaningroomIDs(ids ...int) *LengthtimeUpdateOne {
	luo.mutation.RemoveCleaningroomIDs(ids...)
	return luo
}

// RemoveCleaningrooms removes cleaningrooms edges to Cleaningroom.
func (luo *LengthtimeUpdateOne) RemoveCleaningrooms(c ...*Cleaningroom) *LengthtimeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.RemoveCleaningroomIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (luo *LengthtimeUpdateOne) Save(ctx context.Context) (*Lengthtime, error) {
	if v, ok := luo.mutation.Lengthtime(); ok {
		if err := lengthtime.LengthtimeValidator(v); err != nil {
			return nil, &ValidationError{Name: "lengthtime", err: fmt.Errorf("ent: validator failed for field \"lengthtime\": %w", err)}
		}
	}

	var (
		err  error
		node *Lengthtime
	)
	if len(luo.hooks) == 0 {
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LengthtimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LengthtimeUpdateOne) SaveX(ctx context.Context) *Lengthtime {
	l, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return l
}

// Exec executes the query on the entity.
func (luo *LengthtimeUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LengthtimeUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LengthtimeUpdateOne) sqlSave(ctx context.Context) (l *Lengthtime, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lengthtime.Table,
			Columns: lengthtime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lengthtime.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Lengthtime.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := luo.mutation.Lengthtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lengthtime.FieldLengthtime,
		})
	}
	if nodes := luo.mutation.RemovedCleaningroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lengthtime.CleaningroomsTable,
			Columns: []string{lengthtime.CleaningroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleaningroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.CleaningroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lengthtime.CleaningroomsTable,
			Columns: []string{lengthtime.CleaningroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleaningroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	l = &Lengthtime{config: luo.config}
	_spec.Assign = l.assignValues
	_spec.ScanValues = l.scanValues()
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lengthtime.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return l, nil
}
