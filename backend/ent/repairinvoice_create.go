// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/rentalstatus"
	"github.com/team15/app/ent/repairinvoice"
)

// RepairinvoiceCreate is the builder for creating a Repairinvoice entity.
type RepairinvoiceCreate struct {
	config
	mutation *RepairinvoiceMutation
	hooks    []Hook
}

// SetBequipment sets the bequipment field.
func (rc *RepairinvoiceCreate) SetBequipment(s string) *RepairinvoiceCreate {
	rc.mutation.SetBequipment(s)
	return rc
}

// SetEmployeeID sets the employee edge to Employee by id.
func (rc *RepairinvoiceCreate) SetEmployeeID(id int) *RepairinvoiceCreate {
	rc.mutation.SetEmployeeID(id)
	return rc
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (rc *RepairinvoiceCreate) SetNillableEmployeeID(id *int) *RepairinvoiceCreate {
	if id != nil {
		rc = rc.SetEmployeeID(*id)
	}
	return rc
}

// SetEmployee sets the employee edge to Employee.
func (rc *RepairinvoiceCreate) SetEmployee(e *Employee) *RepairinvoiceCreate {
	return rc.SetEmployeeID(e.ID)
}

// SetRentalstatusID sets the Rentalstatus edge to Rentalstatus by id.
func (rc *RepairinvoiceCreate) SetRentalstatusID(id int) *RepairinvoiceCreate {
	rc.mutation.SetRentalstatusID(id)
	return rc
}

// SetNillableRentalstatusID sets the Rentalstatus edge to Rentalstatus by id if the given value is not nil.
func (rc *RepairinvoiceCreate) SetNillableRentalstatusID(id *int) *RepairinvoiceCreate {
	if id != nil {
		rc = rc.SetRentalstatusID(*id)
	}
	return rc
}

// SetRentalstatus sets the Rentalstatus edge to Rentalstatus.
func (rc *RepairinvoiceCreate) SetRentalstatus(r *Rentalstatus) *RepairinvoiceCreate {
	return rc.SetRentalstatusID(r.ID)
}

// Mutation returns the RepairinvoiceMutation object of the builder.
func (rc *RepairinvoiceCreate) Mutation() *RepairinvoiceMutation {
	return rc.mutation
}

// Save creates the Repairinvoice in the database.
func (rc *RepairinvoiceCreate) Save(ctx context.Context) (*Repairinvoice, error) {
	if _, ok := rc.mutation.Bequipment(); !ok {
		return nil, &ValidationError{Name: "bequipment", err: errors.New("ent: missing required field \"bequipment\"")}
	}
	var (
		err  error
		node *Repairinvoice
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepairinvoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RepairinvoiceCreate) SaveX(ctx context.Context) *Repairinvoice {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RepairinvoiceCreate) sqlSave(ctx context.Context) (*Repairinvoice, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RepairinvoiceCreate) createSpec() (*Repairinvoice, *sqlgraph.CreateSpec) {
	var (
		r     = &Repairinvoice{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: repairinvoice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repairinvoice.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Bequipment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repairinvoice.FieldBequipment,
		})
		r.Bequipment = value
	}
	if nodes := rc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.EmployeeTable,
			Columns: []string{repairinvoice.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RentalstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.RentalstatusTable,
			Columns: []string{repairinvoice.RentalstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rentalstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
