// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/room"
	"github.com/team15/app/ent/staytype"
)

// StayTypeUpdate is the builder for updating StayType entities.
type StayTypeUpdate struct {
	config
	hooks      []Hook
	mutation   *StayTypeMutation
	predicates []predicate.StayType
}

// Where adds a new predicate for the builder.
func (stu *StayTypeUpdate) Where(ps ...predicate.StayType) *StayTypeUpdate {
	stu.predicates = append(stu.predicates, ps...)
	return stu
}

// SetStaytype sets the staytype field.
func (stu *StayTypeUpdate) SetStaytype(s string) *StayTypeUpdate {
	stu.mutation.SetStaytype(s)
	return stu
}

// AddRoomIDs adds the room edge to Room by ids.
func (stu *StayTypeUpdate) AddRoomIDs(ids ...int) *StayTypeUpdate {
	stu.mutation.AddRoomIDs(ids...)
	return stu
}

// AddRoom adds the room edges to Room.
func (stu *StayTypeUpdate) AddRoom(r ...*Room) *StayTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return stu.AddRoomIDs(ids...)
}

// Mutation returns the StayTypeMutation object of the builder.
func (stu *StayTypeUpdate) Mutation() *StayTypeMutation {
	return stu.mutation
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (stu *StayTypeUpdate) RemoveRoomIDs(ids ...int) *StayTypeUpdate {
	stu.mutation.RemoveRoomIDs(ids...)
	return stu
}

// RemoveRoom removes room edges to Room.
func (stu *StayTypeUpdate) RemoveRoom(r ...*Room) *StayTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return stu.RemoveRoomIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (stu *StayTypeUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(stu.hooks) == 0 {
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StayTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *StayTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *StayTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *StayTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *StayTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   staytype.Table,
			Columns: staytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: staytype.FieldID,
			},
		},
	}
	if ps := stu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Staytype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staytype.FieldStaytype,
		})
	}
	if nodes := stu.mutation.RemovedRoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   staytype.RoomTable,
			Columns: []string{staytype.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   staytype.RoomTable,
			Columns: []string{staytype.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StayTypeUpdateOne is the builder for updating a single StayType entity.
type StayTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *StayTypeMutation
}

// SetStaytype sets the staytype field.
func (stuo *StayTypeUpdateOne) SetStaytype(s string) *StayTypeUpdateOne {
	stuo.mutation.SetStaytype(s)
	return stuo
}

// AddRoomIDs adds the room edge to Room by ids.
func (stuo *StayTypeUpdateOne) AddRoomIDs(ids ...int) *StayTypeUpdateOne {
	stuo.mutation.AddRoomIDs(ids...)
	return stuo
}

// AddRoom adds the room edges to Room.
func (stuo *StayTypeUpdateOne) AddRoom(r ...*Room) *StayTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return stuo.AddRoomIDs(ids...)
}

// Mutation returns the StayTypeMutation object of the builder.
func (stuo *StayTypeUpdateOne) Mutation() *StayTypeMutation {
	return stuo.mutation
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (stuo *StayTypeUpdateOne) RemoveRoomIDs(ids ...int) *StayTypeUpdateOne {
	stuo.mutation.RemoveRoomIDs(ids...)
	return stuo
}

// RemoveRoom removes room edges to Room.
func (stuo *StayTypeUpdateOne) RemoveRoom(r ...*Room) *StayTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return stuo.RemoveRoomIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (stuo *StayTypeUpdateOne) Save(ctx context.Context) (*StayType, error) {

	var (
		err  error
		node *StayType
	)
	if len(stuo.hooks) == 0 {
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StayTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *StayTypeUpdateOne) SaveX(ctx context.Context) *StayType {
	st, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return st
}

// Exec executes the query on the entity.
func (stuo *StayTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *StayTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *StayTypeUpdateOne) sqlSave(ctx context.Context) (st *StayType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   staytype.Table,
			Columns: staytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: staytype.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing StayType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := stuo.mutation.Staytype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staytype.FieldStaytype,
		})
	}
	if nodes := stuo.mutation.RemovedRoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   staytype.RoomTable,
			Columns: []string{staytype.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   staytype.RoomTable,
			Columns: []string{staytype.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	st = &StayType{config: stuo.config}
	_spec.Assign = st.assignValues
	_spec.ScanValues = st.scanValues()
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return st, nil
}
