// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/lease"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/rentalstatus"
	"github.com/team15/app/ent/repairinvoice"
)

// RepairinvoiceUpdate is the builder for updating Repairinvoice entities.
type RepairinvoiceUpdate struct {
	config
	hooks      []Hook
	mutation   *RepairinvoiceMutation
	predicates []predicate.Repairinvoice
}

// Where adds a new predicate for the builder.
func (ru *RepairinvoiceUpdate) Where(ps ...predicate.Repairinvoice) *RepairinvoiceUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetBequipment sets the bequipment field.
func (ru *RepairinvoiceUpdate) SetBequipment(s string) *RepairinvoiceUpdate {
	ru.mutation.SetBequipment(s)
	return ru
}

// SetEmtell sets the emtell field.
func (ru *RepairinvoiceUpdate) SetEmtell(s string) *RepairinvoiceUpdate {
	ru.mutation.SetEmtell(s)
	return ru
}

// SetNum sets the num field.
func (ru *RepairinvoiceUpdate) SetNum(i int) *RepairinvoiceUpdate {
	ru.mutation.ResetNum()
	ru.mutation.SetNum(i)
	return ru
}

// AddNum adds i to num.
func (ru *RepairinvoiceUpdate) AddNum(i int) *RepairinvoiceUpdate {
	ru.mutation.AddNum(i)
	return ru
}

// SetEmployeeID sets the employee edge to Employee by id.
func (ru *RepairinvoiceUpdate) SetEmployeeID(id int) *RepairinvoiceUpdate {
	ru.mutation.SetEmployeeID(id)
	return ru
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (ru *RepairinvoiceUpdate) SetNillableEmployeeID(id *int) *RepairinvoiceUpdate {
	if id != nil {
		ru = ru.SetEmployeeID(*id)
	}
	return ru
}

// SetEmployee sets the employee edge to Employee.
func (ru *RepairinvoiceUpdate) SetEmployee(e *Employee) *RepairinvoiceUpdate {
	return ru.SetEmployeeID(e.ID)
}

// SetRentalstatusID sets the Rentalstatus edge to Rentalstatus by id.
func (ru *RepairinvoiceUpdate) SetRentalstatusID(id int) *RepairinvoiceUpdate {
	ru.mutation.SetRentalstatusID(id)
	return ru
}

// SetNillableRentalstatusID sets the Rentalstatus edge to Rentalstatus by id if the given value is not nil.
func (ru *RepairinvoiceUpdate) SetNillableRentalstatusID(id *int) *RepairinvoiceUpdate {
	if id != nil {
		ru = ru.SetRentalstatusID(*id)
	}
	return ru
}

// SetRentalstatus sets the Rentalstatus edge to Rentalstatus.
func (ru *RepairinvoiceUpdate) SetRentalstatus(r *Rentalstatus) *RepairinvoiceUpdate {
	return ru.SetRentalstatusID(r.ID)
}

// SetLeaseID sets the Lease edge to Lease by id.
func (ru *RepairinvoiceUpdate) SetLeaseID(id int) *RepairinvoiceUpdate {
	ru.mutation.SetLeaseID(id)
	return ru
}

// SetNillableLeaseID sets the Lease edge to Lease by id if the given value is not nil.
func (ru *RepairinvoiceUpdate) SetNillableLeaseID(id *int) *RepairinvoiceUpdate {
	if id != nil {
		ru = ru.SetLeaseID(*id)
	}
	return ru
}

// SetLease sets the Lease edge to Lease.
func (ru *RepairinvoiceUpdate) SetLease(l *Lease) *RepairinvoiceUpdate {
	return ru.SetLeaseID(l.ID)
}

// Mutation returns the RepairinvoiceMutation object of the builder.
func (ru *RepairinvoiceUpdate) Mutation() *RepairinvoiceMutation {
	return ru.mutation
}

// ClearEmployee clears the employee edge to Employee.
func (ru *RepairinvoiceUpdate) ClearEmployee() *RepairinvoiceUpdate {
	ru.mutation.ClearEmployee()
	return ru
}

// ClearRentalstatus clears the Rentalstatus edge to Rentalstatus.
func (ru *RepairinvoiceUpdate) ClearRentalstatus() *RepairinvoiceUpdate {
	ru.mutation.ClearRentalstatus()
	return ru
}

// ClearLease clears the Lease edge to Lease.
func (ru *RepairinvoiceUpdate) ClearLease() *RepairinvoiceUpdate {
	ru.mutation.ClearLease()
	return ru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RepairinvoiceUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ru.mutation.Bequipment(); ok {
		if err := repairinvoice.BequipmentValidator(v); err != nil {
			return 0, &ValidationError{Name: "bequipment", err: fmt.Errorf("ent: validator failed for field \"bequipment\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Emtell(); ok {
		if err := repairinvoice.EmtellValidator(v); err != nil {
			return 0, &ValidationError{Name: "emtell", err: fmt.Errorf("ent: validator failed for field \"emtell\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Num(); ok {
		if err := repairinvoice.NumValidator(v); err != nil {
			return 0, &ValidationError{Name: "num", err: fmt.Errorf("ent: validator failed for field \"num\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepairinvoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RepairinvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RepairinvoiceUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RepairinvoiceUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RepairinvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   repairinvoice.Table,
			Columns: repairinvoice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repairinvoice.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Bequipment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repairinvoice.FieldBequipment,
		})
	}
	if value, ok := ru.mutation.Emtell(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repairinvoice.FieldEmtell,
		})
	}
	if value, ok := ru.mutation.Num(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: repairinvoice.FieldNum,
		})
	}
	if value, ok := ru.mutation.AddedNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: repairinvoice.FieldNum,
		})
	}
	if ru.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.EmployeeTable,
			Columns: []string{repairinvoice.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.EmployeeTable,
			Columns: []string{repairinvoice.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RentalstatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.RentalstatusTable,
			Columns: []string{repairinvoice.RentalstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rentalstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RentalstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.RentalstatusTable,
			Columns: []string{repairinvoice.RentalstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rentalstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.LeaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.LeaseTable,
			Columns: []string{repairinvoice.LeaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.LeaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.LeaseTable,
			Columns: []string{repairinvoice.LeaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repairinvoice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RepairinvoiceUpdateOne is the builder for updating a single Repairinvoice entity.
type RepairinvoiceUpdateOne struct {
	config
	hooks    []Hook
	mutation *RepairinvoiceMutation
}

// SetBequipment sets the bequipment field.
func (ruo *RepairinvoiceUpdateOne) SetBequipment(s string) *RepairinvoiceUpdateOne {
	ruo.mutation.SetBequipment(s)
	return ruo
}

// SetEmtell sets the emtell field.
func (ruo *RepairinvoiceUpdateOne) SetEmtell(s string) *RepairinvoiceUpdateOne {
	ruo.mutation.SetEmtell(s)
	return ruo
}

// SetNum sets the num field.
func (ruo *RepairinvoiceUpdateOne) SetNum(i int) *RepairinvoiceUpdateOne {
	ruo.mutation.ResetNum()
	ruo.mutation.SetNum(i)
	return ruo
}

// AddNum adds i to num.
func (ruo *RepairinvoiceUpdateOne) AddNum(i int) *RepairinvoiceUpdateOne {
	ruo.mutation.AddNum(i)
	return ruo
}

// SetEmployeeID sets the employee edge to Employee by id.
func (ruo *RepairinvoiceUpdateOne) SetEmployeeID(id int) *RepairinvoiceUpdateOne {
	ruo.mutation.SetEmployeeID(id)
	return ruo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (ruo *RepairinvoiceUpdateOne) SetNillableEmployeeID(id *int) *RepairinvoiceUpdateOne {
	if id != nil {
		ruo = ruo.SetEmployeeID(*id)
	}
	return ruo
}

// SetEmployee sets the employee edge to Employee.
func (ruo *RepairinvoiceUpdateOne) SetEmployee(e *Employee) *RepairinvoiceUpdateOne {
	return ruo.SetEmployeeID(e.ID)
}

// SetRentalstatusID sets the Rentalstatus edge to Rentalstatus by id.
func (ruo *RepairinvoiceUpdateOne) SetRentalstatusID(id int) *RepairinvoiceUpdateOne {
	ruo.mutation.SetRentalstatusID(id)
	return ruo
}

// SetNillableRentalstatusID sets the Rentalstatus edge to Rentalstatus by id if the given value is not nil.
func (ruo *RepairinvoiceUpdateOne) SetNillableRentalstatusID(id *int) *RepairinvoiceUpdateOne {
	if id != nil {
		ruo = ruo.SetRentalstatusID(*id)
	}
	return ruo
}

// SetRentalstatus sets the Rentalstatus edge to Rentalstatus.
func (ruo *RepairinvoiceUpdateOne) SetRentalstatus(r *Rentalstatus) *RepairinvoiceUpdateOne {
	return ruo.SetRentalstatusID(r.ID)
}

// SetLeaseID sets the Lease edge to Lease by id.
func (ruo *RepairinvoiceUpdateOne) SetLeaseID(id int) *RepairinvoiceUpdateOne {
	ruo.mutation.SetLeaseID(id)
	return ruo
}

// SetNillableLeaseID sets the Lease edge to Lease by id if the given value is not nil.
func (ruo *RepairinvoiceUpdateOne) SetNillableLeaseID(id *int) *RepairinvoiceUpdateOne {
	if id != nil {
		ruo = ruo.SetLeaseID(*id)
	}
	return ruo
}

// SetLease sets the Lease edge to Lease.
func (ruo *RepairinvoiceUpdateOne) SetLease(l *Lease) *RepairinvoiceUpdateOne {
	return ruo.SetLeaseID(l.ID)
}

// Mutation returns the RepairinvoiceMutation object of the builder.
func (ruo *RepairinvoiceUpdateOne) Mutation() *RepairinvoiceMutation {
	return ruo.mutation
}

// ClearEmployee clears the employee edge to Employee.
func (ruo *RepairinvoiceUpdateOne) ClearEmployee() *RepairinvoiceUpdateOne {
	ruo.mutation.ClearEmployee()
	return ruo
}

// ClearRentalstatus clears the Rentalstatus edge to Rentalstatus.
func (ruo *RepairinvoiceUpdateOne) ClearRentalstatus() *RepairinvoiceUpdateOne {
	ruo.mutation.ClearRentalstatus()
	return ruo
}

// ClearLease clears the Lease edge to Lease.
func (ruo *RepairinvoiceUpdateOne) ClearLease() *RepairinvoiceUpdateOne {
	ruo.mutation.ClearLease()
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *RepairinvoiceUpdateOne) Save(ctx context.Context) (*Repairinvoice, error) {
	if v, ok := ruo.mutation.Bequipment(); ok {
		if err := repairinvoice.BequipmentValidator(v); err != nil {
			return nil, &ValidationError{Name: "bequipment", err: fmt.Errorf("ent: validator failed for field \"bequipment\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Emtell(); ok {
		if err := repairinvoice.EmtellValidator(v); err != nil {
			return nil, &ValidationError{Name: "emtell", err: fmt.Errorf("ent: validator failed for field \"emtell\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Num(); ok {
		if err := repairinvoice.NumValidator(v); err != nil {
			return nil, &ValidationError{Name: "num", err: fmt.Errorf("ent: validator failed for field \"num\": %w", err)}
		}
	}

	var (
		err  error
		node *Repairinvoice
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepairinvoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RepairinvoiceUpdateOne) SaveX(ctx context.Context) *Repairinvoice {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RepairinvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RepairinvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RepairinvoiceUpdateOne) sqlSave(ctx context.Context) (r *Repairinvoice, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   repairinvoice.Table,
			Columns: repairinvoice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repairinvoice.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Repairinvoice.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Bequipment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repairinvoice.FieldBequipment,
		})
	}
	if value, ok := ruo.mutation.Emtell(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: repairinvoice.FieldEmtell,
		})
	}
	if value, ok := ruo.mutation.Num(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: repairinvoice.FieldNum,
		})
	}
	if value, ok := ruo.mutation.AddedNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: repairinvoice.FieldNum,
		})
	}
	if ruo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.EmployeeTable,
			Columns: []string{repairinvoice.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.EmployeeTable,
			Columns: []string{repairinvoice.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RentalstatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.RentalstatusTable,
			Columns: []string{repairinvoice.RentalstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rentalstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RentalstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.RentalstatusTable,
			Columns: []string{repairinvoice.RentalstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rentalstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.LeaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.LeaseTable,
			Columns: []string{repairinvoice.LeaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.LeaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repairinvoice.LeaseTable,
			Columns: []string{repairinvoice.LeaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Repairinvoice{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repairinvoice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
