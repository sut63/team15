// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/equipment"
	"github.com/team15/app/ent/facility"
	"github.com/team15/app/ent/nearbyplace"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/quantity"
	"github.com/team15/app/ent/room"
	"github.com/team15/app/ent/staytype"
)

// RoomUpdate is the builder for updating Room entities.
type RoomUpdate struct {
	config
	hooks      []Hook
	mutation   *RoomMutation
	predicates []predicate.Room
}

// Where adds a new predicate for the builder.
func (ru *RoomUpdate) Where(ps ...predicate.Room) *RoomUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetRoomprice sets the roomprice field.
func (ru *RoomUpdate) SetRoomprice(i int) *RoomUpdate {
	ru.mutation.ResetRoomprice()
	ru.mutation.SetRoomprice(i)
	return ru
}

// AddRoomprice adds i to roomprice.
func (ru *RoomUpdate) AddRoomprice(i int) *RoomUpdate {
	ru.mutation.AddRoomprice(i)
	return ru
}

// SetRoomtypename sets the roomtypename field.
func (ru *RoomUpdate) SetRoomtypename(s string) *RoomUpdate {
	ru.mutation.SetRoomtypename(s)
	return ru
}

// SetQuantityID sets the quantity edge to Quantity by id.
func (ru *RoomUpdate) SetQuantityID(id int) *RoomUpdate {
	ru.mutation.SetQuantityID(id)
	return ru
}

// SetNillableQuantityID sets the quantity edge to Quantity by id if the given value is not nil.
func (ru *RoomUpdate) SetNillableQuantityID(id *int) *RoomUpdate {
	if id != nil {
		ru = ru.SetQuantityID(*id)
	}
	return ru
}

// SetQuantity sets the quantity edge to Quantity.
func (ru *RoomUpdate) SetQuantity(q *Quantity) *RoomUpdate {
	return ru.SetQuantityID(q.ID)
}

// SetStaytypeID sets the staytype edge to StayType by id.
func (ru *RoomUpdate) SetStaytypeID(id int) *RoomUpdate {
	ru.mutation.SetStaytypeID(id)
	return ru
}

// SetNillableStaytypeID sets the staytype edge to StayType by id if the given value is not nil.
func (ru *RoomUpdate) SetNillableStaytypeID(id *int) *RoomUpdate {
	if id != nil {
		ru = ru.SetStaytypeID(*id)
	}
	return ru
}

// SetStaytype sets the staytype edge to StayType.
func (ru *RoomUpdate) SetStaytype(s *StayType) *RoomUpdate {
	return ru.SetStaytypeID(s.ID)
}

// AddFacilityIDs adds the facilities edge to Facility by ids.
func (ru *RoomUpdate) AddFacilityIDs(ids ...int) *RoomUpdate {
	ru.mutation.AddFacilityIDs(ids...)
	return ru
}

// AddFacilities adds the facilities edges to Facility.
func (ru *RoomUpdate) AddFacilities(f ...*Facility) *RoomUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ru.AddFacilityIDs(ids...)
}

// AddEquipmentIDs adds the equipments edge to Equipment by ids.
func (ru *RoomUpdate) AddEquipmentIDs(ids ...int) *RoomUpdate {
	ru.mutation.AddEquipmentIDs(ids...)
	return ru
}

// AddEquipments adds the equipments edges to Equipment.
func (ru *RoomUpdate) AddEquipments(e ...*Equipment) *RoomUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.AddEquipmentIDs(ids...)
}

// AddNearbyplaceIDs adds the nearbyplace edge to NearbyPlace by ids.
func (ru *RoomUpdate) AddNearbyplaceIDs(ids ...int) *RoomUpdate {
	ru.mutation.AddNearbyplaceIDs(ids...)
	return ru
}

// AddNearbyplace adds the nearbyplace edges to NearbyPlace.
func (ru *RoomUpdate) AddNearbyplace(n ...*NearbyPlace) *RoomUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ru.AddNearbyplaceIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ru *RoomUpdate) Mutation() *RoomMutation {
	return ru.mutation
}

// ClearQuantity clears the quantity edge to Quantity.
func (ru *RoomUpdate) ClearQuantity() *RoomUpdate {
	ru.mutation.ClearQuantity()
	return ru
}

// ClearStaytype clears the staytype edge to StayType.
func (ru *RoomUpdate) ClearStaytype() *RoomUpdate {
	ru.mutation.ClearStaytype()
	return ru
}

// RemoveFacilityIDs removes the facilities edge to Facility by ids.
func (ru *RoomUpdate) RemoveFacilityIDs(ids ...int) *RoomUpdate {
	ru.mutation.RemoveFacilityIDs(ids...)
	return ru
}

// RemoveFacilities removes facilities edges to Facility.
func (ru *RoomUpdate) RemoveFacilities(f ...*Facility) *RoomUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ru.RemoveFacilityIDs(ids...)
}

// RemoveEquipmentIDs removes the equipments edge to Equipment by ids.
func (ru *RoomUpdate) RemoveEquipmentIDs(ids ...int) *RoomUpdate {
	ru.mutation.RemoveEquipmentIDs(ids...)
	return ru
}

// RemoveEquipments removes equipments edges to Equipment.
func (ru *RoomUpdate) RemoveEquipments(e ...*Equipment) *RoomUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.RemoveEquipmentIDs(ids...)
}

// RemoveNearbyplaceIDs removes the nearbyplace edge to NearbyPlace by ids.
func (ru *RoomUpdate) RemoveNearbyplaceIDs(ids ...int) *RoomUpdate {
	ru.mutation.RemoveNearbyplaceIDs(ids...)
	return ru
}

// RemoveNearbyplace removes nearbyplace edges to NearbyPlace.
func (ru *RoomUpdate) RemoveNearbyplace(n ...*NearbyPlace) *RoomUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ru.RemoveNearbyplaceIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RoomUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ru.mutation.Roomprice(); ok {
		if err := room.RoompriceValidator(v); err != nil {
			return 0, &ValidationError{Name: "roomprice", err: fmt.Errorf("ent: validator failed for field \"roomprice\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   room.Table,
			Columns: room.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: room.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Roomprice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: room.FieldRoomprice,
		})
	}
	if value, ok := ru.mutation.AddedRoomprice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: room.FieldRoomprice,
		})
	}
	if value, ok := ru.mutation.Roomtypename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: room.FieldRoomtypename,
		})
	}
	if ru.mutation.QuantityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.QuantityTable,
			Columns: []string{room.QuantityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quantity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.QuantityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.QuantityTable,
			Columns: []string{room.QuantityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quantity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.StaytypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.StaytypeTable,
			Columns: []string{room.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StaytypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.StaytypeTable,
			Columns: []string{room.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ru.mutation.RemovedFacilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.FacilitiesTable,
			Columns: room.FacilitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facility.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.FacilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.FacilitiesTable,
			Columns: room.FacilitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facility.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ru.mutation.RemovedEquipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.EquipmentsTable,
			Columns: room.EquipmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EquipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.EquipmentsTable,
			Columns: room.EquipmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ru.mutation.RemovedNearbyplaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.NearbyplaceTable,
			Columns: room.NearbyplacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nearbyplace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.NearbyplaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.NearbyplaceTable,
			Columns: room.NearbyplacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nearbyplace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RoomUpdateOne is the builder for updating a single Room entity.
type RoomUpdateOne struct {
	config
	hooks    []Hook
	mutation *RoomMutation
}

// SetRoomprice sets the roomprice field.
func (ruo *RoomUpdateOne) SetRoomprice(i int) *RoomUpdateOne {
	ruo.mutation.ResetRoomprice()
	ruo.mutation.SetRoomprice(i)
	return ruo
}

// AddRoomprice adds i to roomprice.
func (ruo *RoomUpdateOne) AddRoomprice(i int) *RoomUpdateOne {
	ruo.mutation.AddRoomprice(i)
	return ruo
}

// SetRoomtypename sets the roomtypename field.
func (ruo *RoomUpdateOne) SetRoomtypename(s string) *RoomUpdateOne {
	ruo.mutation.SetRoomtypename(s)
	return ruo
}

// SetQuantityID sets the quantity edge to Quantity by id.
func (ruo *RoomUpdateOne) SetQuantityID(id int) *RoomUpdateOne {
	ruo.mutation.SetQuantityID(id)
	return ruo
}

// SetNillableQuantityID sets the quantity edge to Quantity by id if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableQuantityID(id *int) *RoomUpdateOne {
	if id != nil {
		ruo = ruo.SetQuantityID(*id)
	}
	return ruo
}

// SetQuantity sets the quantity edge to Quantity.
func (ruo *RoomUpdateOne) SetQuantity(q *Quantity) *RoomUpdateOne {
	return ruo.SetQuantityID(q.ID)
}

// SetStaytypeID sets the staytype edge to StayType by id.
func (ruo *RoomUpdateOne) SetStaytypeID(id int) *RoomUpdateOne {
	ruo.mutation.SetStaytypeID(id)
	return ruo
}

// SetNillableStaytypeID sets the staytype edge to StayType by id if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableStaytypeID(id *int) *RoomUpdateOne {
	if id != nil {
		ruo = ruo.SetStaytypeID(*id)
	}
	return ruo
}

// SetStaytype sets the staytype edge to StayType.
func (ruo *RoomUpdateOne) SetStaytype(s *StayType) *RoomUpdateOne {
	return ruo.SetStaytypeID(s.ID)
}

// AddFacilityIDs adds the facilities edge to Facility by ids.
func (ruo *RoomUpdateOne) AddFacilityIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.AddFacilityIDs(ids...)
	return ruo
}

// AddFacilities adds the facilities edges to Facility.
func (ruo *RoomUpdateOne) AddFacilities(f ...*Facility) *RoomUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ruo.AddFacilityIDs(ids...)
}

// AddEquipmentIDs adds the equipments edge to Equipment by ids.
func (ruo *RoomUpdateOne) AddEquipmentIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.AddEquipmentIDs(ids...)
	return ruo
}

// AddEquipments adds the equipments edges to Equipment.
func (ruo *RoomUpdateOne) AddEquipments(e ...*Equipment) *RoomUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.AddEquipmentIDs(ids...)
}

// AddNearbyplaceIDs adds the nearbyplace edge to NearbyPlace by ids.
func (ruo *RoomUpdateOne) AddNearbyplaceIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.AddNearbyplaceIDs(ids...)
	return ruo
}

// AddNearbyplace adds the nearbyplace edges to NearbyPlace.
func (ruo *RoomUpdateOne) AddNearbyplace(n ...*NearbyPlace) *RoomUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ruo.AddNearbyplaceIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ruo *RoomUpdateOne) Mutation() *RoomMutation {
	return ruo.mutation
}

// ClearQuantity clears the quantity edge to Quantity.
func (ruo *RoomUpdateOne) ClearQuantity() *RoomUpdateOne {
	ruo.mutation.ClearQuantity()
	return ruo
}

// ClearStaytype clears the staytype edge to StayType.
func (ruo *RoomUpdateOne) ClearStaytype() *RoomUpdateOne {
	ruo.mutation.ClearStaytype()
	return ruo
}

// RemoveFacilityIDs removes the facilities edge to Facility by ids.
func (ruo *RoomUpdateOne) RemoveFacilityIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.RemoveFacilityIDs(ids...)
	return ruo
}

// RemoveFacilities removes facilities edges to Facility.
func (ruo *RoomUpdateOne) RemoveFacilities(f ...*Facility) *RoomUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ruo.RemoveFacilityIDs(ids...)
}

// RemoveEquipmentIDs removes the equipments edge to Equipment by ids.
func (ruo *RoomUpdateOne) RemoveEquipmentIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.RemoveEquipmentIDs(ids...)
	return ruo
}

// RemoveEquipments removes equipments edges to Equipment.
func (ruo *RoomUpdateOne) RemoveEquipments(e ...*Equipment) *RoomUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.RemoveEquipmentIDs(ids...)
}

// RemoveNearbyplaceIDs removes the nearbyplace edge to NearbyPlace by ids.
func (ruo *RoomUpdateOne) RemoveNearbyplaceIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.RemoveNearbyplaceIDs(ids...)
	return ruo
}

// RemoveNearbyplace removes nearbyplace edges to NearbyPlace.
func (ruo *RoomUpdateOne) RemoveNearbyplace(n ...*NearbyPlace) *RoomUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ruo.RemoveNearbyplaceIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *RoomUpdateOne) Save(ctx context.Context) (*Room, error) {
	if v, ok := ruo.mutation.Roomprice(); ok {
		if err := room.RoompriceValidator(v); err != nil {
			return nil, &ValidationError{Name: "roomprice", err: fmt.Errorf("ent: validator failed for field \"roomprice\": %w", err)}
		}
	}

	var (
		err  error
		node *Room
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomUpdateOne) SaveX(ctx context.Context) *Room {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RoomUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoomUpdateOne) sqlSave(ctx context.Context) (r *Room, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   room.Table,
			Columns: room.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: room.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Room.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Roomprice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: room.FieldRoomprice,
		})
	}
	if value, ok := ruo.mutation.AddedRoomprice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: room.FieldRoomprice,
		})
	}
	if value, ok := ruo.mutation.Roomtypename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: room.FieldRoomtypename,
		})
	}
	if ruo.mutation.QuantityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.QuantityTable,
			Columns: []string{room.QuantityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quantity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.QuantityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.QuantityTable,
			Columns: []string{room.QuantityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quantity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.StaytypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.StaytypeTable,
			Columns: []string{room.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StaytypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   room.StaytypeTable,
			Columns: []string{room.StaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ruo.mutation.RemovedFacilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.FacilitiesTable,
			Columns: room.FacilitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facility.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.FacilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.FacilitiesTable,
			Columns: room.FacilitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: facility.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ruo.mutation.RemovedEquipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.EquipmentsTable,
			Columns: room.EquipmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EquipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.EquipmentsTable,
			Columns: room.EquipmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ruo.mutation.RemovedNearbyplaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.NearbyplaceTable,
			Columns: room.NearbyplacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nearbyplace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.NearbyplaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.NearbyplaceTable,
			Columns: room.NearbyplacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nearbyplace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Room{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
