// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/nearbyplace"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/room"
)

// NearbyPlaceQuery is the builder for querying NearbyPlace entities.
type NearbyPlaceQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.NearbyPlace
	// eager-loading edges.
	withRoom *RoomQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (npq *NearbyPlaceQuery) Where(ps ...predicate.NearbyPlace) *NearbyPlaceQuery {
	npq.predicates = append(npq.predicates, ps...)
	return npq
}

// Limit adds a limit step to the query.
func (npq *NearbyPlaceQuery) Limit(limit int) *NearbyPlaceQuery {
	npq.limit = &limit
	return npq
}

// Offset adds an offset step to the query.
func (npq *NearbyPlaceQuery) Offset(offset int) *NearbyPlaceQuery {
	npq.offset = &offset
	return npq
}

// Order adds an order step to the query.
func (npq *NearbyPlaceQuery) Order(o ...OrderFunc) *NearbyPlaceQuery {
	npq.order = append(npq.order, o...)
	return npq
}

// QueryRoom chains the current query on the room edge.
func (npq *NearbyPlaceQuery) QueryRoom() *RoomQuery {
	query := &RoomQuery{config: npq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := npq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(nearbyplace.Table, nearbyplace.FieldID, npq.sqlQuery()),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, nearbyplace.RoomTable, nearbyplace.RoomPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(npq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NearbyPlace entity in the query. Returns *NotFoundError when no nearbyplace was found.
func (npq *NearbyPlaceQuery) First(ctx context.Context) (*NearbyPlace, error) {
	nps, err := npq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nps) == 0 {
		return nil, &NotFoundError{nearbyplace.Label}
	}
	return nps[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (npq *NearbyPlaceQuery) FirstX(ctx context.Context) *NearbyPlace {
	np, err := npq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return np
}

// FirstID returns the first NearbyPlace id in the query. Returns *NotFoundError when no id was found.
func (npq *NearbyPlaceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = npq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{nearbyplace.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (npq *NearbyPlaceQuery) FirstXID(ctx context.Context) int {
	id, err := npq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only NearbyPlace entity in the query, returns an error if not exactly one entity was returned.
func (npq *NearbyPlaceQuery) Only(ctx context.Context) (*NearbyPlace, error) {
	nps, err := npq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nps) {
	case 1:
		return nps[0], nil
	case 0:
		return nil, &NotFoundError{nearbyplace.Label}
	default:
		return nil, &NotSingularError{nearbyplace.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (npq *NearbyPlaceQuery) OnlyX(ctx context.Context) *NearbyPlace {
	np, err := npq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return np
}

// OnlyID returns the only NearbyPlace id in the query, returns an error if not exactly one id was returned.
func (npq *NearbyPlaceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = npq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{nearbyplace.Label}
	default:
		err = &NotSingularError{nearbyplace.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (npq *NearbyPlaceQuery) OnlyIDX(ctx context.Context) int {
	id, err := npq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NearbyPlaces.
func (npq *NearbyPlaceQuery) All(ctx context.Context) ([]*NearbyPlace, error) {
	if err := npq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return npq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (npq *NearbyPlaceQuery) AllX(ctx context.Context) []*NearbyPlace {
	nps, err := npq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nps
}

// IDs executes the query and returns a list of NearbyPlace ids.
func (npq *NearbyPlaceQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := npq.Select(nearbyplace.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (npq *NearbyPlaceQuery) IDsX(ctx context.Context) []int {
	ids, err := npq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (npq *NearbyPlaceQuery) Count(ctx context.Context) (int, error) {
	if err := npq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return npq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (npq *NearbyPlaceQuery) CountX(ctx context.Context) int {
	count, err := npq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (npq *NearbyPlaceQuery) Exist(ctx context.Context) (bool, error) {
	if err := npq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return npq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (npq *NearbyPlaceQuery) ExistX(ctx context.Context) bool {
	exist, err := npq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (npq *NearbyPlaceQuery) Clone() *NearbyPlaceQuery {
	return &NearbyPlaceQuery{
		config:     npq.config,
		limit:      npq.limit,
		offset:     npq.offset,
		order:      append([]OrderFunc{}, npq.order...),
		unique:     append([]string{}, npq.unique...),
		predicates: append([]predicate.NearbyPlace{}, npq.predicates...),
		// clone intermediate query.
		sql:  npq.sql.Clone(),
		path: npq.path,
	}
}

//  WithRoom tells the query-builder to eager-loads the nodes that are connected to
// the "room" edge. The optional arguments used to configure the query builder of the edge.
func (npq *NearbyPlaceQuery) WithRoom(opts ...func(*RoomQuery)) *NearbyPlaceQuery {
	query := &RoomQuery{config: npq.config}
	for _, opt := range opts {
		opt(query)
	}
	npq.withRoom = query
	return npq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Placename string `json:"placename,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NearbyPlace.Query().
//		GroupBy(nearbyplace.FieldPlacename).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (npq *NearbyPlaceQuery) GroupBy(field string, fields ...string) *NearbyPlaceGroupBy {
	group := &NearbyPlaceGroupBy{config: npq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := npq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return npq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Placename string `json:"placename,omitempty"`
//	}
//
//	client.NearbyPlace.Query().
//		Select(nearbyplace.FieldPlacename).
//		Scan(ctx, &v)
//
func (npq *NearbyPlaceQuery) Select(field string, fields ...string) *NearbyPlaceSelect {
	selector := &NearbyPlaceSelect{config: npq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := npq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return npq.sqlQuery(), nil
	}
	return selector
}

func (npq *NearbyPlaceQuery) prepareQuery(ctx context.Context) error {
	if npq.path != nil {
		prev, err := npq.path(ctx)
		if err != nil {
			return err
		}
		npq.sql = prev
	}
	return nil
}

func (npq *NearbyPlaceQuery) sqlAll(ctx context.Context) ([]*NearbyPlace, error) {
	var (
		nodes       = []*NearbyPlace{}
		_spec       = npq.querySpec()
		loadedTypes = [1]bool{
			npq.withRoom != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &NearbyPlace{config: npq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, npq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := npq.withRoom; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*NearbyPlace, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
		}
		var (
			edgeids []int
			edges   = make(map[int][]*NearbyPlace)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   nearbyplace.RoomTable,
				Columns: nearbyplace.RoomPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(nearbyplace.RoomPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, npq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "room": %v`, err)
		}
		query.Where(room.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "room" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Room = append(nodes[i].Edges.Room, n)
			}
		}
	}

	return nodes, nil
}

func (npq *NearbyPlaceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := npq.querySpec()
	return sqlgraph.CountNodes(ctx, npq.driver, _spec)
}

func (npq *NearbyPlaceQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := npq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (npq *NearbyPlaceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nearbyplace.Table,
			Columns: nearbyplace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nearbyplace.FieldID,
			},
		},
		From:   npq.sql,
		Unique: true,
	}
	if ps := npq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := npq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := npq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := npq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (npq *NearbyPlaceQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(npq.driver.Dialect())
	t1 := builder.Table(nearbyplace.Table)
	selector := builder.Select(t1.Columns(nearbyplace.Columns...)...).From(t1)
	if npq.sql != nil {
		selector = npq.sql
		selector.Select(selector.Columns(nearbyplace.Columns...)...)
	}
	for _, p := range npq.predicates {
		p(selector)
	}
	for _, p := range npq.order {
		p(selector)
	}
	if offset := npq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := npq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NearbyPlaceGroupBy is the builder for group-by NearbyPlace entities.
type NearbyPlaceGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (npgb *NearbyPlaceGroupBy) Aggregate(fns ...AggregateFunc) *NearbyPlaceGroupBy {
	npgb.fns = append(npgb.fns, fns...)
	return npgb
}

// Scan applies the group-by query and scan the result into the given value.
func (npgb *NearbyPlaceGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := npgb.path(ctx)
	if err != nil {
		return err
	}
	npgb.sql = query
	return npgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (npgb *NearbyPlaceGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := npgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (npgb *NearbyPlaceGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(npgb.fields) > 1 {
		return nil, errors.New("ent: NearbyPlaceGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := npgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (npgb *NearbyPlaceGroupBy) StringsX(ctx context.Context) []string {
	v, err := npgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (npgb *NearbyPlaceGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = npgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nearbyplace.Label}
	default:
		err = fmt.Errorf("ent: NearbyPlaceGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (npgb *NearbyPlaceGroupBy) StringX(ctx context.Context) string {
	v, err := npgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (npgb *NearbyPlaceGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(npgb.fields) > 1 {
		return nil, errors.New("ent: NearbyPlaceGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := npgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (npgb *NearbyPlaceGroupBy) IntsX(ctx context.Context) []int {
	v, err := npgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (npgb *NearbyPlaceGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = npgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nearbyplace.Label}
	default:
		err = fmt.Errorf("ent: NearbyPlaceGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (npgb *NearbyPlaceGroupBy) IntX(ctx context.Context) int {
	v, err := npgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (npgb *NearbyPlaceGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(npgb.fields) > 1 {
		return nil, errors.New("ent: NearbyPlaceGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := npgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (npgb *NearbyPlaceGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := npgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (npgb *NearbyPlaceGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = npgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nearbyplace.Label}
	default:
		err = fmt.Errorf("ent: NearbyPlaceGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (npgb *NearbyPlaceGroupBy) Float64X(ctx context.Context) float64 {
	v, err := npgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (npgb *NearbyPlaceGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(npgb.fields) > 1 {
		return nil, errors.New("ent: NearbyPlaceGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := npgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (npgb *NearbyPlaceGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := npgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (npgb *NearbyPlaceGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = npgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nearbyplace.Label}
	default:
		err = fmt.Errorf("ent: NearbyPlaceGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (npgb *NearbyPlaceGroupBy) BoolX(ctx context.Context) bool {
	v, err := npgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (npgb *NearbyPlaceGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := npgb.sqlQuery().Query()
	if err := npgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (npgb *NearbyPlaceGroupBy) sqlQuery() *sql.Selector {
	selector := npgb.sql
	columns := make([]string, 0, len(npgb.fields)+len(npgb.fns))
	columns = append(columns, npgb.fields...)
	for _, fn := range npgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(npgb.fields...)
}

// NearbyPlaceSelect is the builder for select fields of NearbyPlace entities.
type NearbyPlaceSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (nps *NearbyPlaceSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := nps.path(ctx)
	if err != nil {
		return err
	}
	nps.sql = query
	return nps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (nps *NearbyPlaceSelect) ScanX(ctx context.Context, v interface{}) {
	if err := nps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (nps *NearbyPlaceSelect) Strings(ctx context.Context) ([]string, error) {
	if len(nps.fields) > 1 {
		return nil, errors.New("ent: NearbyPlaceSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := nps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (nps *NearbyPlaceSelect) StringsX(ctx context.Context) []string {
	v, err := nps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (nps *NearbyPlaceSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = nps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nearbyplace.Label}
	default:
		err = fmt.Errorf("ent: NearbyPlaceSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (nps *NearbyPlaceSelect) StringX(ctx context.Context) string {
	v, err := nps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (nps *NearbyPlaceSelect) Ints(ctx context.Context) ([]int, error) {
	if len(nps.fields) > 1 {
		return nil, errors.New("ent: NearbyPlaceSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := nps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (nps *NearbyPlaceSelect) IntsX(ctx context.Context) []int {
	v, err := nps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (nps *NearbyPlaceSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = nps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nearbyplace.Label}
	default:
		err = fmt.Errorf("ent: NearbyPlaceSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (nps *NearbyPlaceSelect) IntX(ctx context.Context) int {
	v, err := nps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (nps *NearbyPlaceSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(nps.fields) > 1 {
		return nil, errors.New("ent: NearbyPlaceSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := nps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (nps *NearbyPlaceSelect) Float64sX(ctx context.Context) []float64 {
	v, err := nps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (nps *NearbyPlaceSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = nps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nearbyplace.Label}
	default:
		err = fmt.Errorf("ent: NearbyPlaceSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (nps *NearbyPlaceSelect) Float64X(ctx context.Context) float64 {
	v, err := nps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (nps *NearbyPlaceSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(nps.fields) > 1 {
		return nil, errors.New("ent: NearbyPlaceSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := nps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (nps *NearbyPlaceSelect) BoolsX(ctx context.Context) []bool {
	v, err := nps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (nps *NearbyPlaceSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = nps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{nearbyplace.Label}
	default:
		err = fmt.Errorf("ent: NearbyPlaceSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (nps *NearbyPlaceSelect) BoolX(ctx context.Context) bool {
	v, err := nps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (nps *NearbyPlaceSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := nps.sqlQuery().Query()
	if err := nps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (nps *NearbyPlaceSelect) sqlQuery() sql.Querier {
	selector := nps.sql
	selector.Select(selector.Columns(nps.fields...)...)
	return selector
}
