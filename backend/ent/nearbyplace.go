// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/nearbyplace"
)

// NearbyPlace is the model entity for the NearbyPlace schema.
type NearbyPlace struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Placename holds the value of the "placename" field.
	Placename string `json:"placename,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NearbyPlaceQuery when eager-loading is set.
	Edges NearbyPlaceEdges `json:"edges"`
}

// NearbyPlaceEdges holds the relations/edges for other nodes in the graph.
type NearbyPlaceEdges struct {
	// Room holds the value of the room edge.
	Room []*Room
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading.
func (e NearbyPlaceEdges) RoomOrErr() ([]*Room, error) {
	if e.loadedTypes[0] {
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "room"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NearbyPlace) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // placename
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NearbyPlace fields.
func (np *NearbyPlace) assignValues(values ...interface{}) error {
	if m, n := len(values), len(nearbyplace.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	np.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field placename", values[0])
	} else if value.Valid {
		np.Placename = value.String
	}
	return nil
}

// QueryRoom queries the room edge of the NearbyPlace.
func (np *NearbyPlace) QueryRoom() *RoomQuery {
	return (&NearbyPlaceClient{config: np.config}).QueryRoom(np)
}

// Update returns a builder for updating this NearbyPlace.
// Note that, you need to call NearbyPlace.Unwrap() before calling this method, if this NearbyPlace
// was returned from a transaction, and the transaction was committed or rolled back.
func (np *NearbyPlace) Update() *NearbyPlaceUpdateOne {
	return (&NearbyPlaceClient{config: np.config}).UpdateOne(np)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (np *NearbyPlace) Unwrap() *NearbyPlace {
	tx, ok := np.config.driver.(*txDriver)
	if !ok {
		panic("ent: NearbyPlace is not a transactional entity")
	}
	np.config.driver = tx.drv
	return np
}

// String implements the fmt.Stringer.
func (np *NearbyPlace) String() string {
	var builder strings.Builder
	builder.WriteString("NearbyPlace(")
	builder.WriteString(fmt.Sprintf("id=%v", np.ID))
	builder.WriteString(", placename=")
	builder.WriteString(np.Placename)
	builder.WriteByte(')')
	return builder.String()
}

// NearbyPlaces is a parsable slice of NearbyPlace.
type NearbyPlaces []*NearbyPlace

func (np NearbyPlaces) config(cfg config) {
	for _i := range np {
		np[_i].config = cfg
	}
}
