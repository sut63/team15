// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/nearbyplace"
	"github.com/team15/app/ent/roomdetail"
)

// Nearbyplace is the model entity for the Nearbyplace schema.
type Nearbyplace struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Nearbyplace holds the value of the "nearbyplace" field.
	Nearbyplace string `json:"nearbyplace,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NearbyplaceQuery when eager-loading is set.
	Edges                   NearbyplaceEdges `json:"edges"`
	roomdetail_nearbyplaces *int
}

// NearbyplaceEdges holds the relations/edges for other nodes in the graph.
type NearbyplaceEdges struct {
	// Roomdetail holds the value of the roomdetail edge.
	Roomdetail *Roomdetail
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoomdetailOrErr returns the Roomdetail value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NearbyplaceEdges) RoomdetailOrErr() (*Roomdetail, error) {
	if e.loadedTypes[0] {
		if e.Roomdetail == nil {
			// The edge roomdetail was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomdetail.Label}
		}
		return e.Roomdetail, nil
	}
	return nil, &NotLoadedError{edge: "roomdetail"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Nearbyplace) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // nearbyplace
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Nearbyplace) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // roomdetail_nearbyplaces
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Nearbyplace fields.
func (n *Nearbyplace) assignValues(values ...interface{}) error {
	if m, n := len(values), len(nearbyplace.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	n.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field nearbyplace", values[0])
	} else if value.Valid {
		n.Nearbyplace = value.String
	}
	values = values[1:]
	if len(values) == len(nearbyplace.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field roomdetail_nearbyplaces", value)
		} else if value.Valid {
			n.roomdetail_nearbyplaces = new(int)
			*n.roomdetail_nearbyplaces = int(value.Int64)
		}
	}
	return nil
}

// QueryRoomdetail queries the roomdetail edge of the Nearbyplace.
func (n *Nearbyplace) QueryRoomdetail() *RoomdetailQuery {
	return (&NearbyplaceClient{config: n.config}).QueryRoomdetail(n)
}

// Update returns a builder for updating this Nearbyplace.
// Note that, you need to call Nearbyplace.Unwrap() before calling this method, if this Nearbyplace
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Nearbyplace) Update() *NearbyplaceUpdateOne {
	return (&NearbyplaceClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (n *Nearbyplace) Unwrap() *Nearbyplace {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Nearbyplace is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Nearbyplace) String() string {
	var builder strings.Builder
	builder.WriteString("Nearbyplace(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", nearbyplace=")
	builder.WriteString(n.Nearbyplace)
	builder.WriteByte(')')
	return builder.String()
}

// Nearbyplaces is a parsable slice of Nearbyplace.
type Nearbyplaces []*Nearbyplace

func (n Nearbyplaces) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
