// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/rentalstatus"
	"github.com/team15/app/ent/repairinvoice"
)

// RentalstatusUpdate is the builder for updating Rentalstatus entities.
type RentalstatusUpdate struct {
	config
	hooks      []Hook
	mutation   *RentalstatusMutation
	predicates []predicate.Rentalstatus
}

// Where adds a new predicate for the builder.
func (ru *RentalstatusUpdate) Where(ps ...predicate.Rentalstatus) *RentalstatusUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetRentalstatus sets the rentalstatus field.
func (ru *RentalstatusUpdate) SetRentalstatus(s string) *RentalstatusUpdate {
	ru.mutation.SetRentalstatus(s)
	return ru
}

// AddRepairinvoiceIDs adds the repairinvoices edge to Repairinvoice by ids.
func (ru *RentalstatusUpdate) AddRepairinvoiceIDs(ids ...int) *RentalstatusUpdate {
	ru.mutation.AddRepairinvoiceIDs(ids...)
	return ru
}

// AddRepairinvoices adds the repairinvoices edges to Repairinvoice.
func (ru *RentalstatusUpdate) AddRepairinvoices(r ...*Repairinvoice) *RentalstatusUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRepairinvoiceIDs(ids...)
}

// Mutation returns the RentalstatusMutation object of the builder.
func (ru *RentalstatusUpdate) Mutation() *RentalstatusMutation {
	return ru.mutation
}

// RemoveRepairinvoiceIDs removes the repairinvoices edge to Repairinvoice by ids.
func (ru *RentalstatusUpdate) RemoveRepairinvoiceIDs(ids ...int) *RentalstatusUpdate {
	ru.mutation.RemoveRepairinvoiceIDs(ids...)
	return ru
}

// RemoveRepairinvoices removes repairinvoices edges to Repairinvoice.
func (ru *RentalstatusUpdate) RemoveRepairinvoices(r ...*Repairinvoice) *RentalstatusUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRepairinvoiceIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RentalstatusUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RentalstatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RentalstatusUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RentalstatusUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RentalstatusUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RentalstatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rentalstatus.Table,
			Columns: rentalstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rentalstatus.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Rentalstatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rentalstatus.FieldRentalstatus,
		})
	}
	if nodes := ru.mutation.RemovedRepairinvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rentalstatus.RepairinvoicesTable,
			Columns: []string{rentalstatus.RepairinvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RepairinvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rentalstatus.RepairinvoicesTable,
			Columns: []string{rentalstatus.RepairinvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rentalstatus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RentalstatusUpdateOne is the builder for updating a single Rentalstatus entity.
type RentalstatusUpdateOne struct {
	config
	hooks    []Hook
	mutation *RentalstatusMutation
}

// SetRentalstatus sets the rentalstatus field.
func (ruo *RentalstatusUpdateOne) SetRentalstatus(s string) *RentalstatusUpdateOne {
	ruo.mutation.SetRentalstatus(s)
	return ruo
}

// AddRepairinvoiceIDs adds the repairinvoices edge to Repairinvoice by ids.
func (ruo *RentalstatusUpdateOne) AddRepairinvoiceIDs(ids ...int) *RentalstatusUpdateOne {
	ruo.mutation.AddRepairinvoiceIDs(ids...)
	return ruo
}

// AddRepairinvoices adds the repairinvoices edges to Repairinvoice.
func (ruo *RentalstatusUpdateOne) AddRepairinvoices(r ...*Repairinvoice) *RentalstatusUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRepairinvoiceIDs(ids...)
}

// Mutation returns the RentalstatusMutation object of the builder.
func (ruo *RentalstatusUpdateOne) Mutation() *RentalstatusMutation {
	return ruo.mutation
}

// RemoveRepairinvoiceIDs removes the repairinvoices edge to Repairinvoice by ids.
func (ruo *RentalstatusUpdateOne) RemoveRepairinvoiceIDs(ids ...int) *RentalstatusUpdateOne {
	ruo.mutation.RemoveRepairinvoiceIDs(ids...)
	return ruo
}

// RemoveRepairinvoices removes repairinvoices edges to Repairinvoice.
func (ruo *RentalstatusUpdateOne) RemoveRepairinvoices(r ...*Repairinvoice) *RentalstatusUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRepairinvoiceIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *RentalstatusUpdateOne) Save(ctx context.Context) (*Rentalstatus, error) {

	var (
		err  error
		node *Rentalstatus
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RentalstatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RentalstatusUpdateOne) SaveX(ctx context.Context) *Rentalstatus {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RentalstatusUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RentalstatusUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RentalstatusUpdateOne) sqlSave(ctx context.Context) (r *Rentalstatus, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rentalstatus.Table,
			Columns: rentalstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rentalstatus.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Rentalstatus.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Rentalstatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rentalstatus.FieldRentalstatus,
		})
	}
	if nodes := ruo.mutation.RemovedRepairinvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rentalstatus.RepairinvoicesTable,
			Columns: []string{rentalstatus.RepairinvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RepairinvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rentalstatus.RepairinvoicesTable,
			Columns: []string{rentalstatus.RepairinvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Rentalstatus{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rentalstatus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
