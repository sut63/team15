// Code generated by entc, DO NOT EDIT.

package roomdetail

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team15/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Roomtypename applies equality check predicate on the "roomtypename" field. It's identical to RoomtypenameEQ.
func Roomtypename(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomtypename), v))
	})
}

// Roomprice applies equality check predicate on the "roomprice" field. It's identical to RoompriceEQ.
func Roomprice(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomprice), v))
	})
}

// RoomtypenameEQ applies the EQ predicate on the "roomtypename" field.
func RoomtypenameEQ(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomtypename), v))
	})
}

// RoomtypenameNEQ applies the NEQ predicate on the "roomtypename" field.
func RoomtypenameNEQ(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomtypename), v))
	})
}

// RoomtypenameIn applies the In predicate on the "roomtypename" field.
func RoomtypenameIn(vs ...string) predicate.Roomdetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roomdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomtypename), v...))
	})
}

// RoomtypenameNotIn applies the NotIn predicate on the "roomtypename" field.
func RoomtypenameNotIn(vs ...string) predicate.Roomdetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roomdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomtypename), v...))
	})
}

// RoomtypenameGT applies the GT predicate on the "roomtypename" field.
func RoomtypenameGT(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomtypename), v))
	})
}

// RoomtypenameGTE applies the GTE predicate on the "roomtypename" field.
func RoomtypenameGTE(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomtypename), v))
	})
}

// RoomtypenameLT applies the LT predicate on the "roomtypename" field.
func RoomtypenameLT(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomtypename), v))
	})
}

// RoomtypenameLTE applies the LTE predicate on the "roomtypename" field.
func RoomtypenameLTE(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomtypename), v))
	})
}

// RoomtypenameContains applies the Contains predicate on the "roomtypename" field.
func RoomtypenameContains(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomtypename), v))
	})
}

// RoomtypenameHasPrefix applies the HasPrefix predicate on the "roomtypename" field.
func RoomtypenameHasPrefix(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomtypename), v))
	})
}

// RoomtypenameHasSuffix applies the HasSuffix predicate on the "roomtypename" field.
func RoomtypenameHasSuffix(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomtypename), v))
	})
}

// RoomtypenameEqualFold applies the EqualFold predicate on the "roomtypename" field.
func RoomtypenameEqualFold(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomtypename), v))
	})
}

// RoomtypenameContainsFold applies the ContainsFold predicate on the "roomtypename" field.
func RoomtypenameContainsFold(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomtypename), v))
	})
}

// RoompriceEQ applies the EQ predicate on the "roomprice" field.
func RoompriceEQ(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomprice), v))
	})
}

// RoompriceNEQ applies the NEQ predicate on the "roomprice" field.
func RoompriceNEQ(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomprice), v))
	})
}

// RoompriceIn applies the In predicate on the "roomprice" field.
func RoompriceIn(vs ...string) predicate.Roomdetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roomdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomprice), v...))
	})
}

// RoompriceNotIn applies the NotIn predicate on the "roomprice" field.
func RoompriceNotIn(vs ...string) predicate.Roomdetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Roomdetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomprice), v...))
	})
}

// RoompriceGT applies the GT predicate on the "roomprice" field.
func RoompriceGT(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomprice), v))
	})
}

// RoompriceGTE applies the GTE predicate on the "roomprice" field.
func RoompriceGTE(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomprice), v))
	})
}

// RoompriceLT applies the LT predicate on the "roomprice" field.
func RoompriceLT(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomprice), v))
	})
}

// RoompriceLTE applies the LTE predicate on the "roomprice" field.
func RoompriceLTE(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomprice), v))
	})
}

// RoompriceContains applies the Contains predicate on the "roomprice" field.
func RoompriceContains(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomprice), v))
	})
}

// RoompriceHasPrefix applies the HasPrefix predicate on the "roomprice" field.
func RoompriceHasPrefix(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomprice), v))
	})
}

// RoompriceHasSuffix applies the HasSuffix predicate on the "roomprice" field.
func RoompriceHasSuffix(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomprice), v))
	})
}

// RoompriceEqualFold applies the EqualFold predicate on the "roomprice" field.
func RoompriceEqualFold(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomprice), v))
	})
}

// RoompriceContainsFold applies the ContainsFold predicate on the "roomprice" field.
func RoompriceContainsFold(v string) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomprice), v))
	})
}

// HasEquipments applies the HasEdge predicate on the "equipments" edge.
func HasEquipments() predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmentsTable, EquipmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentsWith applies the HasEdge predicate on the "equipments" edge with a given conditions (other predicates).
func HasEquipmentsWith(preds ...predicate.Equipment) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EquipmentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmentsTable, EquipmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFacilities applies the HasEdge predicate on the "facilities" edge.
func HasFacilities() predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FacilitiesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FacilitiesTable, FacilitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFacilitiesWith applies the HasEdge predicate on the "facilities" edge with a given conditions (other predicates).
func HasFacilitiesWith(preds ...predicate.Facilitie) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FacilitiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FacilitiesTable, FacilitiesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNearbyplaces applies the HasEdge predicate on the "nearbyplaces" edge.
func HasNearbyplaces() predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NearbyplacesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NearbyplacesTable, NearbyplacesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNearbyplacesWith applies the HasEdge predicate on the "nearbyplaces" edge with a given conditions (other predicates).
func HasNearbyplacesWith(preds ...predicate.Nearbyplace) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NearbyplacesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NearbyplacesTable, NearbyplacesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuantity applies the HasEdge predicate on the "quantity" edge.
func HasQuantity() predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuantityTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuantityTable, QuantityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuantityWith applies the HasEdge predicate on the "quantity" edge with a given conditions (other predicates).
func HasQuantityWith(preds ...predicate.Quantity) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuantityInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuantityTable, QuantityColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStaytype applies the HasEdge predicate on the "staytype" edge.
func HasStaytype() predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StaytypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StaytypeTable, StaytypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStaytypeWith applies the HasEdge predicate on the "staytype" edge with a given conditions (other predicates).
func HasStaytypeWith(preds ...predicate.Staytype) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StaytypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StaytypeTable, StaytypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoomdetails applies the HasEdge predicate on the "roomdetails" edge.
func HasRoomdetails() predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomdetailsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RoomdetailsTable, RoomdetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomdetailsWith applies the HasEdge predicate on the "roomdetails" edge with a given conditions (other predicates).
func HasRoomdetailsWith(preds ...predicate.Lease) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomdetailsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RoomdetailsTable, RoomdetailsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Roomdetail) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Roomdetail) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Roomdetail) predicate.Roomdetail {
	return predicate.Roomdetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
