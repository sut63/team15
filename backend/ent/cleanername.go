// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/cleanername"
)

// Cleanername is the model entity for the Cleanername schema.
type Cleanername struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Cleanername holds the value of the "cleanername" field.
	Cleanername string `json:"cleanername,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CleanernameQuery when eager-loading is set.
	Edges CleanernameEdges `json:"edges"`
}

// CleanernameEdges holds the relations/edges for other nodes in the graph.
type CleanernameEdges struct {
	// Cleaningrooms holds the value of the cleaningrooms edge.
	Cleaningrooms []*Cleaningroom
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CleaningroomsOrErr returns the Cleaningrooms value or an error if the edge
// was not loaded in eager-loading.
func (e CleanernameEdges) CleaningroomsOrErr() ([]*Cleaningroom, error) {
	if e.loadedTypes[0] {
		return e.Cleaningrooms, nil
	}
	return nil, &NotLoadedError{edge: "cleaningrooms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cleanername) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // cleanername
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cleanername fields.
func (c *Cleanername) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cleanername.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field cleanername", values[0])
	} else if value.Valid {
		c.Cleanername = value.String
	}
	return nil
}

// QueryCleaningrooms queries the cleaningrooms edge of the Cleanername.
func (c *Cleanername) QueryCleaningrooms() *CleaningroomQuery {
	return (&CleanernameClient{config: c.config}).QueryCleaningrooms(c)
}

// Update returns a builder for updating this Cleanername.
// Note that, you need to call Cleanername.Unwrap() before calling this method, if this Cleanername
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cleanername) Update() *CleanernameUpdateOne {
	return (&CleanernameClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Cleanername) Unwrap() *Cleanername {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cleanername is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cleanername) String() string {
	var builder strings.Builder
	builder.WriteString("Cleanername(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", cleanername=")
	builder.WriteString(c.Cleanername)
	builder.WriteByte(')')
	return builder.String()
}

// Cleanernames is a parsable slice of Cleanername.
type Cleanernames []*Cleanername

func (c Cleanernames) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
