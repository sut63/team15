// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/cleanername"
	"github.com/team15/app/ent/cleaningroom"
)

// CleanerNameCreate is the builder for creating a CleanerName entity.
type CleanerNameCreate struct {
	config
	mutation *CleanerNameMutation
	hooks    []Hook
}

// SetCleanername sets the cleanername field.
func (cnc *CleanerNameCreate) SetCleanername(s string) *CleanerNameCreate {
	cnc.mutation.SetCleanername(s)
	return cnc
}

// AddCleaningroomIDs adds the cleaningrooms edge to CleaningRoom by ids.
func (cnc *CleanerNameCreate) AddCleaningroomIDs(ids ...int) *CleanerNameCreate {
	cnc.mutation.AddCleaningroomIDs(ids...)
	return cnc
}

// AddCleaningrooms adds the cleaningrooms edges to CleaningRoom.
func (cnc *CleanerNameCreate) AddCleaningrooms(c ...*CleaningRoom) *CleanerNameCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cnc.AddCleaningroomIDs(ids...)
}

// Mutation returns the CleanerNameMutation object of the builder.
func (cnc *CleanerNameCreate) Mutation() *CleanerNameMutation {
	return cnc.mutation
}

// Save creates the CleanerName in the database.
func (cnc *CleanerNameCreate) Save(ctx context.Context) (*CleanerName, error) {
	if _, ok := cnc.mutation.Cleanername(); !ok {
		return nil, &ValidationError{Name: "cleanername", err: errors.New("ent: missing required field \"cleanername\"")}
	}
	if v, ok := cnc.mutation.Cleanername(); ok {
		if err := cleanername.CleanernameValidator(v); err != nil {
			return nil, &ValidationError{Name: "cleanername", err: fmt.Errorf("ent: validator failed for field \"cleanername\": %w", err)}
		}
	}
	var (
		err  error
		node *CleanerName
	)
	if len(cnc.hooks) == 0 {
		node, err = cnc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CleanerNameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cnc.mutation = mutation
			node, err = cnc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cnc.hooks) - 1; i >= 0; i-- {
			mut = cnc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cnc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cnc *CleanerNameCreate) SaveX(ctx context.Context) *CleanerName {
	v, err := cnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cnc *CleanerNameCreate) sqlSave(ctx context.Context) (*CleanerName, error) {
	cn, _spec := cnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cnc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	cn.ID = int(id)
	return cn, nil
}

func (cnc *CleanerNameCreate) createSpec() (*CleanerName, *sqlgraph.CreateSpec) {
	var (
		cn    = &CleanerName{config: cnc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cleanername.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cleanername.FieldID,
			},
		}
	)
	if value, ok := cnc.mutation.Cleanername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cleanername.FieldCleanername,
		})
		cn.Cleanername = value
	}
	if nodes := cnc.mutation.CleaningroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cleanername.CleaningroomsTable,
			Columns: []string{cleanername.CleaningroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleaningroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return cn, _spec
}
