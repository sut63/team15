// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/deposit"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/jobposition"
	"github.com/team15/app/ent/lease"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/repairinvoice"
	"github.com/team15/app/ent/roomdetail"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks      []Hook
	mutation   *EmployeeMutation
	predicates []predicate.Employee
}

// Where adds a new predicate for the builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetName sets the name field.
func (eu *EmployeeUpdate) SetName(s string) *EmployeeUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetEmail sets the email field.
func (eu *EmployeeUpdate) SetEmail(s string) *EmployeeUpdate {
	eu.mutation.SetEmail(s)
	return eu
}

// SetPassword sets the password field.
func (eu *EmployeeUpdate) SetPassword(s string) *EmployeeUpdate {
	eu.mutation.SetPassword(s)
	return eu
}

// AddEmployeeIDs adds the employees edge to Deposit by ids.
func (eu *EmployeeUpdate) AddEmployeeIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddEmployeeIDs(ids...)
	return eu
}

// AddEmployees adds the employees edges to Deposit.
func (eu *EmployeeUpdate) AddEmployees(d ...*Deposit) *EmployeeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddEmployeeIDs(ids...)
}

// AddLeaseIDs adds the leases edge to Lease by ids.
func (eu *EmployeeUpdate) AddLeaseIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddLeaseIDs(ids...)
	return eu
}

// AddLeases adds the leases edges to Lease.
func (eu *EmployeeUpdate) AddLeases(l ...*Lease) *EmployeeUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eu.AddLeaseIDs(ids...)
}

// AddRoomdetailIDs adds the roomdetails edge to Roomdetail by ids.
func (eu *EmployeeUpdate) AddRoomdetailIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddRoomdetailIDs(ids...)
	return eu
}

// AddRoomdetails adds the roomdetails edges to Roomdetail.
func (eu *EmployeeUpdate) AddRoomdetails(r ...*Roomdetail) *EmployeeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddRoomdetailIDs(ids...)
}

// SetJobpositionID sets the jobposition edge to Jobposition by id.
func (eu *EmployeeUpdate) SetJobpositionID(id int) *EmployeeUpdate {
	eu.mutation.SetJobpositionID(id)
	return eu
}

// SetNillableJobpositionID sets the jobposition edge to Jobposition by id if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableJobpositionID(id *int) *EmployeeUpdate {
	if id != nil {
		eu = eu.SetJobpositionID(*id)
	}
	return eu
}

// SetJobposition sets the jobposition edge to Jobposition.
func (eu *EmployeeUpdate) SetJobposition(j *Jobposition) *EmployeeUpdate {
	return eu.SetJobpositionID(j.ID)
}

// AddRepairinvoiceIDs adds the repairinvoices edge to Repairinvoice by ids.
func (eu *EmployeeUpdate) AddRepairinvoiceIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddRepairinvoiceIDs(ids...)
	return eu
}

// AddRepairinvoices adds the repairinvoices edges to Repairinvoice.
func (eu *EmployeeUpdate) AddRepairinvoices(r ...*Repairinvoice) *EmployeeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddRepairinvoiceIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// RemoveEmployeeIDs removes the employees edge to Deposit by ids.
func (eu *EmployeeUpdate) RemoveEmployeeIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveEmployeeIDs(ids...)
	return eu
}

// RemoveEmployees removes employees edges to Deposit.
func (eu *EmployeeUpdate) RemoveEmployees(d ...*Deposit) *EmployeeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveEmployeeIDs(ids...)
}

// RemoveLeaseIDs removes the leases edge to Lease by ids.
func (eu *EmployeeUpdate) RemoveLeaseIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveLeaseIDs(ids...)
	return eu
}

// RemoveLeases removes leases edges to Lease.
func (eu *EmployeeUpdate) RemoveLeases(l ...*Lease) *EmployeeUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eu.RemoveLeaseIDs(ids...)
}

// RemoveRoomdetailIDs removes the roomdetails edge to Roomdetail by ids.
func (eu *EmployeeUpdate) RemoveRoomdetailIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveRoomdetailIDs(ids...)
	return eu
}

// RemoveRoomdetails removes roomdetails edges to Roomdetail.
func (eu *EmployeeUpdate) RemoveRoomdetails(r ...*Roomdetail) *EmployeeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveRoomdetailIDs(ids...)
}

// ClearJobposition clears the jobposition edge to Jobposition.
func (eu *EmployeeUpdate) ClearJobposition() *EmployeeUpdate {
	eu.mutation.ClearJobposition()
	return eu
}

// RemoveRepairinvoiceIDs removes the repairinvoices edge to Repairinvoice by ids.
func (eu *EmployeeUpdate) RemoveRepairinvoiceIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveRepairinvoiceIDs(ids...)
	return eu
}

// RemoveRepairinvoices removes repairinvoices edges to Repairinvoice.
func (eu *EmployeeUpdate) RemoveRepairinvoices(r ...*Repairinvoice) *EmployeeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveRepairinvoiceIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := eu.mutation.Name(); ok {
		if err := employee.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Email(); ok {
		if err := employee.EmailValidator(v); err != nil {
			return 0, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Password(); ok {
		if err := employee.PasswordValidator(v); err != nil {
			return 0, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldName,
		})
	}
	if value, ok := eu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmail,
		})
	}
	if value, ok := eu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldPassword,
		})
	}
	if nodes := eu.mutation.RemovedEmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeesTable,
			Columns: []string{employee.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deposit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeesTable,
			Columns: []string{employee.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deposit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedLeasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeasesTable,
			Columns: []string{employee.LeasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.LeasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeasesTable,
			Columns: []string{employee.LeasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedRoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RoomdetailsTable,
			Columns: []string{employee.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RoomdetailsTable,
			Columns: []string{employee.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.JobpositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.JobpositionTable,
			Columns: []string{employee.JobpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobposition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.JobpositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.JobpositionTable,
			Columns: []string{employee.JobpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobposition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedRepairinvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RepairinvoicesTable,
			Columns: []string{employee.RepairinvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RepairinvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RepairinvoicesTable,
			Columns: []string{employee.RepairinvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetName sets the name field.
func (euo *EmployeeUpdateOne) SetName(s string) *EmployeeUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetEmail sets the email field.
func (euo *EmployeeUpdateOne) SetEmail(s string) *EmployeeUpdateOne {
	euo.mutation.SetEmail(s)
	return euo
}

// SetPassword sets the password field.
func (euo *EmployeeUpdateOne) SetPassword(s string) *EmployeeUpdateOne {
	euo.mutation.SetPassword(s)
	return euo
}

// AddEmployeeIDs adds the employees edge to Deposit by ids.
func (euo *EmployeeUpdateOne) AddEmployeeIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddEmployeeIDs(ids...)
	return euo
}

// AddEmployees adds the employees edges to Deposit.
func (euo *EmployeeUpdateOne) AddEmployees(d ...*Deposit) *EmployeeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddEmployeeIDs(ids...)
}

// AddLeaseIDs adds the leases edge to Lease by ids.
func (euo *EmployeeUpdateOne) AddLeaseIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddLeaseIDs(ids...)
	return euo
}

// AddLeases adds the leases edges to Lease.
func (euo *EmployeeUpdateOne) AddLeases(l ...*Lease) *EmployeeUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return euo.AddLeaseIDs(ids...)
}

// AddRoomdetailIDs adds the roomdetails edge to Roomdetail by ids.
func (euo *EmployeeUpdateOne) AddRoomdetailIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddRoomdetailIDs(ids...)
	return euo
}

// AddRoomdetails adds the roomdetails edges to Roomdetail.
func (euo *EmployeeUpdateOne) AddRoomdetails(r ...*Roomdetail) *EmployeeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddRoomdetailIDs(ids...)
}

// SetJobpositionID sets the jobposition edge to Jobposition by id.
func (euo *EmployeeUpdateOne) SetJobpositionID(id int) *EmployeeUpdateOne {
	euo.mutation.SetJobpositionID(id)
	return euo
}

// SetNillableJobpositionID sets the jobposition edge to Jobposition by id if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableJobpositionID(id *int) *EmployeeUpdateOne {
	if id != nil {
		euo = euo.SetJobpositionID(*id)
	}
	return euo
}

// SetJobposition sets the jobposition edge to Jobposition.
func (euo *EmployeeUpdateOne) SetJobposition(j *Jobposition) *EmployeeUpdateOne {
	return euo.SetJobpositionID(j.ID)
}

// AddRepairinvoiceIDs adds the repairinvoices edge to Repairinvoice by ids.
func (euo *EmployeeUpdateOne) AddRepairinvoiceIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddRepairinvoiceIDs(ids...)
	return euo
}

// AddRepairinvoices adds the repairinvoices edges to Repairinvoice.
func (euo *EmployeeUpdateOne) AddRepairinvoices(r ...*Repairinvoice) *EmployeeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddRepairinvoiceIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// RemoveEmployeeIDs removes the employees edge to Deposit by ids.
func (euo *EmployeeUpdateOne) RemoveEmployeeIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveEmployeeIDs(ids...)
	return euo
}

// RemoveEmployees removes employees edges to Deposit.
func (euo *EmployeeUpdateOne) RemoveEmployees(d ...*Deposit) *EmployeeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveEmployeeIDs(ids...)
}

// RemoveLeaseIDs removes the leases edge to Lease by ids.
func (euo *EmployeeUpdateOne) RemoveLeaseIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveLeaseIDs(ids...)
	return euo
}

// RemoveLeases removes leases edges to Lease.
func (euo *EmployeeUpdateOne) RemoveLeases(l ...*Lease) *EmployeeUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return euo.RemoveLeaseIDs(ids...)
}

// RemoveRoomdetailIDs removes the roomdetails edge to Roomdetail by ids.
func (euo *EmployeeUpdateOne) RemoveRoomdetailIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveRoomdetailIDs(ids...)
	return euo
}

// RemoveRoomdetails removes roomdetails edges to Roomdetail.
func (euo *EmployeeUpdateOne) RemoveRoomdetails(r ...*Roomdetail) *EmployeeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveRoomdetailIDs(ids...)
}

// ClearJobposition clears the jobposition edge to Jobposition.
func (euo *EmployeeUpdateOne) ClearJobposition() *EmployeeUpdateOne {
	euo.mutation.ClearJobposition()
	return euo
}

// RemoveRepairinvoiceIDs removes the repairinvoices edge to Repairinvoice by ids.
func (euo *EmployeeUpdateOne) RemoveRepairinvoiceIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveRepairinvoiceIDs(ids...)
	return euo
}

// RemoveRepairinvoices removes repairinvoices edges to Repairinvoice.
func (euo *EmployeeUpdateOne) RemoveRepairinvoices(r ...*Repairinvoice) *EmployeeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveRepairinvoiceIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	if v, ok := euo.mutation.Name(); ok {
		if err := employee.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Email(); ok {
		if err := employee.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Password(); ok {
		if err := employee.PasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}

	var (
		err  error
		node *Employee
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	e, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (e *Employee, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Employee.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldName,
		})
	}
	if value, ok := euo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmail,
		})
	}
	if value, ok := euo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldPassword,
		})
	}
	if nodes := euo.mutation.RemovedEmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeesTable,
			Columns: []string{employee.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deposit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.EmployeesTable,
			Columns: []string{employee.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deposit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedLeasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeasesTable,
			Columns: []string{employee.LeasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.LeasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeasesTable,
			Columns: []string{employee.LeasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedRoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RoomdetailsTable,
			Columns: []string{employee.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RoomdetailsTable,
			Columns: []string{employee.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.JobpositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.JobpositionTable,
			Columns: []string{employee.JobpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobposition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.JobpositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.JobpositionTable,
			Columns: []string{employee.JobpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jobposition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedRepairinvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RepairinvoicesTable,
			Columns: []string{employee.RepairinvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RepairinvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.RepairinvoicesTable,
			Columns: []string{employee.RepairinvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	e = &Employee{config: euo.config}
	_spec.Assign = e.assignValues
	_spec.ScanValues = e.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return e, nil
}
