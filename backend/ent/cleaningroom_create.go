// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/cleanername"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/lengthtime"
)

// CleaningRoomCreate is the builder for creating a CleaningRoom entity.
type CleaningRoomCreate struct {
	config
	mutation *CleaningRoomMutation
	hooks    []Hook
}

// SetDateandstarttime sets the dateandstarttime field.
func (crc *CleaningRoomCreate) SetDateandstarttime(t time.Time) *CleaningRoomCreate {
	crc.mutation.SetDateandstarttime(t)
	return crc
}

// SetNote sets the note field.
func (crc *CleaningRoomCreate) SetNote(s string) *CleaningRoomCreate {
	crc.mutation.SetNote(s)
	return crc
}

// SetCleanerNameID sets the CleanerName edge to CleanerName by id.
func (crc *CleaningRoomCreate) SetCleanerNameID(id int) *CleaningRoomCreate {
	crc.mutation.SetCleanerNameID(id)
	return crc
}

// SetNillableCleanerNameID sets the CleanerName edge to CleanerName by id if the given value is not nil.
func (crc *CleaningRoomCreate) SetNillableCleanerNameID(id *int) *CleaningRoomCreate {
	if id != nil {
		crc = crc.SetCleanerNameID(*id)
	}
	return crc
}

// SetCleanerName sets the CleanerName edge to CleanerName.
func (crc *CleaningRoomCreate) SetCleanerName(c *CleanerName) *CleaningRoomCreate {
	return crc.SetCleanerNameID(c.ID)
}

// SetLengthTimeID sets the LengthTime edge to LengthTime by id.
func (crc *CleaningRoomCreate) SetLengthTimeID(id int) *CleaningRoomCreate {
	crc.mutation.SetLengthTimeID(id)
	return crc
}

// SetNillableLengthTimeID sets the LengthTime edge to LengthTime by id if the given value is not nil.
func (crc *CleaningRoomCreate) SetNillableLengthTimeID(id *int) *CleaningRoomCreate {
	if id != nil {
		crc = crc.SetLengthTimeID(*id)
	}
	return crc
}

// SetLengthTime sets the LengthTime edge to LengthTime.
func (crc *CleaningRoomCreate) SetLengthTime(l *LengthTime) *CleaningRoomCreate {
	return crc.SetLengthTimeID(l.ID)
}

// Mutation returns the CleaningRoomMutation object of the builder.
func (crc *CleaningRoomCreate) Mutation() *CleaningRoomMutation {
	return crc.mutation
}

// Save creates the CleaningRoom in the database.
func (crc *CleaningRoomCreate) Save(ctx context.Context) (*CleaningRoom, error) {
	if _, ok := crc.mutation.Dateandstarttime(); !ok {
		return nil, &ValidationError{Name: "dateandstarttime", err: errors.New("ent: missing required field \"dateandstarttime\"")}
	}
	if _, ok := crc.mutation.Note(); !ok {
		return nil, &ValidationError{Name: "note", err: errors.New("ent: missing required field \"note\"")}
	}
	var (
		err  error
		node *CleaningRoom
	)
	if len(crc.hooks) == 0 {
		node, err = crc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CleaningRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			crc.mutation = mutation
			node, err = crc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(crc.hooks) - 1; i >= 0; i-- {
			mut = crc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, crc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CleaningRoomCreate) SaveX(ctx context.Context) *CleaningRoom {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (crc *CleaningRoomCreate) sqlSave(ctx context.Context) (*CleaningRoom, error) {
	cr, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	cr.ID = int(id)
	return cr, nil
}

func (crc *CleaningRoomCreate) createSpec() (*CleaningRoom, *sqlgraph.CreateSpec) {
	var (
		cr    = &CleaningRoom{config: crc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cleaningroom.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cleaningroom.FieldID,
			},
		}
	)
	if value, ok := crc.mutation.Dateandstarttime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cleaningroom.FieldDateandstarttime,
		})
		cr.Dateandstarttime = value
	}
	if value, ok := crc.mutation.Note(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cleaningroom.FieldNote,
		})
		cr.Note = value
	}
	if nodes := crc.mutation.CleanerNameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.CleanerNameTable,
			Columns: []string{cleaningroom.CleanerNameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleanername.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := crc.mutation.LengthTimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.LengthTimeTable,
			Columns: []string{cleaningroom.LengthTimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lengthtime.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return cr, _spec
}
