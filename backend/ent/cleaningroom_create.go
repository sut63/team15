// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/cleanername"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/lengthtime"
	"github.com/team15/app/ent/roomdetail"
)

// CleaningroomCreate is the builder for creating a Cleaningroom entity.
type CleaningroomCreate struct {
	config
	mutation *CleaningroomMutation
	hooks    []Hook
}

// SetNote sets the note field.
func (cc *CleaningroomCreate) SetNote(s string) *CleaningroomCreate {
	cc.mutation.SetNote(s)
	return cc
}

// SetDateandstarttime sets the dateandstarttime field.
func (cc *CleaningroomCreate) SetDateandstarttime(t time.Time) *CleaningroomCreate {
	cc.mutation.SetDateandstarttime(t)
	return cc
}

// SetPhonenumber sets the phonenumber field.
func (cc *CleaningroomCreate) SetPhonenumber(s string) *CleaningroomCreate {
	cc.mutation.SetPhonenumber(s)
	return cc
}

// SetNumofem sets the numofem field.
func (cc *CleaningroomCreate) SetNumofem(i int) *CleaningroomCreate {
	cc.mutation.SetNumofem(i)
	return cc
}

// SetRoomdetailID sets the roomdetail edge to Roomdetail by id.
func (cc *CleaningroomCreate) SetRoomdetailID(id int) *CleaningroomCreate {
	cc.mutation.SetRoomdetailID(id)
	return cc
}

// SetNillableRoomdetailID sets the roomdetail edge to Roomdetail by id if the given value is not nil.
func (cc *CleaningroomCreate) SetNillableRoomdetailID(id *int) *CleaningroomCreate {
	if id != nil {
		cc = cc.SetRoomdetailID(*id)
	}
	return cc
}

// SetRoomdetail sets the roomdetail edge to Roomdetail.
func (cc *CleaningroomCreate) SetRoomdetail(r *Roomdetail) *CleaningroomCreate {
	return cc.SetRoomdetailID(r.ID)
}

// SetCleanernameID sets the Cleanername edge to Cleanername by id.
func (cc *CleaningroomCreate) SetCleanernameID(id int) *CleaningroomCreate {
	cc.mutation.SetCleanernameID(id)
	return cc
}

// SetNillableCleanernameID sets the Cleanername edge to Cleanername by id if the given value is not nil.
func (cc *CleaningroomCreate) SetNillableCleanernameID(id *int) *CleaningroomCreate {
	if id != nil {
		cc = cc.SetCleanernameID(*id)
	}
	return cc
}

// SetCleanername sets the Cleanername edge to Cleanername.
func (cc *CleaningroomCreate) SetCleanername(c *Cleanername) *CleaningroomCreate {
	return cc.SetCleanernameID(c.ID)
}

// SetLengthtimeID sets the Lengthtime edge to Lengthtime by id.
func (cc *CleaningroomCreate) SetLengthtimeID(id int) *CleaningroomCreate {
	cc.mutation.SetLengthtimeID(id)
	return cc
}

// SetNillableLengthtimeID sets the Lengthtime edge to Lengthtime by id if the given value is not nil.
func (cc *CleaningroomCreate) SetNillableLengthtimeID(id *int) *CleaningroomCreate {
	if id != nil {
		cc = cc.SetLengthtimeID(*id)
	}
	return cc
}

// SetLengthtime sets the Lengthtime edge to Lengthtime.
func (cc *CleaningroomCreate) SetLengthtime(l *Lengthtime) *CleaningroomCreate {
	return cc.SetLengthtimeID(l.ID)
}

// SetEmployeeID sets the Employee edge to Employee by id.
func (cc *CleaningroomCreate) SetEmployeeID(id int) *CleaningroomCreate {
	cc.mutation.SetEmployeeID(id)
	return cc
}

// SetNillableEmployeeID sets the Employee edge to Employee by id if the given value is not nil.
func (cc *CleaningroomCreate) SetNillableEmployeeID(id *int) *CleaningroomCreate {
	if id != nil {
		cc = cc.SetEmployeeID(*id)
	}
	return cc
}

// SetEmployee sets the Employee edge to Employee.
func (cc *CleaningroomCreate) SetEmployee(e *Employee) *CleaningroomCreate {
	return cc.SetEmployeeID(e.ID)
}

// Mutation returns the CleaningroomMutation object of the builder.
func (cc *CleaningroomCreate) Mutation() *CleaningroomMutation {
	return cc.mutation
}

// Save creates the Cleaningroom in the database.
func (cc *CleaningroomCreate) Save(ctx context.Context) (*Cleaningroom, error) {
	if _, ok := cc.mutation.Note(); !ok {
		return nil, &ValidationError{Name: "note", err: errors.New("ent: missing required field \"note\"")}
	}
	if v, ok := cc.mutation.Note(); ok {
		if err := cleaningroom.NoteValidator(v); err != nil {
			return nil, &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Dateandstarttime(); !ok {
		return nil, &ValidationError{Name: "dateandstarttime", err: errors.New("ent: missing required field \"dateandstarttime\"")}
	}
	if _, ok := cc.mutation.Phonenumber(); !ok {
		return nil, &ValidationError{Name: "phonenumber", err: errors.New("ent: missing required field \"phonenumber\"")}
	}
	if v, ok := cc.mutation.Phonenumber(); ok {
		if err := cleaningroom.PhonenumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "phonenumber", err: fmt.Errorf("ent: validator failed for field \"phonenumber\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Numofem(); !ok {
		return nil, &ValidationError{Name: "numofem", err: errors.New("ent: missing required field \"numofem\"")}
	}
	if v, ok := cc.mutation.Numofem(); ok {
		if err := cleaningroom.NumofemValidator(v); err != nil {
			return nil, &ValidationError{Name: "numofem", err: fmt.Errorf("ent: validator failed for field \"numofem\": %w", err)}
		}
	}
	var (
		err  error
		node *Cleaningroom
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CleaningroomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CleaningroomCreate) SaveX(ctx context.Context) *Cleaningroom {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CleaningroomCreate) sqlSave(ctx context.Context) (*Cleaningroom, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *CleaningroomCreate) createSpec() (*Cleaningroom, *sqlgraph.CreateSpec) {
	var (
		c     = &Cleaningroom{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cleaningroom.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cleaningroom.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Note(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cleaningroom.FieldNote,
		})
		c.Note = value
	}
	if value, ok := cc.mutation.Dateandstarttime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cleaningroom.FieldDateandstarttime,
		})
		c.Dateandstarttime = value
	}
	if value, ok := cc.mutation.Phonenumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cleaningroom.FieldPhonenumber,
		})
		c.Phonenumber = value
	}
	if value, ok := cc.mutation.Numofem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cleaningroom.FieldNumofem,
		})
		c.Numofem = value
	}
	if nodes := cc.mutation.RoomdetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.RoomdetailTable,
			Columns: []string{cleaningroom.RoomdetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CleanernameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.CleanernameTable,
			Columns: []string{cleaningroom.CleanernameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleanername.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.LengthtimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.LengthtimeTable,
			Columns: []string{cleaningroom.LengthtimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lengthtime.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.EmployeeTable,
			Columns: []string{cleaningroom.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
