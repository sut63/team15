// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/pledge"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/roomdetail"
)

// PledgeUpdate is the builder for updating Pledge entities.
type PledgeUpdate struct {
	config
	hooks      []Hook
	mutation   *PledgeMutation
	predicates []predicate.Pledge
}

// Where adds a new predicate for the builder.
func (pu *PledgeUpdate) Where(ps ...predicate.Pledge) *PledgeUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetProvision sets the provision field.
func (pu *PledgeUpdate) SetProvision(s string) *PledgeUpdate {
	pu.mutation.SetProvision(s)
	return pu
}

// AddRoomdetailIDs adds the roomdetails edge to Roomdetail by ids.
func (pu *PledgeUpdate) AddRoomdetailIDs(ids ...int) *PledgeUpdate {
	pu.mutation.AddRoomdetailIDs(ids...)
	return pu
}

// AddRoomdetails adds the roomdetails edges to Roomdetail.
func (pu *PledgeUpdate) AddRoomdetails(r ...*Roomdetail) *PledgeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRoomdetailIDs(ids...)
}

// Mutation returns the PledgeMutation object of the builder.
func (pu *PledgeUpdate) Mutation() *PledgeMutation {
	return pu.mutation
}

// RemoveRoomdetailIDs removes the roomdetails edge to Roomdetail by ids.
func (pu *PledgeUpdate) RemoveRoomdetailIDs(ids ...int) *PledgeUpdate {
	pu.mutation.RemoveRoomdetailIDs(ids...)
	return pu
}

// RemoveRoomdetails removes roomdetails edges to Roomdetail.
func (pu *PledgeUpdate) RemoveRoomdetails(r ...*Roomdetail) *PledgeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRoomdetailIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PledgeUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PledgeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PledgeUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PledgeUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PledgeUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PledgeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pledge.Table,
			Columns: pledge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pledge.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Provision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pledge.FieldProvision,
		})
	}
	if nodes := pu.mutation.RemovedRoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pledge.RoomdetailsTable,
			Columns: []string{pledge.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pledge.RoomdetailsTable,
			Columns: []string{pledge.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pledge.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PledgeUpdateOne is the builder for updating a single Pledge entity.
type PledgeUpdateOne struct {
	config
	hooks    []Hook
	mutation *PledgeMutation
}

// SetProvision sets the provision field.
func (puo *PledgeUpdateOne) SetProvision(s string) *PledgeUpdateOne {
	puo.mutation.SetProvision(s)
	return puo
}

// AddRoomdetailIDs adds the roomdetails edge to Roomdetail by ids.
func (puo *PledgeUpdateOne) AddRoomdetailIDs(ids ...int) *PledgeUpdateOne {
	puo.mutation.AddRoomdetailIDs(ids...)
	return puo
}

// AddRoomdetails adds the roomdetails edges to Roomdetail.
func (puo *PledgeUpdateOne) AddRoomdetails(r ...*Roomdetail) *PledgeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRoomdetailIDs(ids...)
}

// Mutation returns the PledgeMutation object of the builder.
func (puo *PledgeUpdateOne) Mutation() *PledgeMutation {
	return puo.mutation
}

// RemoveRoomdetailIDs removes the roomdetails edge to Roomdetail by ids.
func (puo *PledgeUpdateOne) RemoveRoomdetailIDs(ids ...int) *PledgeUpdateOne {
	puo.mutation.RemoveRoomdetailIDs(ids...)
	return puo
}

// RemoveRoomdetails removes roomdetails edges to Roomdetail.
func (puo *PledgeUpdateOne) RemoveRoomdetails(r ...*Roomdetail) *PledgeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRoomdetailIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PledgeUpdateOne) Save(ctx context.Context) (*Pledge, error) {

	var (
		err  error
		node *Pledge
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PledgeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PledgeUpdateOne) SaveX(ctx context.Context) *Pledge {
	pl, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pl
}

// Exec executes the query on the entity.
func (puo *PledgeUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PledgeUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PledgeUpdateOne) sqlSave(ctx context.Context) (pl *Pledge, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pledge.Table,
			Columns: pledge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pledge.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pledge.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Provision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pledge.FieldProvision,
		})
	}
	if nodes := puo.mutation.RemovedRoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pledge.RoomdetailsTable,
			Columns: []string{pledge.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pledge.RoomdetailsTable,
			Columns: []string{pledge.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pl = &Pledge{config: puo.config}
	_spec.Assign = pl.assignValues
	_spec.ScanValues = pl.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pledge.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pl, nil
}
