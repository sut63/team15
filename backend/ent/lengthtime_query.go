// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/lengthtime"
	"github.com/team15/app/ent/predicate"
)

// LengthTimeQuery is the builder for querying LengthTime entities.
type LengthTimeQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.LengthTime
	// eager-loading edges.
	withCleaningrooms *CleaningRoomQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (ltq *LengthTimeQuery) Where(ps ...predicate.LengthTime) *LengthTimeQuery {
	ltq.predicates = append(ltq.predicates, ps...)
	return ltq
}

// Limit adds a limit step to the query.
func (ltq *LengthTimeQuery) Limit(limit int) *LengthTimeQuery {
	ltq.limit = &limit
	return ltq
}

// Offset adds an offset step to the query.
func (ltq *LengthTimeQuery) Offset(offset int) *LengthTimeQuery {
	ltq.offset = &offset
	return ltq
}

// Order adds an order step to the query.
func (ltq *LengthTimeQuery) Order(o ...OrderFunc) *LengthTimeQuery {
	ltq.order = append(ltq.order, o...)
	return ltq
}

// QueryCleaningrooms chains the current query on the cleaningrooms edge.
func (ltq *LengthTimeQuery) QueryCleaningrooms() *CleaningRoomQuery {
	query := &CleaningRoomQuery{config: ltq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ltq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lengthtime.Table, lengthtime.FieldID, ltq.sqlQuery()),
			sqlgraph.To(cleaningroom.Table, cleaningroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lengthtime.CleaningroomsTable, lengthtime.CleaningroomsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ltq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LengthTime entity in the query. Returns *NotFoundError when no lengthtime was found.
func (ltq *LengthTimeQuery) First(ctx context.Context) (*LengthTime, error) {
	lts, err := ltq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(lts) == 0 {
		return nil, &NotFoundError{lengthtime.Label}
	}
	return lts[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ltq *LengthTimeQuery) FirstX(ctx context.Context) *LengthTime {
	lt, err := ltq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return lt
}

// FirstID returns the first LengthTime id in the query. Returns *NotFoundError when no id was found.
func (ltq *LengthTimeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ltq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lengthtime.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (ltq *LengthTimeQuery) FirstXID(ctx context.Context) int {
	id, err := ltq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only LengthTime entity in the query, returns an error if not exactly one entity was returned.
func (ltq *LengthTimeQuery) Only(ctx context.Context) (*LengthTime, error) {
	lts, err := ltq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(lts) {
	case 1:
		return lts[0], nil
	case 0:
		return nil, &NotFoundError{lengthtime.Label}
	default:
		return nil, &NotSingularError{lengthtime.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ltq *LengthTimeQuery) OnlyX(ctx context.Context) *LengthTime {
	lt, err := ltq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return lt
}

// OnlyID returns the only LengthTime id in the query, returns an error if not exactly one id was returned.
func (ltq *LengthTimeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ltq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lengthtime.Label}
	default:
		err = &NotSingularError{lengthtime.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ltq *LengthTimeQuery) OnlyIDX(ctx context.Context) int {
	id, err := ltq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LengthTimes.
func (ltq *LengthTimeQuery) All(ctx context.Context) ([]*LengthTime, error) {
	if err := ltq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ltq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ltq *LengthTimeQuery) AllX(ctx context.Context) []*LengthTime {
	lts, err := ltq.All(ctx)
	if err != nil {
		panic(err)
	}
	return lts
}

// IDs executes the query and returns a list of LengthTime ids.
func (ltq *LengthTimeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ltq.Select(lengthtime.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ltq *LengthTimeQuery) IDsX(ctx context.Context) []int {
	ids, err := ltq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ltq *LengthTimeQuery) Count(ctx context.Context) (int, error) {
	if err := ltq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ltq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ltq *LengthTimeQuery) CountX(ctx context.Context) int {
	count, err := ltq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ltq *LengthTimeQuery) Exist(ctx context.Context) (bool, error) {
	if err := ltq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ltq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ltq *LengthTimeQuery) ExistX(ctx context.Context) bool {
	exist, err := ltq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ltq *LengthTimeQuery) Clone() *LengthTimeQuery {
	return &LengthTimeQuery{
		config:     ltq.config,
		limit:      ltq.limit,
		offset:     ltq.offset,
		order:      append([]OrderFunc{}, ltq.order...),
		unique:     append([]string{}, ltq.unique...),
		predicates: append([]predicate.LengthTime{}, ltq.predicates...),
		// clone intermediate query.
		sql:  ltq.sql.Clone(),
		path: ltq.path,
	}
}

//  WithCleaningrooms tells the query-builder to eager-loads the nodes that are connected to
// the "cleaningrooms" edge. The optional arguments used to configure the query builder of the edge.
func (ltq *LengthTimeQuery) WithCleaningrooms(opts ...func(*CleaningRoomQuery)) *LengthTimeQuery {
	query := &CleaningRoomQuery{config: ltq.config}
	for _, opt := range opts {
		opt(query)
	}
	ltq.withCleaningrooms = query
	return ltq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Lengthtime string `json:"lengthtime,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LengthTime.Query().
//		GroupBy(lengthtime.FieldLengthtime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ltq *LengthTimeQuery) GroupBy(field string, fields ...string) *LengthTimeGroupBy {
	group := &LengthTimeGroupBy{config: ltq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ltq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ltq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Lengthtime string `json:"lengthtime,omitempty"`
//	}
//
//	client.LengthTime.Query().
//		Select(lengthtime.FieldLengthtime).
//		Scan(ctx, &v)
//
func (ltq *LengthTimeQuery) Select(field string, fields ...string) *LengthTimeSelect {
	selector := &LengthTimeSelect{config: ltq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ltq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ltq.sqlQuery(), nil
	}
	return selector
}

func (ltq *LengthTimeQuery) prepareQuery(ctx context.Context) error {
	if ltq.path != nil {
		prev, err := ltq.path(ctx)
		if err != nil {
			return err
		}
		ltq.sql = prev
	}
	return nil
}

func (ltq *LengthTimeQuery) sqlAll(ctx context.Context) ([]*LengthTime, error) {
	var (
		nodes       = []*LengthTime{}
		_spec       = ltq.querySpec()
		loadedTypes = [1]bool{
			ltq.withCleaningrooms != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &LengthTime{config: ltq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, ltq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ltq.withCleaningrooms; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*LengthTime)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.CleaningRoom(func(s *sql.Selector) {
			s.Where(sql.InValues(lengthtime.CleaningroomsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.lengthtime_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "lengthtime_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "lengthtime_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Cleaningrooms = append(node.Edges.Cleaningrooms, n)
		}
	}

	return nodes, nil
}

func (ltq *LengthTimeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ltq.querySpec()
	return sqlgraph.CountNodes(ctx, ltq.driver, _spec)
}

func (ltq *LengthTimeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ltq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (ltq *LengthTimeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lengthtime.Table,
			Columns: lengthtime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lengthtime.FieldID,
			},
		},
		From:   ltq.sql,
		Unique: true,
	}
	if ps := ltq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ltq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ltq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ltq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ltq *LengthTimeQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(ltq.driver.Dialect())
	t1 := builder.Table(lengthtime.Table)
	selector := builder.Select(t1.Columns(lengthtime.Columns...)...).From(t1)
	if ltq.sql != nil {
		selector = ltq.sql
		selector.Select(selector.Columns(lengthtime.Columns...)...)
	}
	for _, p := range ltq.predicates {
		p(selector)
	}
	for _, p := range ltq.order {
		p(selector)
	}
	if offset := ltq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ltq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LengthTimeGroupBy is the builder for group-by LengthTime entities.
type LengthTimeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ltgb *LengthTimeGroupBy) Aggregate(fns ...AggregateFunc) *LengthTimeGroupBy {
	ltgb.fns = append(ltgb.fns, fns...)
	return ltgb
}

// Scan applies the group-by query and scan the result into the given value.
func (ltgb *LengthTimeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ltgb.path(ctx)
	if err != nil {
		return err
	}
	ltgb.sql = query
	return ltgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ltgb *LengthTimeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ltgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (ltgb *LengthTimeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ltgb.fields) > 1 {
		return nil, errors.New("ent: LengthTimeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ltgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ltgb *LengthTimeGroupBy) StringsX(ctx context.Context) []string {
	v, err := ltgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (ltgb *LengthTimeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ltgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{lengthtime.Label}
	default:
		err = fmt.Errorf("ent: LengthTimeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ltgb *LengthTimeGroupBy) StringX(ctx context.Context) string {
	v, err := ltgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (ltgb *LengthTimeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ltgb.fields) > 1 {
		return nil, errors.New("ent: LengthTimeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ltgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ltgb *LengthTimeGroupBy) IntsX(ctx context.Context) []int {
	v, err := ltgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (ltgb *LengthTimeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ltgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{lengthtime.Label}
	default:
		err = fmt.Errorf("ent: LengthTimeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ltgb *LengthTimeGroupBy) IntX(ctx context.Context) int {
	v, err := ltgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (ltgb *LengthTimeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ltgb.fields) > 1 {
		return nil, errors.New("ent: LengthTimeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ltgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ltgb *LengthTimeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ltgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (ltgb *LengthTimeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ltgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{lengthtime.Label}
	default:
		err = fmt.Errorf("ent: LengthTimeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ltgb *LengthTimeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ltgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (ltgb *LengthTimeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ltgb.fields) > 1 {
		return nil, errors.New("ent: LengthTimeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ltgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ltgb *LengthTimeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ltgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (ltgb *LengthTimeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ltgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{lengthtime.Label}
	default:
		err = fmt.Errorf("ent: LengthTimeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ltgb *LengthTimeGroupBy) BoolX(ctx context.Context) bool {
	v, err := ltgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ltgb *LengthTimeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ltgb.sqlQuery().Query()
	if err := ltgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ltgb *LengthTimeGroupBy) sqlQuery() *sql.Selector {
	selector := ltgb.sql
	columns := make([]string, 0, len(ltgb.fields)+len(ltgb.fns))
	columns = append(columns, ltgb.fields...)
	for _, fn := range ltgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(ltgb.fields...)
}

// LengthTimeSelect is the builder for select fields of LengthTime entities.
type LengthTimeSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (lts *LengthTimeSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := lts.path(ctx)
	if err != nil {
		return err
	}
	lts.sql = query
	return lts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (lts *LengthTimeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := lts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (lts *LengthTimeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(lts.fields) > 1 {
		return nil, errors.New("ent: LengthTimeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := lts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (lts *LengthTimeSelect) StringsX(ctx context.Context) []string {
	v, err := lts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (lts *LengthTimeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = lts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{lengthtime.Label}
	default:
		err = fmt.Errorf("ent: LengthTimeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (lts *LengthTimeSelect) StringX(ctx context.Context) string {
	v, err := lts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (lts *LengthTimeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(lts.fields) > 1 {
		return nil, errors.New("ent: LengthTimeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := lts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (lts *LengthTimeSelect) IntsX(ctx context.Context) []int {
	v, err := lts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (lts *LengthTimeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = lts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{lengthtime.Label}
	default:
		err = fmt.Errorf("ent: LengthTimeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (lts *LengthTimeSelect) IntX(ctx context.Context) int {
	v, err := lts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (lts *LengthTimeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(lts.fields) > 1 {
		return nil, errors.New("ent: LengthTimeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := lts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (lts *LengthTimeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := lts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (lts *LengthTimeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = lts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{lengthtime.Label}
	default:
		err = fmt.Errorf("ent: LengthTimeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (lts *LengthTimeSelect) Float64X(ctx context.Context) float64 {
	v, err := lts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (lts *LengthTimeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(lts.fields) > 1 {
		return nil, errors.New("ent: LengthTimeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := lts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (lts *LengthTimeSelect) BoolsX(ctx context.Context) []bool {
	v, err := lts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (lts *LengthTimeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = lts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{lengthtime.Label}
	default:
		err = fmt.Errorf("ent: LengthTimeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (lts *LengthTimeSelect) BoolX(ctx context.Context) bool {
	v, err := lts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lts *LengthTimeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := lts.sqlQuery().Query()
	if err := lts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (lts *LengthTimeSelect) sqlQuery() sql.Querier {
	selector := lts.sql
	selector.Select(selector.Columns(lts.fields...)...)
	return selector
}
