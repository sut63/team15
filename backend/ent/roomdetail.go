// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/bedtype"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/jobposition"
	"github.com/team15/app/ent/lease"
	"github.com/team15/app/ent/petrule"
	"github.com/team15/app/ent/pledge"
	"github.com/team15/app/ent/roomdetail"
	"github.com/team15/app/ent/staytype"
)

// Roomdetail is the model entity for the Roomdetail schema.
type Roomdetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Roomnumber holds the value of the "roomnumber" field.
	Roomnumber string `json:"roomnumber,omitempty"`
	// Roomtypename holds the value of the "roomtypename" field.
	Roomtypename string `json:"roomtypename,omitempty"`
	// Roomprice holds the value of the "roomprice" field.
	Roomprice string `json:"roomprice,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Sleep holds the value of the "sleep" field.
	Sleep int `json:"sleep,omitempty"`
	// Bed holds the value of the "bed" field.
	Bed int `json:"bed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomdetailQuery when eager-loading is set.
	Edges                RoomdetailEdges `json:"edges"`
	bedtype_roomdetails  *int
	employee_id          *int
	roomdetail_id        *int
	petrule_roomdetails  *int
	pledge_roomdetails   *int
	staytype_roomdetails *int
}

// RoomdetailEdges holds the relations/edges for other nodes in the graph.
type RoomdetailEdges struct {
	// Pledge holds the value of the pledge edge.
	Pledge *Pledge
	// Petrule holds the value of the petrule edge.
	Petrule *Petrule
	// Bedtype holds the value of the bedtype edge.
	Bedtype *Bedtype
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Jobposition holds the value of the jobposition edge.
	Jobposition *Jobposition
	// Staytype holds the value of the staytype edge.
	Staytype *Staytype
	// Roomdetails holds the value of the roomdetails edge.
	Roomdetails *Lease
	// Cleaningrooms holds the value of the cleaningrooms edge.
	Cleaningrooms []*CleaningRoom
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// PledgeOrErr returns the Pledge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomdetailEdges) PledgeOrErr() (*Pledge, error) {
	if e.loadedTypes[0] {
		if e.Pledge == nil {
			// The edge pledge was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: pledge.Label}
		}
		return e.Pledge, nil
	}
	return nil, &NotLoadedError{edge: "pledge"}
}

// PetruleOrErr returns the Petrule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomdetailEdges) PetruleOrErr() (*Petrule, error) {
	if e.loadedTypes[1] {
		if e.Petrule == nil {
			// The edge petrule was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: petrule.Label}
		}
		return e.Petrule, nil
	}
	return nil, &NotLoadedError{edge: "petrule"}
}

// BedtypeOrErr returns the Bedtype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomdetailEdges) BedtypeOrErr() (*Bedtype, error) {
	if e.loadedTypes[2] {
		if e.Bedtype == nil {
			// The edge bedtype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: bedtype.Label}
		}
		return e.Bedtype, nil
	}
	return nil, &NotLoadedError{edge: "bedtype"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomdetailEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[3] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// JobpositionOrErr returns the Jobposition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomdetailEdges) JobpositionOrErr() (*Jobposition, error) {
	if e.loadedTypes[4] {
		if e.Jobposition == nil {
			// The edge jobposition was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: jobposition.Label}
		}
		return e.Jobposition, nil
	}
	return nil, &NotLoadedError{edge: "jobposition"}
}

// StaytypeOrErr returns the Staytype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomdetailEdges) StaytypeOrErr() (*Staytype, error) {
	if e.loadedTypes[5] {
		if e.Staytype == nil {
			// The edge staytype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: staytype.Label}
		}
		return e.Staytype, nil
	}
	return nil, &NotLoadedError{edge: "staytype"}
}

// RoomdetailsOrErr returns the Roomdetails value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomdetailEdges) RoomdetailsOrErr() (*Lease, error) {
	if e.loadedTypes[6] {
		if e.Roomdetails == nil {
			// The edge roomdetails was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: lease.Label}
		}
		return e.Roomdetails, nil
	}
	return nil, &NotLoadedError{edge: "roomdetails"}
}

// CleaningroomsOrErr returns the Cleaningrooms value or an error if the edge
// was not loaded in eager-loading.
func (e RoomdetailEdges) CleaningroomsOrErr() ([]*CleaningRoom, error) {
	if e.loadedTypes[7] {
		return e.Cleaningrooms, nil
	}
	return nil, &NotLoadedError{edge: "cleaningrooms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Roomdetail) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // roomnumber
		&sql.NullString{}, // roomtypename
		&sql.NullString{}, // roomprice
		&sql.NullString{}, // phone
		&sql.NullInt64{},  // sleep
		&sql.NullInt64{},  // bed
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Roomdetail) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // bedtype_roomdetails
		&sql.NullInt64{}, // employee_id
		&sql.NullInt64{}, // roomdetail_id
		&sql.NullInt64{}, // petrule_roomdetails
		&sql.NullInt64{}, // pledge_roomdetails
		&sql.NullInt64{}, // staytype_roomdetails
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Roomdetail fields.
func (r *Roomdetail) assignValues(values ...interface{}) error {
	if m, n := len(values), len(roomdetail.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field roomnumber", values[0])
	} else if value.Valid {
		r.Roomnumber = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field roomtypename", values[1])
	} else if value.Valid {
		r.Roomtypename = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field roomprice", values[2])
	} else if value.Valid {
		r.Roomprice = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field phone", values[3])
	} else if value.Valid {
		r.Phone = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field sleep", values[4])
	} else if value.Valid {
		r.Sleep = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field bed", values[5])
	} else if value.Valid {
		r.Bed = int(value.Int64)
	}
	values = values[6:]
	if len(values) == len(roomdetail.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field bedtype_roomdetails", value)
		} else if value.Valid {
			r.bedtype_roomdetails = new(int)
			*r.bedtype_roomdetails = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_id", value)
		} else if value.Valid {
			r.employee_id = new(int)
			*r.employee_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field roomdetail_id", value)
		} else if value.Valid {
			r.roomdetail_id = new(int)
			*r.roomdetail_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field petrule_roomdetails", value)
		} else if value.Valid {
			r.petrule_roomdetails = new(int)
			*r.petrule_roomdetails = int(value.Int64)
		}
		if value, ok := values[4].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field pledge_roomdetails", value)
		} else if value.Valid {
			r.pledge_roomdetails = new(int)
			*r.pledge_roomdetails = int(value.Int64)
		}
		if value, ok := values[5].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field staytype_roomdetails", value)
		} else if value.Valid {
			r.staytype_roomdetails = new(int)
			*r.staytype_roomdetails = int(value.Int64)
		}
	}
	return nil
}

// QueryPledge queries the pledge edge of the Roomdetail.
func (r *Roomdetail) QueryPledge() *PledgeQuery {
	return (&RoomdetailClient{config: r.config}).QueryPledge(r)
}

// QueryPetrule queries the petrule edge of the Roomdetail.
func (r *Roomdetail) QueryPetrule() *PetruleQuery {
	return (&RoomdetailClient{config: r.config}).QueryPetrule(r)
}

// QueryBedtype queries the bedtype edge of the Roomdetail.
func (r *Roomdetail) QueryBedtype() *BedtypeQuery {
	return (&RoomdetailClient{config: r.config}).QueryBedtype(r)
}

// QueryEmployee queries the employee edge of the Roomdetail.
func (r *Roomdetail) QueryEmployee() *EmployeeQuery {
	return (&RoomdetailClient{config: r.config}).QueryEmployee(r)
}

// QueryJobposition queries the jobposition edge of the Roomdetail.
func (r *Roomdetail) QueryJobposition() *JobpositionQuery {
	return (&RoomdetailClient{config: r.config}).QueryJobposition(r)
}

// QueryStaytype queries the staytype edge of the Roomdetail.
func (r *Roomdetail) QueryStaytype() *StaytypeQuery {
	return (&RoomdetailClient{config: r.config}).QueryStaytype(r)
}

// QueryRoomdetails queries the roomdetails edge of the Roomdetail.
func (r *Roomdetail) QueryRoomdetails() *LeaseQuery {
	return (&RoomdetailClient{config: r.config}).QueryRoomdetails(r)
}

// QueryCleaningrooms queries the cleaningrooms edge of the Roomdetail.
func (r *Roomdetail) QueryCleaningrooms() *CleaningRoomQuery {
	return (&RoomdetailClient{config: r.config}).QueryCleaningrooms(r)
}

// Update returns a builder for updating this Roomdetail.
// Note that, you need to call Roomdetail.Unwrap() before calling this method, if this Roomdetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Roomdetail) Update() *RoomdetailUpdateOne {
	return (&RoomdetailClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Roomdetail) Unwrap() *Roomdetail {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Roomdetail is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Roomdetail) String() string {
	var builder strings.Builder
	builder.WriteString("Roomdetail(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", roomnumber=")
	builder.WriteString(r.Roomnumber)
	builder.WriteString(", roomtypename=")
	builder.WriteString(r.Roomtypename)
	builder.WriteString(", roomprice=")
	builder.WriteString(r.Roomprice)
	builder.WriteString(", phone=")
	builder.WriteString(r.Phone)
	builder.WriteString(", sleep=")
	builder.WriteString(fmt.Sprintf("%v", r.Sleep))
	builder.WriteString(", bed=")
	builder.WriteString(fmt.Sprintf("%v", r.Bed))
	builder.WriteByte(')')
	return builder.String()
}

// Roomdetails is a parsable slice of Roomdetail.
type Roomdetails []*Roomdetail

func (r Roomdetails) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
