// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/bill"
	"github.com/team15/app/ent/deposit"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/lease"
	"github.com/team15/app/ent/roomdetail"
	"github.com/team15/app/ent/wifi"
)

// LeaseCreate is the builder for creating a Lease entity.
type LeaseCreate struct {
	config
	mutation *LeaseMutation
	hooks    []Hook
}

// SetAddedtime sets the addedtime field.
func (lc *LeaseCreate) SetAddedtime(t time.Time) *LeaseCreate {
	lc.mutation.SetAddedtime(t)
	return lc
}

// SetTenant sets the tenant field.
func (lc *LeaseCreate) SetTenant(s string) *LeaseCreate {
	lc.mutation.SetTenant(s)
	return lc
}

// SetWifiID sets the Wifi edge to Wifi by id.
func (lc *LeaseCreate) SetWifiID(id int) *LeaseCreate {
	lc.mutation.SetWifiID(id)
	return lc
}

// SetNillableWifiID sets the Wifi edge to Wifi by id if the given value is not nil.
func (lc *LeaseCreate) SetNillableWifiID(id *int) *LeaseCreate {
	if id != nil {
		lc = lc.SetWifiID(*id)
	}
	return lc
}

// SetWifi sets the Wifi edge to Wifi.
func (lc *LeaseCreate) SetWifi(w *Wifi) *LeaseCreate {
	return lc.SetWifiID(w.ID)
}

// SetRoomdetailID sets the Roomdetail edge to Roomdetail by id.
func (lc *LeaseCreate) SetRoomdetailID(id int) *LeaseCreate {
	lc.mutation.SetRoomdetailID(id)
	return lc
}

// SetRoomdetail sets the Roomdetail edge to Roomdetail.
func (lc *LeaseCreate) SetRoomdetail(r *Roomdetail) *LeaseCreate {
	return lc.SetRoomdetailID(r.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (lc *LeaseCreate) SetEmployeeID(id int) *LeaseCreate {
	lc.mutation.SetEmployeeID(id)
	return lc
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (lc *LeaseCreate) SetNillableEmployeeID(id *int) *LeaseCreate {
	if id != nil {
		lc = lc.SetEmployeeID(*id)
	}
	return lc
}

// SetEmployee sets the employee edge to Employee.
func (lc *LeaseCreate) SetEmployee(e *Employee) *LeaseCreate {
	return lc.SetEmployeeID(e.ID)
}

// AddLeaseIDs adds the leases edge to Deposit by ids.
func (lc *LeaseCreate) AddLeaseIDs(ids ...int) *LeaseCreate {
	lc.mutation.AddLeaseIDs(ids...)
	return lc
}

// AddLeases adds the leases edges to Deposit.
func (lc *LeaseCreate) AddLeases(d ...*Deposit) *LeaseCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return lc.AddLeaseIDs(ids...)
}

// AddBillIDs adds the bill edge to Bill by ids.
func (lc *LeaseCreate) AddBillIDs(ids ...int) *LeaseCreate {
	lc.mutation.AddBillIDs(ids...)
	return lc
}

// AddBill adds the bill edges to Bill.
func (lc *LeaseCreate) AddBill(b ...*Bill) *LeaseCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lc.AddBillIDs(ids...)
}

// Mutation returns the LeaseMutation object of the builder.
func (lc *LeaseCreate) Mutation() *LeaseMutation {
	return lc.mutation
}

// Save creates the Lease in the database.
func (lc *LeaseCreate) Save(ctx context.Context) (*Lease, error) {
	if _, ok := lc.mutation.Addedtime(); !ok {
		return nil, &ValidationError{Name: "addedtime", err: errors.New("ent: missing required field \"addedtime\"")}
	}
	if _, ok := lc.mutation.Tenant(); !ok {
		return nil, &ValidationError{Name: "tenant", err: errors.New("ent: missing required field \"tenant\"")}
	}
	if _, ok := lc.mutation.RoomdetailID(); !ok {
		return nil, &ValidationError{Name: "Roomdetail", err: errors.New("ent: missing required edge \"Roomdetail\"")}
	}
	var (
		err  error
		node *Lease
	)
	if len(lc.hooks) == 0 {
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LeaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lc.mutation = mutation
			node, err = lc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			mut = lc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LeaseCreate) SaveX(ctx context.Context) *Lease {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lc *LeaseCreate) sqlSave(ctx context.Context) (*Lease, error) {
	l, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	l.ID = int(id)
	return l, nil
}

func (lc *LeaseCreate) createSpec() (*Lease, *sqlgraph.CreateSpec) {
	var (
		l     = &Lease{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: lease.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lease.FieldID,
			},
		}
	)
	if value, ok := lc.mutation.Addedtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lease.FieldAddedtime,
		})
		l.Addedtime = value
	}
	if value, ok := lc.mutation.Tenant(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lease.FieldTenant,
		})
		l.Tenant = value
	}
	if nodes := lc.mutation.WifiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lease.WifiTable,
			Columns: []string{lease.WifiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wifi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.RoomdetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lease.RoomdetailTable,
			Columns: []string{lease.RoomdetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lease.EmployeeTable,
			Columns: []string{lease.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.LeasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lease.LeasesTable,
			Columns: []string{lease.LeasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deposit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.BillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lease.BillTable,
			Columns: []string{lease.BillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return l, _spec
}
