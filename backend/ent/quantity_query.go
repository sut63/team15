// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/quantity"
	"github.com/team15/app/ent/room"
)

// QuantityQuery is the builder for querying Quantity entities.
type QuantityQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.Quantity
	// eager-loading edges.
	withRoom *RoomQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (qq *QuantityQuery) Where(ps ...predicate.Quantity) *QuantityQuery {
	qq.predicates = append(qq.predicates, ps...)
	return qq
}

// Limit adds a limit step to the query.
func (qq *QuantityQuery) Limit(limit int) *QuantityQuery {
	qq.limit = &limit
	return qq
}

// Offset adds an offset step to the query.
func (qq *QuantityQuery) Offset(offset int) *QuantityQuery {
	qq.offset = &offset
	return qq
}

// Order adds an order step to the query.
func (qq *QuantityQuery) Order(o ...OrderFunc) *QuantityQuery {
	qq.order = append(qq.order, o...)
	return qq
}

// QueryRoom chains the current query on the room edge.
func (qq *QuantityQuery) QueryRoom() *RoomQuery {
	query := &RoomQuery{config: qq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(quantity.Table, quantity.FieldID, qq.sqlQuery()),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, quantity.RoomTable, quantity.RoomColumn),
		)
		fromU = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Quantity entity in the query. Returns *NotFoundError when no quantity was found.
func (qq *QuantityQuery) First(ctx context.Context) (*Quantity, error) {
	qs, err := qq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(qs) == 0 {
		return nil, &NotFoundError{quantity.Label}
	}
	return qs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qq *QuantityQuery) FirstX(ctx context.Context) *Quantity {
	q, err := qq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return q
}

// FirstID returns the first Quantity id in the query. Returns *NotFoundError when no id was found.
func (qq *QuantityQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{quantity.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (qq *QuantityQuery) FirstXID(ctx context.Context) int {
	id, err := qq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only Quantity entity in the query, returns an error if not exactly one entity was returned.
func (qq *QuantityQuery) Only(ctx context.Context) (*Quantity, error) {
	qs, err := qq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(qs) {
	case 1:
		return qs[0], nil
	case 0:
		return nil, &NotFoundError{quantity.Label}
	default:
		return nil, &NotSingularError{quantity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qq *QuantityQuery) OnlyX(ctx context.Context) *Quantity {
	q, err := qq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return q
}

// OnlyID returns the only Quantity id in the query, returns an error if not exactly one id was returned.
func (qq *QuantityQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{quantity.Label}
	default:
		err = &NotSingularError{quantity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qq *QuantityQuery) OnlyIDX(ctx context.Context) int {
	id, err := qq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Quantities.
func (qq *QuantityQuery) All(ctx context.Context) ([]*Quantity, error) {
	if err := qq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return qq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (qq *QuantityQuery) AllX(ctx context.Context) []*Quantity {
	qs, err := qq.All(ctx)
	if err != nil {
		panic(err)
	}
	return qs
}

// IDs executes the query and returns a list of Quantity ids.
func (qq *QuantityQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := qq.Select(quantity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qq *QuantityQuery) IDsX(ctx context.Context) []int {
	ids, err := qq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qq *QuantityQuery) Count(ctx context.Context) (int, error) {
	if err := qq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return qq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (qq *QuantityQuery) CountX(ctx context.Context) int {
	count, err := qq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qq *QuantityQuery) Exist(ctx context.Context) (bool, error) {
	if err := qq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return qq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (qq *QuantityQuery) ExistX(ctx context.Context) bool {
	exist, err := qq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qq *QuantityQuery) Clone() *QuantityQuery {
	return &QuantityQuery{
		config:     qq.config,
		limit:      qq.limit,
		offset:     qq.offset,
		order:      append([]OrderFunc{}, qq.order...),
		unique:     append([]string{}, qq.unique...),
		predicates: append([]predicate.Quantity{}, qq.predicates...),
		// clone intermediate query.
		sql:  qq.sql.Clone(),
		path: qq.path,
	}
}

//  WithRoom tells the query-builder to eager-loads the nodes that are connected to
// the "room" edge. The optional arguments used to configure the query builder of the edge.
func (qq *QuantityQuery) WithRoom(opts ...func(*RoomQuery)) *QuantityQuery {
	query := &RoomQuery{config: qq.config}
	for _, opt := range opts {
		opt(query)
	}
	qq.withRoom = query
	return qq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Quantity.Query().
//		GroupBy(quantity.FieldQuantity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (qq *QuantityQuery) GroupBy(field string, fields ...string) *QuantityGroupBy {
	group := &QuantityGroupBy{config: qq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return qq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//	}
//
//	client.Quantity.Query().
//		Select(quantity.FieldQuantity).
//		Scan(ctx, &v)
//
func (qq *QuantityQuery) Select(field string, fields ...string) *QuantitySelect {
	selector := &QuantitySelect{config: qq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return qq.sqlQuery(), nil
	}
	return selector
}

func (qq *QuantityQuery) prepareQuery(ctx context.Context) error {
	if qq.path != nil {
		prev, err := qq.path(ctx)
		if err != nil {
			return err
		}
		qq.sql = prev
	}
	return nil
}

func (qq *QuantityQuery) sqlAll(ctx context.Context) ([]*Quantity, error) {
	var (
		nodes       = []*Quantity{}
		_spec       = qq.querySpec()
		loadedTypes = [1]bool{
			qq.withRoom != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &Quantity{config: qq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, qq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := qq.withRoom; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Quantity)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Room(func(s *sql.Selector) {
			s.Where(sql.InValues(quantity.RoomColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.room_quantity
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "room_quantity" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "room_quantity" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Room = append(node.Edges.Room, n)
		}
	}

	return nodes, nil
}

func (qq *QuantityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qq.querySpec()
	return sqlgraph.CountNodes(ctx, qq.driver, _spec)
}

func (qq *QuantityQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := qq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (qq *QuantityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   quantity.Table,
			Columns: quantity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quantity.FieldID,
			},
		},
		From:   qq.sql,
		Unique: true,
	}
	if ps := qq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qq *QuantityQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(qq.driver.Dialect())
	t1 := builder.Table(quantity.Table)
	selector := builder.Select(t1.Columns(quantity.Columns...)...).From(t1)
	if qq.sql != nil {
		selector = qq.sql
		selector.Select(selector.Columns(quantity.Columns...)...)
	}
	for _, p := range qq.predicates {
		p(selector)
	}
	for _, p := range qq.order {
		p(selector)
	}
	if offset := qq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// QuantityGroupBy is the builder for group-by Quantity entities.
type QuantityGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qgb *QuantityGroupBy) Aggregate(fns ...AggregateFunc) *QuantityGroupBy {
	qgb.fns = append(qgb.fns, fns...)
	return qgb
}

// Scan applies the group-by query and scan the result into the given value.
func (qgb *QuantityGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := qgb.path(ctx)
	if err != nil {
		return err
	}
	qgb.sql = query
	return qgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (qgb *QuantityGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := qgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuantityGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuantityGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (qgb *QuantityGroupBy) StringsX(ctx context.Context) []string {
	v, err := qgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuantityGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = qgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quantity.Label}
	default:
		err = fmt.Errorf("ent: QuantityGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (qgb *QuantityGroupBy) StringX(ctx context.Context) string {
	v, err := qgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuantityGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuantityGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (qgb *QuantityGroupBy) IntsX(ctx context.Context) []int {
	v, err := qgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuantityGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = qgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quantity.Label}
	default:
		err = fmt.Errorf("ent: QuantityGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (qgb *QuantityGroupBy) IntX(ctx context.Context) int {
	v, err := qgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuantityGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuantityGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (qgb *QuantityGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := qgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuantityGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = qgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quantity.Label}
	default:
		err = fmt.Errorf("ent: QuantityGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (qgb *QuantityGroupBy) Float64X(ctx context.Context) float64 {
	v, err := qgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuantityGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuantityGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (qgb *QuantityGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := qgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuantityGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = qgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quantity.Label}
	default:
		err = fmt.Errorf("ent: QuantityGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (qgb *QuantityGroupBy) BoolX(ctx context.Context) bool {
	v, err := qgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (qgb *QuantityGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := qgb.sqlQuery().Query()
	if err := qgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (qgb *QuantityGroupBy) sqlQuery() *sql.Selector {
	selector := qgb.sql
	columns := make([]string, 0, len(qgb.fields)+len(qgb.fns))
	columns = append(columns, qgb.fields...)
	for _, fn := range qgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(qgb.fields...)
}

// QuantitySelect is the builder for select fields of Quantity entities.
type QuantitySelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (qs *QuantitySelect) Scan(ctx context.Context, v interface{}) error {
	query, err := qs.path(ctx)
	if err != nil {
		return err
	}
	qs.sql = query
	return qs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (qs *QuantitySelect) ScanX(ctx context.Context, v interface{}) {
	if err := qs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (qs *QuantitySelect) Strings(ctx context.Context) ([]string, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuantitySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (qs *QuantitySelect) StringsX(ctx context.Context) []string {
	v, err := qs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (qs *QuantitySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = qs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quantity.Label}
	default:
		err = fmt.Errorf("ent: QuantitySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (qs *QuantitySelect) StringX(ctx context.Context) string {
	v, err := qs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (qs *QuantitySelect) Ints(ctx context.Context) ([]int, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuantitySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (qs *QuantitySelect) IntsX(ctx context.Context) []int {
	v, err := qs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (qs *QuantitySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = qs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quantity.Label}
	default:
		err = fmt.Errorf("ent: QuantitySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (qs *QuantitySelect) IntX(ctx context.Context) int {
	v, err := qs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (qs *QuantitySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuantitySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (qs *QuantitySelect) Float64sX(ctx context.Context) []float64 {
	v, err := qs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (qs *QuantitySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = qs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quantity.Label}
	default:
		err = fmt.Errorf("ent: QuantitySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (qs *QuantitySelect) Float64X(ctx context.Context) float64 {
	v, err := qs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (qs *QuantitySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuantitySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (qs *QuantitySelect) BoolsX(ctx context.Context) []bool {
	v, err := qs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (qs *QuantitySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = qs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quantity.Label}
	default:
		err = fmt.Errorf("ent: QuantitySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (qs *QuantitySelect) BoolX(ctx context.Context) bool {
	v, err := qs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (qs *QuantitySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := qs.sqlQuery().Query()
	if err := qs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (qs *QuantitySelect) sqlQuery() sql.Querier {
	selector := qs.sql
	selector.Select(selector.Columns(qs.fields...)...)
	return selector
}
