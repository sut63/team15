// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/deposit"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/lease"
	"github.com/team15/app/ent/statusd"
)

// Deposit is the model entity for the Deposit schema.
type Deposit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Addedtime holds the value of the "addedtime" field.
	Addedtime time.Time `json:"addedtime,omitempty"`
	// Info holds the value of the "info" field.
	Info string `json:"info,omitempty"`
	// Depositorname holds the value of the "depositorname" field.
	Depositorname string `json:"depositorname,omitempty"`
	// Depositortell holds the value of the "depositortell" field.
	Depositortell string `json:"depositortell,omitempty"`
	// Recipienttell holds the value of the "recipienttell" field.
	Recipienttell string `json:"recipienttell,omitempty"`
	// Parcelcode holds the value of the "parcelcode" field.
	Parcelcode string `json:"parcelcode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DepositQuery when eager-loading is set.
	Edges       DepositEdges `json:"edges"`
	employee_id *int
	lease_id    *int
	statusd_id  *int
}

// DepositEdges holds the relations/edges for other nodes in the graph.
type DepositEdges struct {
	// Employee holds the value of the Employee edge.
	Employee *Employee
	// Statusd holds the value of the Statusd edge.
	Statusd *Statusd
	// Lease holds the value of the Lease edge.
	Lease *Lease
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DepositEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Employee == nil {
			// The edge Employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "Employee"}
}

// StatusdOrErr returns the Statusd value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DepositEdges) StatusdOrErr() (*Statusd, error) {
	if e.loadedTypes[1] {
		if e.Statusd == nil {
			// The edge Statusd was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusd.Label}
		}
		return e.Statusd, nil
	}
	return nil, &NotLoadedError{edge: "Statusd"}
}

// LeaseOrErr returns the Lease value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DepositEdges) LeaseOrErr() (*Lease, error) {
	if e.loadedTypes[2] {
		if e.Lease == nil {
			// The edge Lease was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: lease.Label}
		}
		return e.Lease, nil
	}
	return nil, &NotLoadedError{edge: "Lease"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deposit) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // addedtime
		&sql.NullString{}, // info
		&sql.NullString{}, // depositorname
		&sql.NullString{}, // depositortell
		&sql.NullString{}, // recipienttell
		&sql.NullString{}, // parcelcode
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Deposit) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // employee_id
		&sql.NullInt64{}, // lease_id
		&sql.NullInt64{}, // statusd_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deposit fields.
func (d *Deposit) assignValues(values ...interface{}) error {
	if m, n := len(values), len(deposit.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field addedtime", values[0])
	} else if value.Valid {
		d.Addedtime = value.Time
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field info", values[1])
	} else if value.Valid {
		d.Info = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field depositorname", values[2])
	} else if value.Valid {
		d.Depositorname = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field depositortell", values[3])
	} else if value.Valid {
		d.Depositortell = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field recipienttell", values[4])
	} else if value.Valid {
		d.Recipienttell = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field parcelcode", values[5])
	} else if value.Valid {
		d.Parcelcode = value.String
	}
	values = values[6:]
	if len(values) == len(deposit.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_id", value)
		} else if value.Valid {
			d.employee_id = new(int)
			*d.employee_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field lease_id", value)
		} else if value.Valid {
			d.lease_id = new(int)
			*d.lease_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field statusd_id", value)
		} else if value.Valid {
			d.statusd_id = new(int)
			*d.statusd_id = int(value.Int64)
		}
	}
	return nil
}

// QueryEmployee queries the Employee edge of the Deposit.
func (d *Deposit) QueryEmployee() *EmployeeQuery {
	return (&DepositClient{config: d.config}).QueryEmployee(d)
}

// QueryStatusd queries the Statusd edge of the Deposit.
func (d *Deposit) QueryStatusd() *StatusdQuery {
	return (&DepositClient{config: d.config}).QueryStatusd(d)
}

// QueryLease queries the Lease edge of the Deposit.
func (d *Deposit) QueryLease() *LeaseQuery {
	return (&DepositClient{config: d.config}).QueryLease(d)
}

// Update returns a builder for updating this Deposit.
// Note that, you need to call Deposit.Unwrap() before calling this method, if this Deposit
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deposit) Update() *DepositUpdateOne {
	return (&DepositClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Deposit) Unwrap() *Deposit {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deposit is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deposit) String() string {
	var builder strings.Builder
	builder.WriteString("Deposit(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", addedtime=")
	builder.WriteString(d.Addedtime.Format(time.ANSIC))
	builder.WriteString(", info=")
	builder.WriteString(d.Info)
	builder.WriteString(", depositorname=")
	builder.WriteString(d.Depositorname)
	builder.WriteString(", depositortell=")
	builder.WriteString(d.Depositortell)
	builder.WriteString(", recipienttell=")
	builder.WriteString(d.Recipienttell)
	builder.WriteString(", parcelcode=")
	builder.WriteString(d.Parcelcode)
	builder.WriteByte(')')
	return builder.String()
}

// Deposits is a parsable slice of Deposit.
type Deposits []*Deposit

func (d Deposits) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
