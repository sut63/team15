// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/staytype"
)

// StayType is the model entity for the StayType schema.
type StayType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Staytype holds the value of the "staytype" field.
	Staytype string `json:"staytype,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StayTypeQuery when eager-loading is set.
	Edges StayTypeEdges `json:"edges"`
}

// StayTypeEdges holds the relations/edges for other nodes in the graph.
type StayTypeEdges struct {
	// Room holds the value of the room edge.
	Room []*Room
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading.
func (e StayTypeEdges) RoomOrErr() ([]*Room, error) {
	if e.loadedTypes[0] {
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "room"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StayType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // staytype
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StayType fields.
func (st *StayType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(staytype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	st.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field staytype", values[0])
	} else if value.Valid {
		st.Staytype = value.String
	}
	return nil
}

// QueryRoom queries the room edge of the StayType.
func (st *StayType) QueryRoom() *RoomQuery {
	return (&StayTypeClient{config: st.config}).QueryRoom(st)
}

// Update returns a builder for updating this StayType.
// Note that, you need to call StayType.Unwrap() before calling this method, if this StayType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *StayType) Update() *StayTypeUpdateOne {
	return (&StayTypeClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (st *StayType) Unwrap() *StayType {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: StayType is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *StayType) String() string {
	var builder strings.Builder
	builder.WriteString("StayType(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", staytype=")
	builder.WriteString(st.Staytype)
	builder.WriteByte(')')
	return builder.String()
}

// StayTypes is a parsable slice of StayType.
type StayTypes []*StayType

func (st StayTypes) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
