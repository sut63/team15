// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/jobposition"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/roomdetail"
)

// JobpositionUpdate is the builder for updating Jobposition entities.
type JobpositionUpdate struct {
	config
	hooks      []Hook
	mutation   *JobpositionMutation
	predicates []predicate.Jobposition
}

// Where adds a new predicate for the builder.
func (ju *JobpositionUpdate) Where(ps ...predicate.Jobposition) *JobpositionUpdate {
	ju.predicates = append(ju.predicates, ps...)
	return ju
}

// SetPositionname sets the positionname field.
func (ju *JobpositionUpdate) SetPositionname(s string) *JobpositionUpdate {
	ju.mutation.SetPositionname(s)
	return ju
}

// AddEmployeeIDs adds the employees edge to Employee by ids.
func (ju *JobpositionUpdate) AddEmployeeIDs(ids ...int) *JobpositionUpdate {
	ju.mutation.AddEmployeeIDs(ids...)
	return ju
}

// AddEmployees adds the employees edges to Employee.
func (ju *JobpositionUpdate) AddEmployees(e ...*Employee) *JobpositionUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ju.AddEmployeeIDs(ids...)
}

// AddRoomdetailIDs adds the roomdetails edge to Roomdetail by ids.
func (ju *JobpositionUpdate) AddRoomdetailIDs(ids ...int) *JobpositionUpdate {
	ju.mutation.AddRoomdetailIDs(ids...)
	return ju
}

// AddRoomdetails adds the roomdetails edges to Roomdetail.
func (ju *JobpositionUpdate) AddRoomdetails(r ...*Roomdetail) *JobpositionUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ju.AddRoomdetailIDs(ids...)
}

// Mutation returns the JobpositionMutation object of the builder.
func (ju *JobpositionUpdate) Mutation() *JobpositionMutation {
	return ju.mutation
}

// RemoveEmployeeIDs removes the employees edge to Employee by ids.
func (ju *JobpositionUpdate) RemoveEmployeeIDs(ids ...int) *JobpositionUpdate {
	ju.mutation.RemoveEmployeeIDs(ids...)
	return ju
}

// RemoveEmployees removes employees edges to Employee.
func (ju *JobpositionUpdate) RemoveEmployees(e ...*Employee) *JobpositionUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ju.RemoveEmployeeIDs(ids...)
}

// RemoveRoomdetailIDs removes the roomdetails edge to Roomdetail by ids.
func (ju *JobpositionUpdate) RemoveRoomdetailIDs(ids ...int) *JobpositionUpdate {
	ju.mutation.RemoveRoomdetailIDs(ids...)
	return ju
}

// RemoveRoomdetails removes roomdetails edges to Roomdetail.
func (ju *JobpositionUpdate) RemoveRoomdetails(r ...*Roomdetail) *JobpositionUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ju.RemoveRoomdetailIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ju *JobpositionUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ju.hooks) == 0 {
		affected, err = ju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobpositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ju.mutation = mutation
			affected, err = ju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ju.hooks) - 1; i >= 0; i-- {
			mut = ju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobpositionUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobpositionUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobpositionUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ju *JobpositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jobposition.Table,
			Columns: jobposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jobposition.FieldID,
			},
		},
	}
	if ps := ju.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Positionname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobposition.FieldPositionname,
		})
	}
	if nodes := ju.mutation.RemovedEmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.EmployeesTable,
			Columns: []string{jobposition.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.EmployeesTable,
			Columns: []string{jobposition.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ju.mutation.RemovedRoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.RoomdetailsTable,
			Columns: []string{jobposition.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.RoomdetailsTable,
			Columns: []string{jobposition.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobposition.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// JobpositionUpdateOne is the builder for updating a single Jobposition entity.
type JobpositionUpdateOne struct {
	config
	hooks    []Hook
	mutation *JobpositionMutation
}

// SetPositionname sets the positionname field.
func (juo *JobpositionUpdateOne) SetPositionname(s string) *JobpositionUpdateOne {
	juo.mutation.SetPositionname(s)
	return juo
}

// AddEmployeeIDs adds the employees edge to Employee by ids.
func (juo *JobpositionUpdateOne) AddEmployeeIDs(ids ...int) *JobpositionUpdateOne {
	juo.mutation.AddEmployeeIDs(ids...)
	return juo
}

// AddEmployees adds the employees edges to Employee.
func (juo *JobpositionUpdateOne) AddEmployees(e ...*Employee) *JobpositionUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return juo.AddEmployeeIDs(ids...)
}

// AddRoomdetailIDs adds the roomdetails edge to Roomdetail by ids.
func (juo *JobpositionUpdateOne) AddRoomdetailIDs(ids ...int) *JobpositionUpdateOne {
	juo.mutation.AddRoomdetailIDs(ids...)
	return juo
}

// AddRoomdetails adds the roomdetails edges to Roomdetail.
func (juo *JobpositionUpdateOne) AddRoomdetails(r ...*Roomdetail) *JobpositionUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return juo.AddRoomdetailIDs(ids...)
}

// Mutation returns the JobpositionMutation object of the builder.
func (juo *JobpositionUpdateOne) Mutation() *JobpositionMutation {
	return juo.mutation
}

// RemoveEmployeeIDs removes the employees edge to Employee by ids.
func (juo *JobpositionUpdateOne) RemoveEmployeeIDs(ids ...int) *JobpositionUpdateOne {
	juo.mutation.RemoveEmployeeIDs(ids...)
	return juo
}

// RemoveEmployees removes employees edges to Employee.
func (juo *JobpositionUpdateOne) RemoveEmployees(e ...*Employee) *JobpositionUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return juo.RemoveEmployeeIDs(ids...)
}

// RemoveRoomdetailIDs removes the roomdetails edge to Roomdetail by ids.
func (juo *JobpositionUpdateOne) RemoveRoomdetailIDs(ids ...int) *JobpositionUpdateOne {
	juo.mutation.RemoveRoomdetailIDs(ids...)
	return juo
}

// RemoveRoomdetails removes roomdetails edges to Roomdetail.
func (juo *JobpositionUpdateOne) RemoveRoomdetails(r ...*Roomdetail) *JobpositionUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return juo.RemoveRoomdetailIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (juo *JobpositionUpdateOne) Save(ctx context.Context) (*Jobposition, error) {

	var (
		err  error
		node *Jobposition
	)
	if len(juo.hooks) == 0 {
		node, err = juo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobpositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			juo.mutation = mutation
			node, err = juo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(juo.hooks) - 1; i >= 0; i-- {
			mut = juo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, juo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobpositionUpdateOne) SaveX(ctx context.Context) *Jobposition {
	j, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return j
}

// Exec executes the query on the entity.
func (juo *JobpositionUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobpositionUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (juo *JobpositionUpdateOne) sqlSave(ctx context.Context) (j *Jobposition, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jobposition.Table,
			Columns: jobposition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jobposition.FieldID,
			},
		},
	}
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Jobposition.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := juo.mutation.Positionname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jobposition.FieldPositionname,
		})
	}
	if nodes := juo.mutation.RemovedEmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.EmployeesTable,
			Columns: []string{jobposition.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.EmployeesTable,
			Columns: []string{jobposition.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := juo.mutation.RemovedRoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.RoomdetailsTable,
			Columns: []string{jobposition.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RoomdetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobposition.RoomdetailsTable,
			Columns: []string{jobposition.RoomdetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	j = &Jobposition{config: juo.config}
	_spec.Assign = j.assignValues
	_spec.ScanValues = j.scanValues()
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobposition.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return j, nil
}
