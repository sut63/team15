// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/petrule"
)

// Petrule is the model entity for the Petrule schema.
type Petrule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Petrule holds the value of the "petrule" field.
	Petrule string `json:"petrule,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PetruleQuery when eager-loading is set.
	Edges PetruleEdges `json:"edges"`
}

// PetruleEdges holds the relations/edges for other nodes in the graph.
type PetruleEdges struct {
	// Roomdetails holds the value of the roomdetails edge.
	Roomdetails []*Roomdetail
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoomdetailsOrErr returns the Roomdetails value or an error if the edge
// was not loaded in eager-loading.
func (e PetruleEdges) RoomdetailsOrErr() ([]*Roomdetail, error) {
	if e.loadedTypes[0] {
		return e.Roomdetails, nil
	}
	return nil, &NotLoadedError{edge: "roomdetails"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Petrule) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // petrule
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Petrule fields.
func (pe *Petrule) assignValues(values ...interface{}) error {
	if m, n := len(values), len(petrule.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pe.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field petrule", values[0])
	} else if value.Valid {
		pe.Petrule = value.String
	}
	return nil
}

// QueryRoomdetails queries the roomdetails edge of the Petrule.
func (pe *Petrule) QueryRoomdetails() *RoomdetailQuery {
	return (&PetruleClient{config: pe.config}).QueryRoomdetails(pe)
}

// Update returns a builder for updating this Petrule.
// Note that, you need to call Petrule.Unwrap() before calling this method, if this Petrule
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Petrule) Update() *PetruleUpdateOne {
	return (&PetruleClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pe *Petrule) Unwrap() *Petrule {
	tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Petrule is not a transactional entity")
	}
	pe.config.driver = tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Petrule) String() string {
	var builder strings.Builder
	builder.WriteString("Petrule(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteString(", petrule=")
	builder.WriteString(pe.Petrule)
	builder.WriteByte(')')
	return builder.String()
}

// Petrules is a parsable slice of Petrule.
type Petrules []*Petrule

func (pe Petrules) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
