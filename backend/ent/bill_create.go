// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/bill"
	"github.com/team15/app/ent/lease"
	"github.com/team15/app/ent/payment"
	"github.com/team15/app/ent/situation"
)

// BillCreate is the builder for creating a Bill entity.
type BillCreate struct {
	config
	mutation *BillMutation
	hooks    []Hook
}

// SetAddedtime sets the addedtime field.
func (bc *BillCreate) SetAddedtime(t time.Time) *BillCreate {
	bc.mutation.SetAddedtime(t)
	return bc
}

// SetTell sets the tell field.
func (bc *BillCreate) SetTell(s string) *BillCreate {
	bc.mutation.SetTell(s)
	return bc
}

// SetTaxpayer sets the taxpayer field.
func (bc *BillCreate) SetTaxpayer(s string) *BillCreate {
	bc.mutation.SetTaxpayer(s)
	return bc
}

// SetTotal sets the total field.
func (bc *BillCreate) SetTotal(s string) *BillCreate {
	bc.mutation.SetTotal(s)
	return bc
}

// SetSituationID sets the Situation edge to Situation by id.
func (bc *BillCreate) SetSituationID(id int) *BillCreate {
	bc.mutation.SetSituationID(id)
	return bc
}

// SetNillableSituationID sets the Situation edge to Situation by id if the given value is not nil.
func (bc *BillCreate) SetNillableSituationID(id *int) *BillCreate {
	if id != nil {
		bc = bc.SetSituationID(*id)
	}
	return bc
}

// SetSituation sets the Situation edge to Situation.
func (bc *BillCreate) SetSituation(s *Situation) *BillCreate {
	return bc.SetSituationID(s.ID)
}

// SetPaymentID sets the Payment edge to Payment by id.
func (bc *BillCreate) SetPaymentID(id int) *BillCreate {
	bc.mutation.SetPaymentID(id)
	return bc
}

// SetNillablePaymentID sets the Payment edge to Payment by id if the given value is not nil.
func (bc *BillCreate) SetNillablePaymentID(id *int) *BillCreate {
	if id != nil {
		bc = bc.SetPaymentID(*id)
	}
	return bc
}

// SetPayment sets the Payment edge to Payment.
func (bc *BillCreate) SetPayment(p *Payment) *BillCreate {
	return bc.SetPaymentID(p.ID)
}

// SetLeaseID sets the Lease edge to Lease by id.
func (bc *BillCreate) SetLeaseID(id int) *BillCreate {
	bc.mutation.SetLeaseID(id)
	return bc
}

// SetNillableLeaseID sets the Lease edge to Lease by id if the given value is not nil.
func (bc *BillCreate) SetNillableLeaseID(id *int) *BillCreate {
	if id != nil {
		bc = bc.SetLeaseID(*id)
	}
	return bc
}

// SetLease sets the Lease edge to Lease.
func (bc *BillCreate) SetLease(l *Lease) *BillCreate {
	return bc.SetLeaseID(l.ID)
}

// Mutation returns the BillMutation object of the builder.
func (bc *BillCreate) Mutation() *BillMutation {
	return bc.mutation
}

// Save creates the Bill in the database.
func (bc *BillCreate) Save(ctx context.Context) (*Bill, error) {
	if _, ok := bc.mutation.Addedtime(); !ok {
		return nil, &ValidationError{Name: "addedtime", err: errors.New("ent: missing required field \"addedtime\"")}
	}
	if _, ok := bc.mutation.Tell(); !ok {
		return nil, &ValidationError{Name: "tell", err: errors.New("ent: missing required field \"tell\"")}
	}
	if _, ok := bc.mutation.Taxpayer(); !ok {
		return nil, &ValidationError{Name: "taxpayer", err: errors.New("ent: missing required field \"taxpayer\"")}
	}
	if _, ok := bc.mutation.Total(); !ok {
		return nil, &ValidationError{Name: "total", err: errors.New("ent: missing required field \"total\"")}
	}
	var (
		err  error
		node *Bill
	)
	if len(bc.hooks) == 0 {
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BillCreate) SaveX(ctx context.Context) *Bill {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bc *BillCreate) sqlSave(ctx context.Context) (*Bill, error) {
	b, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	b.ID = int(id)
	return b, nil
}

func (bc *BillCreate) createSpec() (*Bill, *sqlgraph.CreateSpec) {
	var (
		b     = &Bill{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bill.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bill.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.Addedtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bill.FieldAddedtime,
		})
		b.Addedtime = value
	}
	if value, ok := bc.mutation.Tell(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bill.FieldTell,
		})
		b.Tell = value
	}
	if value, ok := bc.mutation.Taxpayer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bill.FieldTaxpayer,
		})
		b.Taxpayer = value
	}
	if value, ok := bc.mutation.Total(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bill.FieldTotal,
		})
		b.Total = value
	}
	if nodes := bc.mutation.SituationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.SituationTable,
			Columns: []string{bill.SituationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: situation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.PaymentTable,
			Columns: []string{bill.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.LeaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.LeaseTable,
			Columns: []string{bill.LeaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return b, _spec
}
