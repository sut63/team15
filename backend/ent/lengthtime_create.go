// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/lengthtime"
)

// LengthtimeCreate is the builder for creating a Lengthtime entity.
type LengthtimeCreate struct {
	config
	mutation *LengthtimeMutation
	hooks    []Hook
}

// SetLengthtime sets the lengthtime field.
func (lc *LengthtimeCreate) SetLengthtime(s string) *LengthtimeCreate {
	lc.mutation.SetLengthtime(s)
	return lc
}

// AddCleaningroomIDs adds the cleaningrooms edge to Cleaningroom by ids.
func (lc *LengthtimeCreate) AddCleaningroomIDs(ids ...int) *LengthtimeCreate {
	lc.mutation.AddCleaningroomIDs(ids...)
	return lc
}

// AddCleaningrooms adds the cleaningrooms edges to Cleaningroom.
func (lc *LengthtimeCreate) AddCleaningrooms(c ...*Cleaningroom) *LengthtimeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lc.AddCleaningroomIDs(ids...)
}

// Mutation returns the LengthtimeMutation object of the builder.
func (lc *LengthtimeCreate) Mutation() *LengthtimeMutation {
	return lc.mutation
}

// Save creates the Lengthtime in the database.
func (lc *LengthtimeCreate) Save(ctx context.Context) (*Lengthtime, error) {
	if _, ok := lc.mutation.Lengthtime(); !ok {
		return nil, &ValidationError{Name: "lengthtime", err: errors.New("ent: missing required field \"lengthtime\"")}
	}
	if v, ok := lc.mutation.Lengthtime(); ok {
		if err := lengthtime.LengthtimeValidator(v); err != nil {
			return nil, &ValidationError{Name: "lengthtime", err: fmt.Errorf("ent: validator failed for field \"lengthtime\": %w", err)}
		}
	}
	var (
		err  error
		node *Lengthtime
	)
	if len(lc.hooks) == 0 {
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LengthtimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lc.mutation = mutation
			node, err = lc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			mut = lc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LengthtimeCreate) SaveX(ctx context.Context) *Lengthtime {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lc *LengthtimeCreate) sqlSave(ctx context.Context) (*Lengthtime, error) {
	l, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	l.ID = int(id)
	return l, nil
}

func (lc *LengthtimeCreate) createSpec() (*Lengthtime, *sqlgraph.CreateSpec) {
	var (
		l     = &Lengthtime{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: lengthtime.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lengthtime.FieldID,
			},
		}
	)
	if value, ok := lc.mutation.Lengthtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lengthtime.FieldLengthtime,
		})
		l.Lengthtime = value
	}
	if nodes := lc.mutation.CleaningroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lengthtime.CleaningroomsTable,
			Columns: []string{lengthtime.CleaningroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleaningroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return l, _spec
}
