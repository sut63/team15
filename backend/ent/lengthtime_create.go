// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/lengthtime"
)

// LengthTimeCreate is the builder for creating a LengthTime entity.
type LengthTimeCreate struct {
	config
	mutation *LengthTimeMutation
	hooks    []Hook
}

// SetLengthtime sets the lengthtime field.
func (ltc *LengthTimeCreate) SetLengthtime(s string) *LengthTimeCreate {
	ltc.mutation.SetLengthtime(s)
	return ltc
}

// AddCleaningroomIDs adds the cleaningrooms edge to CleaningRoom by ids.
func (ltc *LengthTimeCreate) AddCleaningroomIDs(ids ...int) *LengthTimeCreate {
	ltc.mutation.AddCleaningroomIDs(ids...)
	return ltc
}

// AddCleaningrooms adds the cleaningrooms edges to CleaningRoom.
func (ltc *LengthTimeCreate) AddCleaningrooms(c ...*CleaningRoom) *LengthTimeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ltc.AddCleaningroomIDs(ids...)
}

// Mutation returns the LengthTimeMutation object of the builder.
func (ltc *LengthTimeCreate) Mutation() *LengthTimeMutation {
	return ltc.mutation
}

// Save creates the LengthTime in the database.
func (ltc *LengthTimeCreate) Save(ctx context.Context) (*LengthTime, error) {
	if _, ok := ltc.mutation.Lengthtime(); !ok {
		return nil, &ValidationError{Name: "lengthtime", err: errors.New("ent: missing required field \"lengthtime\"")}
	}
	if v, ok := ltc.mutation.Lengthtime(); ok {
		if err := lengthtime.LengthtimeValidator(v); err != nil {
			return nil, &ValidationError{Name: "lengthtime", err: fmt.Errorf("ent: validator failed for field \"lengthtime\": %w", err)}
		}
	}
	var (
		err  error
		node *LengthTime
	)
	if len(ltc.hooks) == 0 {
		node, err = ltc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LengthTimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ltc.mutation = mutation
			node, err = ltc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ltc.hooks) - 1; i >= 0; i-- {
			mut = ltc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ltc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ltc *LengthTimeCreate) SaveX(ctx context.Context) *LengthTime {
	v, err := ltc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ltc *LengthTimeCreate) sqlSave(ctx context.Context) (*LengthTime, error) {
	lt, _spec := ltc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ltc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	lt.ID = int(id)
	return lt, nil
}

func (ltc *LengthTimeCreate) createSpec() (*LengthTime, *sqlgraph.CreateSpec) {
	var (
		lt    = &LengthTime{config: ltc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: lengthtime.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lengthtime.FieldID,
			},
		}
	)
	if value, ok := ltc.mutation.Lengthtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lengthtime.FieldLengthtime,
		})
		lt.Lengthtime = value
	}
	if nodes := ltc.mutation.CleaningroomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lengthtime.CleaningroomsTable,
			Columns: []string{lengthtime.CleaningroomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleaningroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return lt, _spec
}
