// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/bill"
	"github.com/team15/app/ent/payment"
	"github.com/team15/app/ent/situation"
)

// Bill is the model entity for the Bill schema.
type Bill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Addedtime holds the value of the "addedtime" field.
	Addedtime time.Time `json:"addedtime,omitempty"`
	// Total holds the value of the "total" field.
	Total int `json:"total,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillQuery when eager-loading is set.
	Edges        BillEdges `json:"edges"`
	payment_id   *int
	situation_id *int
}

// BillEdges holds the relations/edges for other nodes in the graph.
type BillEdges struct {
	// Situation holds the value of the Situation edge.
	Situation *Situation
	// Payment holds the value of the Payment edge.
	Payment *Payment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SituationOrErr returns the Situation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) SituationOrErr() (*Situation, error) {
	if e.loadedTypes[0] {
		if e.Situation == nil {
			// The edge Situation was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: situation.Label}
		}
		return e.Situation, nil
	}
	return nil, &NotLoadedError{edge: "Situation"}
}

// PaymentOrErr returns the Payment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) PaymentOrErr() (*Payment, error) {
	if e.loadedTypes[1] {
		if e.Payment == nil {
			// The edge Payment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: payment.Label}
		}
		return e.Payment, nil
	}
	return nil, &NotLoadedError{edge: "Payment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bill) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // addedtime
		&sql.NullInt64{}, // total
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Bill) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // payment_id
		&sql.NullInt64{}, // situation_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bill fields.
func (b *Bill) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bill.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field addedtime", values[0])
	} else if value.Valid {
		b.Addedtime = value.Time
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field total", values[1])
	} else if value.Valid {
		b.Total = int(value.Int64)
	}
	values = values[2:]
	if len(values) == len(bill.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field payment_id", value)
		} else if value.Valid {
			b.payment_id = new(int)
			*b.payment_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field situation_id", value)
		} else if value.Valid {
			b.situation_id = new(int)
			*b.situation_id = int(value.Int64)
		}
	}
	return nil
}

// QuerySituation queries the Situation edge of the Bill.
func (b *Bill) QuerySituation() *SituationQuery {
	return (&BillClient{config: b.config}).QuerySituation(b)
}

// QueryPayment queries the Payment edge of the Bill.
func (b *Bill) QueryPayment() *PaymentQuery {
	return (&BillClient{config: b.config}).QueryPayment(b)
}

// Update returns a builder for updating this Bill.
// Note that, you need to call Bill.Unwrap() before calling this method, if this Bill
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bill) Update() *BillUpdateOne {
	return (&BillClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Bill) Unwrap() *Bill {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bill is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bill) String() string {
	var builder strings.Builder
	builder.WriteString("Bill(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", addedtime=")
	builder.WriteString(b.Addedtime.Format(time.ANSIC))
	builder.WriteString(", total=")
	builder.WriteString(fmt.Sprintf("%v", b.Total))
	builder.WriteByte(')')
	return builder.String()
}

// Bills is a parsable slice of Bill.
type Bills []*Bill

func (b Bills) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
