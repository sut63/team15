// Code generated by entc, DO NOT EDIT.

package bill

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team15/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Addedtime applies equality check predicate on the "addedtime" field. It's identical to AddedtimeEQ.
func Addedtime(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedtime), v))
	})
}

// Tell applies equality check predicate on the "tell" field. It's identical to TellEQ.
func Tell(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTell), v))
	})
}

// Taxpayer applies equality check predicate on the "taxpayer" field. It's identical to TaxpayerEQ.
func Taxpayer(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxpayer), v))
	})
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotal), v))
	})
}

// AddedtimeEQ applies the EQ predicate on the "addedtime" field.
func AddedtimeEQ(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedtime), v))
	})
}

// AddedtimeNEQ applies the NEQ predicate on the "addedtime" field.
func AddedtimeNEQ(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddedtime), v))
	})
}

// AddedtimeIn applies the In predicate on the "addedtime" field.
func AddedtimeIn(vs ...time.Time) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddedtime), v...))
	})
}

// AddedtimeNotIn applies the NotIn predicate on the "addedtime" field.
func AddedtimeNotIn(vs ...time.Time) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddedtime), v...))
	})
}

// AddedtimeGT applies the GT predicate on the "addedtime" field.
func AddedtimeGT(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddedtime), v))
	})
}

// AddedtimeGTE applies the GTE predicate on the "addedtime" field.
func AddedtimeGTE(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddedtime), v))
	})
}

// AddedtimeLT applies the LT predicate on the "addedtime" field.
func AddedtimeLT(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddedtime), v))
	})
}

// AddedtimeLTE applies the LTE predicate on the "addedtime" field.
func AddedtimeLTE(v time.Time) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddedtime), v))
	})
}

// TellEQ applies the EQ predicate on the "tell" field.
func TellEQ(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTell), v))
	})
}

// TellNEQ applies the NEQ predicate on the "tell" field.
func TellNEQ(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTell), v))
	})
}

// TellIn applies the In predicate on the "tell" field.
func TellIn(vs ...string) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTell), v...))
	})
}

// TellNotIn applies the NotIn predicate on the "tell" field.
func TellNotIn(vs ...string) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTell), v...))
	})
}

// TellGT applies the GT predicate on the "tell" field.
func TellGT(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTell), v))
	})
}

// TellGTE applies the GTE predicate on the "tell" field.
func TellGTE(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTell), v))
	})
}

// TellLT applies the LT predicate on the "tell" field.
func TellLT(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTell), v))
	})
}

// TellLTE applies the LTE predicate on the "tell" field.
func TellLTE(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTell), v))
	})
}

// TellContains applies the Contains predicate on the "tell" field.
func TellContains(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTell), v))
	})
}

// TellHasPrefix applies the HasPrefix predicate on the "tell" field.
func TellHasPrefix(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTell), v))
	})
}

// TellHasSuffix applies the HasSuffix predicate on the "tell" field.
func TellHasSuffix(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTell), v))
	})
}

// TellEqualFold applies the EqualFold predicate on the "tell" field.
func TellEqualFold(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTell), v))
	})
}

// TellContainsFold applies the ContainsFold predicate on the "tell" field.
func TellContainsFold(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTell), v))
	})
}

// TaxpayerEQ applies the EQ predicate on the "taxpayer" field.
func TaxpayerEQ(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxpayer), v))
	})
}

// TaxpayerNEQ applies the NEQ predicate on the "taxpayer" field.
func TaxpayerNEQ(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxpayer), v))
	})
}

// TaxpayerIn applies the In predicate on the "taxpayer" field.
func TaxpayerIn(vs ...string) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaxpayer), v...))
	})
}

// TaxpayerNotIn applies the NotIn predicate on the "taxpayer" field.
func TaxpayerNotIn(vs ...string) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaxpayer), v...))
	})
}

// TaxpayerGT applies the GT predicate on the "taxpayer" field.
func TaxpayerGT(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxpayer), v))
	})
}

// TaxpayerGTE applies the GTE predicate on the "taxpayer" field.
func TaxpayerGTE(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxpayer), v))
	})
}

// TaxpayerLT applies the LT predicate on the "taxpayer" field.
func TaxpayerLT(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxpayer), v))
	})
}

// TaxpayerLTE applies the LTE predicate on the "taxpayer" field.
func TaxpayerLTE(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxpayer), v))
	})
}

// TaxpayerContains applies the Contains predicate on the "taxpayer" field.
func TaxpayerContains(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaxpayer), v))
	})
}

// TaxpayerHasPrefix applies the HasPrefix predicate on the "taxpayer" field.
func TaxpayerHasPrefix(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaxpayer), v))
	})
}

// TaxpayerHasSuffix applies the HasSuffix predicate on the "taxpayer" field.
func TaxpayerHasSuffix(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaxpayer), v))
	})
}

// TaxpayerEqualFold applies the EqualFold predicate on the "taxpayer" field.
func TaxpayerEqualFold(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaxpayer), v))
	})
}

// TaxpayerContainsFold applies the ContainsFold predicate on the "taxpayer" field.
func TaxpayerContainsFold(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaxpayer), v))
	})
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotal), v))
	})
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotal), v))
	})
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...string) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotal), v...))
	})
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...string) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotal), v...))
	})
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotal), v))
	})
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotal), v))
	})
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotal), v))
	})
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotal), v))
	})
}

// TotalContains applies the Contains predicate on the "total" field.
func TotalContains(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTotal), v))
	})
}

// TotalHasPrefix applies the HasPrefix predicate on the "total" field.
func TotalHasPrefix(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTotal), v))
	})
}

// TotalHasSuffix applies the HasSuffix predicate on the "total" field.
func TotalHasSuffix(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTotal), v))
	})
}

// TotalEqualFold applies the EqualFold predicate on the "total" field.
func TotalEqualFold(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTotal), v))
	})
}

// TotalContainsFold applies the ContainsFold predicate on the "total" field.
func TotalContainsFold(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTotal), v))
	})
}

// HasSituation applies the HasEdge predicate on the "Situation" edge.
func HasSituation() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SituationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SituationTable, SituationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSituationWith applies the HasEdge predicate on the "Situation" edge with a given conditions (other predicates).
func HasSituationWith(preds ...predicate.Situation) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SituationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SituationTable, SituationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayment applies the HasEdge predicate on the "Payment" edge.
func HasPayment() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentWith applies the HasEdge predicate on the "Payment" edge with a given conditions (other predicates).
func HasPaymentWith(preds ...predicate.Payment) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLease applies the HasEdge predicate on the "Lease" edge.
func HasLease() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LeaseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LeaseTable, LeaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeaseWith applies the HasEdge predicate on the "Lease" edge with a given conditions (other predicates).
func HasLeaseWith(preds ...predicate.Lease) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LeaseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LeaseTable, LeaseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		p(s.Not())
	})
}
