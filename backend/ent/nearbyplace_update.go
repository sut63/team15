// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/nearbyplace"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/room"
)

// NearbyPlaceUpdate is the builder for updating NearbyPlace entities.
type NearbyPlaceUpdate struct {
	config
	hooks      []Hook
	mutation   *NearbyPlaceMutation
	predicates []predicate.NearbyPlace
}

// Where adds a new predicate for the builder.
func (npu *NearbyPlaceUpdate) Where(ps ...predicate.NearbyPlace) *NearbyPlaceUpdate {
	npu.predicates = append(npu.predicates, ps...)
	return npu
}

// SetPlacename sets the placename field.
func (npu *NearbyPlaceUpdate) SetPlacename(s string) *NearbyPlaceUpdate {
	npu.mutation.SetPlacename(s)
	return npu
}

// AddRoomIDs adds the room edge to Room by ids.
func (npu *NearbyPlaceUpdate) AddRoomIDs(ids ...int) *NearbyPlaceUpdate {
	npu.mutation.AddRoomIDs(ids...)
	return npu
}

// AddRoom adds the room edges to Room.
func (npu *NearbyPlaceUpdate) AddRoom(r ...*Room) *NearbyPlaceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return npu.AddRoomIDs(ids...)
}

// Mutation returns the NearbyPlaceMutation object of the builder.
func (npu *NearbyPlaceUpdate) Mutation() *NearbyPlaceMutation {
	return npu.mutation
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (npu *NearbyPlaceUpdate) RemoveRoomIDs(ids ...int) *NearbyPlaceUpdate {
	npu.mutation.RemoveRoomIDs(ids...)
	return npu
}

// RemoveRoom removes room edges to Room.
func (npu *NearbyPlaceUpdate) RemoveRoom(r ...*Room) *NearbyPlaceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return npu.RemoveRoomIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (npu *NearbyPlaceUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(npu.hooks) == 0 {
		affected, err = npu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NearbyPlaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			npu.mutation = mutation
			affected, err = npu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(npu.hooks) - 1; i >= 0; i-- {
			mut = npu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, npu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (npu *NearbyPlaceUpdate) SaveX(ctx context.Context) int {
	affected, err := npu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (npu *NearbyPlaceUpdate) Exec(ctx context.Context) error {
	_, err := npu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npu *NearbyPlaceUpdate) ExecX(ctx context.Context) {
	if err := npu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (npu *NearbyPlaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nearbyplace.Table,
			Columns: nearbyplace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nearbyplace.FieldID,
			},
		},
	}
	if ps := npu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := npu.mutation.Placename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nearbyplace.FieldPlacename,
		})
	}
	if nodes := npu.mutation.RemovedRoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   nearbyplace.RoomTable,
			Columns: nearbyplace.RoomPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := npu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   nearbyplace.RoomTable,
			Columns: nearbyplace.RoomPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, npu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nearbyplace.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NearbyPlaceUpdateOne is the builder for updating a single NearbyPlace entity.
type NearbyPlaceUpdateOne struct {
	config
	hooks    []Hook
	mutation *NearbyPlaceMutation
}

// SetPlacename sets the placename field.
func (npuo *NearbyPlaceUpdateOne) SetPlacename(s string) *NearbyPlaceUpdateOne {
	npuo.mutation.SetPlacename(s)
	return npuo
}

// AddRoomIDs adds the room edge to Room by ids.
func (npuo *NearbyPlaceUpdateOne) AddRoomIDs(ids ...int) *NearbyPlaceUpdateOne {
	npuo.mutation.AddRoomIDs(ids...)
	return npuo
}

// AddRoom adds the room edges to Room.
func (npuo *NearbyPlaceUpdateOne) AddRoom(r ...*Room) *NearbyPlaceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return npuo.AddRoomIDs(ids...)
}

// Mutation returns the NearbyPlaceMutation object of the builder.
func (npuo *NearbyPlaceUpdateOne) Mutation() *NearbyPlaceMutation {
	return npuo.mutation
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (npuo *NearbyPlaceUpdateOne) RemoveRoomIDs(ids ...int) *NearbyPlaceUpdateOne {
	npuo.mutation.RemoveRoomIDs(ids...)
	return npuo
}

// RemoveRoom removes room edges to Room.
func (npuo *NearbyPlaceUpdateOne) RemoveRoom(r ...*Room) *NearbyPlaceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return npuo.RemoveRoomIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (npuo *NearbyPlaceUpdateOne) Save(ctx context.Context) (*NearbyPlace, error) {

	var (
		err  error
		node *NearbyPlace
	)
	if len(npuo.hooks) == 0 {
		node, err = npuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NearbyPlaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			npuo.mutation = mutation
			node, err = npuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(npuo.hooks) - 1; i >= 0; i-- {
			mut = npuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, npuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (npuo *NearbyPlaceUpdateOne) SaveX(ctx context.Context) *NearbyPlace {
	np, err := npuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return np
}

// Exec executes the query on the entity.
func (npuo *NearbyPlaceUpdateOne) Exec(ctx context.Context) error {
	_, err := npuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npuo *NearbyPlaceUpdateOne) ExecX(ctx context.Context) {
	if err := npuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (npuo *NearbyPlaceUpdateOne) sqlSave(ctx context.Context) (np *NearbyPlace, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nearbyplace.Table,
			Columns: nearbyplace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nearbyplace.FieldID,
			},
		},
	}
	id, ok := npuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NearbyPlace.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := npuo.mutation.Placename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nearbyplace.FieldPlacename,
		})
	}
	if nodes := npuo.mutation.RemovedRoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   nearbyplace.RoomTable,
			Columns: nearbyplace.RoomPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := npuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   nearbyplace.RoomTable,
			Columns: nearbyplace.RoomPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	np = &NearbyPlace{config: npuo.config}
	_spec.Assign = np.assignValues
	_spec.ScanValues = np.scanValues()
	if err = sqlgraph.UpdateNode(ctx, npuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nearbyplace.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return np, nil
}
