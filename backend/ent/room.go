// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/quantity"
	"github.com/team15/app/ent/room"
	"github.com/team15/app/ent/staytype"
)

// Room is the model entity for the Room schema.
type Room struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Roomprice holds the value of the "roomprice" field.
	Roomprice int `json:"roomprice,omitempty"`
	// Roomtypename holds the value of the "roomtypename" field.
	Roomtypename string `json:"roomtypename,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomQuery when eager-loading is set.
	Edges         RoomEdges `json:"edges"`
	room_quantity *int
	room_staytype *int
}

// RoomEdges holds the relations/edges for other nodes in the graph.
type RoomEdges struct {
	// Quantity holds the value of the quantity edge.
	Quantity *Quantity
	// Staytype holds the value of the staytype edge.
	Staytype *StayType
	// Facilities holds the value of the facilities edge.
	Facilities []*Facility
	// Equipments holds the value of the equipments edge.
	Equipments []*Equipment
	// Nearbyplace holds the value of the nearbyplace edge.
	Nearbyplace []*NearbyPlace
	// Cleaningrooms holds the value of the cleaningrooms edge.
	Cleaningrooms []*CleaningRoom
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// QuantityOrErr returns the Quantity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) QuantityOrErr() (*Quantity, error) {
	if e.loadedTypes[0] {
		if e.Quantity == nil {
			// The edge quantity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: quantity.Label}
		}
		return e.Quantity, nil
	}
	return nil, &NotLoadedError{edge: "quantity"}
}

// StaytypeOrErr returns the Staytype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) StaytypeOrErr() (*StayType, error) {
	if e.loadedTypes[1] {
		if e.Staytype == nil {
			// The edge staytype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: staytype.Label}
		}
		return e.Staytype, nil
	}
	return nil, &NotLoadedError{edge: "staytype"}
}

// FacilitiesOrErr returns the Facilities value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) FacilitiesOrErr() ([]*Facility, error) {
	if e.loadedTypes[2] {
		return e.Facilities, nil
	}
	return nil, &NotLoadedError{edge: "facilities"}
}

// EquipmentsOrErr returns the Equipments value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) EquipmentsOrErr() ([]*Equipment, error) {
	if e.loadedTypes[3] {
		return e.Equipments, nil
	}
	return nil, &NotLoadedError{edge: "equipments"}
}

// NearbyplaceOrErr returns the Nearbyplace value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) NearbyplaceOrErr() ([]*NearbyPlace, error) {
	if e.loadedTypes[4] {
		return e.Nearbyplace, nil
	}
	return nil, &NotLoadedError{edge: "nearbyplace"}
}

// CleaningroomsOrErr returns the Cleaningrooms value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) CleaningroomsOrErr() ([]*CleaningRoom, error) {
	if e.loadedTypes[5] {
		return e.Cleaningrooms, nil
	}
	return nil, &NotLoadedError{edge: "cleaningrooms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Room) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // roomprice
		&sql.NullString{}, // roomtypename
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Room) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // room_quantity
		&sql.NullInt64{}, // room_staytype
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Room fields.
func (r *Room) assignValues(values ...interface{}) error {
	if m, n := len(values), len(room.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field roomprice", values[0])
	} else if value.Valid {
		r.Roomprice = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field roomtypename", values[1])
	} else if value.Valid {
		r.Roomtypename = value.String
	}
	values = values[2:]
	if len(values) == len(room.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_quantity", value)
		} else if value.Valid {
			r.room_quantity = new(int)
			*r.room_quantity = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_staytype", value)
		} else if value.Valid {
			r.room_staytype = new(int)
			*r.room_staytype = int(value.Int64)
		}
	}
	return nil
}

// QueryQuantity queries the quantity edge of the Room.
func (r *Room) QueryQuantity() *QuantityQuery {
	return (&RoomClient{config: r.config}).QueryQuantity(r)
}

// QueryStaytype queries the staytype edge of the Room.
func (r *Room) QueryStaytype() *StayTypeQuery {
	return (&RoomClient{config: r.config}).QueryStaytype(r)
}

// QueryFacilities queries the facilities edge of the Room.
func (r *Room) QueryFacilities() *FacilityQuery {
	return (&RoomClient{config: r.config}).QueryFacilities(r)
}

// QueryEquipments queries the equipments edge of the Room.
func (r *Room) QueryEquipments() *EquipmentQuery {
	return (&RoomClient{config: r.config}).QueryEquipments(r)
}

// QueryNearbyplace queries the nearbyplace edge of the Room.
func (r *Room) QueryNearbyplace() *NearbyPlaceQuery {
	return (&RoomClient{config: r.config}).QueryNearbyplace(r)
}

// QueryCleaningrooms queries the cleaningrooms edge of the Room.
func (r *Room) QueryCleaningrooms() *CleaningRoomQuery {
	return (&RoomClient{config: r.config}).QueryCleaningrooms(r)
}

// Update returns a builder for updating this Room.
// Note that, you need to call Room.Unwrap() before calling this method, if this Room
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Room) Update() *RoomUpdateOne {
	return (&RoomClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Room) Unwrap() *Room {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Room is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Room) String() string {
	var builder strings.Builder
	builder.WriteString("Room(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", roomprice=")
	builder.WriteString(fmt.Sprintf("%v", r.Roomprice))
	builder.WriteString(", roomtypename=")
	builder.WriteString(r.Roomtypename)
	builder.WriteByte(')')
	return builder.String()
}

// Rooms is a parsable slice of Room.
type Rooms []*Room

func (r Rooms) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
