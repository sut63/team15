// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/cleanername"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/lengthtime"
	"github.com/team15/app/ent/room"
)

// CleaningRoom is the model entity for the CleaningRoom schema.
type CleaningRoom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Dateandstarttime holds the value of the "dateandstarttime" field.
	Dateandstarttime time.Time `json:"dateandstarttime,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CleaningRoomQuery when eager-loading is set.
	Edges              CleaningRoomEdges `json:"edges"`
	cleanerroom_id     *int
	lengthtime_id      *int
	room_cleaningrooms *int
}

// CleaningRoomEdges holds the relations/edges for other nodes in the graph.
type CleaningRoomEdges struct {
	// Room holds the value of the Room edge.
	Room *Room
	// CleanerName holds the value of the CleanerName edge.
	CleanerName *CleanerName
	// LengthTime holds the value of the LengthTime edge.
	LengthTime *LengthTime
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CleaningRoomEdges) RoomOrErr() (*Room, error) {
	if e.loadedTypes[0] {
		if e.Room == nil {
			// The edge Room was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "Room"}
}

// CleanerNameOrErr returns the CleanerName value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CleaningRoomEdges) CleanerNameOrErr() (*CleanerName, error) {
	if e.loadedTypes[1] {
		if e.CleanerName == nil {
			// The edge CleanerName was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cleanername.Label}
		}
		return e.CleanerName, nil
	}
	return nil, &NotLoadedError{edge: "CleanerName"}
}

// LengthTimeOrErr returns the LengthTime value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CleaningRoomEdges) LengthTimeOrErr() (*LengthTime, error) {
	if e.loadedTypes[2] {
		if e.LengthTime == nil {
			// The edge LengthTime was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: lengthtime.Label}
		}
		return e.LengthTime, nil
	}
	return nil, &NotLoadedError{edge: "LengthTime"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CleaningRoom) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // dateandstarttime
		&sql.NullString{}, // note
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*CleaningRoom) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // cleanerroom_id
		&sql.NullInt64{}, // lengthtime_id
		&sql.NullInt64{}, // room_cleaningrooms
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CleaningRoom fields.
func (cr *CleaningRoom) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cleaningroom.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field dateandstarttime", values[0])
	} else if value.Valid {
		cr.Dateandstarttime = value.Time
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field note", values[1])
	} else if value.Valid {
		cr.Note = value.String
	}
	values = values[2:]
	if len(values) == len(cleaningroom.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field cleanerroom_id", value)
		} else if value.Valid {
			cr.cleanerroom_id = new(int)
			*cr.cleanerroom_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field lengthtime_id", value)
		} else if value.Valid {
			cr.lengthtime_id = new(int)
			*cr.lengthtime_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_cleaningrooms", value)
		} else if value.Valid {
			cr.room_cleaningrooms = new(int)
			*cr.room_cleaningrooms = int(value.Int64)
		}
	}
	return nil
}

// QueryRoom queries the Room edge of the CleaningRoom.
func (cr *CleaningRoom) QueryRoom() *RoomQuery {
	return (&CleaningRoomClient{config: cr.config}).QueryRoom(cr)
}

// QueryCleanerName queries the CleanerName edge of the CleaningRoom.
func (cr *CleaningRoom) QueryCleanerName() *CleanerNameQuery {
	return (&CleaningRoomClient{config: cr.config}).QueryCleanerName(cr)
}

// QueryLengthTime queries the LengthTime edge of the CleaningRoom.
func (cr *CleaningRoom) QueryLengthTime() *LengthTimeQuery {
	return (&CleaningRoomClient{config: cr.config}).QueryLengthTime(cr)
}

// Update returns a builder for updating this CleaningRoom.
// Note that, you need to call CleaningRoom.Unwrap() before calling this method, if this CleaningRoom
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CleaningRoom) Update() *CleaningRoomUpdateOne {
	return (&CleaningRoomClient{config: cr.config}).UpdateOne(cr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cr *CleaningRoom) Unwrap() *CleaningRoom {
	tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CleaningRoom is not a transactional entity")
	}
	cr.config.driver = tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CleaningRoom) String() string {
	var builder strings.Builder
	builder.WriteString("CleaningRoom(")
	builder.WriteString(fmt.Sprintf("id=%v", cr.ID))
	builder.WriteString(", dateandstarttime=")
	builder.WriteString(cr.Dateandstarttime.Format(time.ANSIC))
	builder.WriteString(", note=")
	builder.WriteString(cr.Note)
	builder.WriteByte(')')
	return builder.String()
}

// CleaningRooms is a parsable slice of CleaningRoom.
type CleaningRooms []*CleaningRoom

func (cr CleaningRooms) config(cfg config) {
	for _i := range cr {
		cr[_i].config = cfg
	}
}
