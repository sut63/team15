// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team15/app/ent/cleanername"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/lengthtime"
	"github.com/team15/app/ent/roomdetail"
)

// Cleaningroom is the model entity for the Cleaningroom schema.
type Cleaningroom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Dateandstarttime holds the value of the "dateandstarttime" field.
	Dateandstarttime time.Time `json:"dateandstarttime,omitempty"`
	// Phonenumber holds the value of the "phonenumber" field.
	Phonenumber string `json:"phonenumber,omitempty"`
	// Numofem holds the value of the "numofem" field.
	Numofem int `json:"numofem,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CleaningroomQuery when eager-loading is set.
	Edges          CleaningroomEdges `json:"edges"`
	cleanerroom_id *int
	employee_id    *int
	lengthtime_id  *int
	roomdetail_id  *int
}

// CleaningroomEdges holds the relations/edges for other nodes in the graph.
type CleaningroomEdges struct {
	// Roomdetail holds the value of the roomdetail edge.
	Roomdetail *Roomdetail
	// Cleanername holds the value of the Cleanername edge.
	Cleanername *Cleanername
	// Lengthtime holds the value of the Lengthtime edge.
	Lengthtime *Lengthtime
	// Employee holds the value of the Employee edge.
	Employee *Employee
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RoomdetailOrErr returns the Roomdetail value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CleaningroomEdges) RoomdetailOrErr() (*Roomdetail, error) {
	if e.loadedTypes[0] {
		if e.Roomdetail == nil {
			// The edge roomdetail was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomdetail.Label}
		}
		return e.Roomdetail, nil
	}
	return nil, &NotLoadedError{edge: "roomdetail"}
}

// CleanernameOrErr returns the Cleanername value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CleaningroomEdges) CleanernameOrErr() (*Cleanername, error) {
	if e.loadedTypes[1] {
		if e.Cleanername == nil {
			// The edge Cleanername was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cleanername.Label}
		}
		return e.Cleanername, nil
	}
	return nil, &NotLoadedError{edge: "Cleanername"}
}

// LengthtimeOrErr returns the Lengthtime value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CleaningroomEdges) LengthtimeOrErr() (*Lengthtime, error) {
	if e.loadedTypes[2] {
		if e.Lengthtime == nil {
			// The edge Lengthtime was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: lengthtime.Label}
		}
		return e.Lengthtime, nil
	}
	return nil, &NotLoadedError{edge: "Lengthtime"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CleaningroomEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[3] {
		if e.Employee == nil {
			// The edge Employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "Employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cleaningroom) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // note
		&sql.NullTime{},   // dateandstarttime
		&sql.NullString{}, // phonenumber
		&sql.NullInt64{},  // numofem
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Cleaningroom) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // cleanerroom_id
		&sql.NullInt64{}, // employee_id
		&sql.NullInt64{}, // lengthtime_id
		&sql.NullInt64{}, // roomdetail_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cleaningroom fields.
func (c *Cleaningroom) assignValues(values ...interface{}) error {
	if m, n := len(values), len(cleaningroom.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field note", values[0])
	} else if value.Valid {
		c.Note = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field dateandstarttime", values[1])
	} else if value.Valid {
		c.Dateandstarttime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field phonenumber", values[2])
	} else if value.Valid {
		c.Phonenumber = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field numofem", values[3])
	} else if value.Valid {
		c.Numofem = int(value.Int64)
	}
	values = values[4:]
	if len(values) == len(cleaningroom.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field cleanerroom_id", value)
		} else if value.Valid {
			c.cleanerroom_id = new(int)
			*c.cleanerroom_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_id", value)
		} else if value.Valid {
			c.employee_id = new(int)
			*c.employee_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field lengthtime_id", value)
		} else if value.Valid {
			c.lengthtime_id = new(int)
			*c.lengthtime_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field roomdetail_id", value)
		} else if value.Valid {
			c.roomdetail_id = new(int)
			*c.roomdetail_id = int(value.Int64)
		}
	}
	return nil
}

// QueryRoomdetail queries the roomdetail edge of the Cleaningroom.
func (c *Cleaningroom) QueryRoomdetail() *RoomdetailQuery {
	return (&CleaningroomClient{config: c.config}).QueryRoomdetail(c)
}

// QueryCleanername queries the Cleanername edge of the Cleaningroom.
func (c *Cleaningroom) QueryCleanername() *CleanernameQuery {
	return (&CleaningroomClient{config: c.config}).QueryCleanername(c)
}

// QueryLengthtime queries the Lengthtime edge of the Cleaningroom.
func (c *Cleaningroom) QueryLengthtime() *LengthtimeQuery {
	return (&CleaningroomClient{config: c.config}).QueryLengthtime(c)
}

// QueryEmployee queries the Employee edge of the Cleaningroom.
func (c *Cleaningroom) QueryEmployee() *EmployeeQuery {
	return (&CleaningroomClient{config: c.config}).QueryEmployee(c)
}

// Update returns a builder for updating this Cleaningroom.
// Note that, you need to call Cleaningroom.Unwrap() before calling this method, if this Cleaningroom
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cleaningroom) Update() *CleaningroomUpdateOne {
	return (&CleaningroomClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Cleaningroom) Unwrap() *Cleaningroom {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cleaningroom is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cleaningroom) String() string {
	var builder strings.Builder
	builder.WriteString("Cleaningroom(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", note=")
	builder.WriteString(c.Note)
	builder.WriteString(", dateandstarttime=")
	builder.WriteString(c.Dateandstarttime.Format(time.ANSIC))
	builder.WriteString(", phonenumber=")
	builder.WriteString(c.Phonenumber)
	builder.WriteString(", numofem=")
	builder.WriteString(fmt.Sprintf("%v", c.Numofem))
	builder.WriteByte(')')
	return builder.String()
}

// Cleaningrooms is a parsable slice of Cleaningroom.
type Cleaningrooms []*Cleaningroom

func (c Cleaningrooms) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
