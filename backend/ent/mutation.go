// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/team15/app/ent/equipment"
	"github.com/team15/app/ent/facility"
	"github.com/team15/app/ent/nearbyplace"
	"github.com/team15/app/ent/quantity"
	"github.com/team15/app/ent/room"
	"github.com/team15/app/ent/staytype"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEquipment   = "Equipment"
	TypeFacility    = "Facility"
	TypeNearbyPlace = "NearbyPlace"
	TypeQuantity    = "Quantity"
	TypeRoom        = "Room"
	TypeStayType    = "StayType"
)

// EquipmentMutation represents an operation that mutate the EquipmentSlice
// nodes in the graph.
type EquipmentMutation struct {
	config
	op            Op
	typ           string
	id            *int
	equipment     *string
	clearedFields map[string]struct{}
	room          map[int]struct{}
	removedroom   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Equipment, error)
}

var _ ent.Mutation = (*EquipmentMutation)(nil)

// equipmentOption allows to manage the mutation configuration using functional options.
type equipmentOption func(*EquipmentMutation)

// newEquipmentMutation creates new mutation for $n.Name.
func newEquipmentMutation(c config, op Op, opts ...equipmentOption) *EquipmentMutation {
	m := &EquipmentMutation{
		config:        c,
		op:            op,
		typ:           TypeEquipment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEquipmentID sets the id field of the mutation.
func withEquipmentID(id int) equipmentOption {
	return func(m *EquipmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Equipment
		)
		m.oldValue = func(ctx context.Context) (*Equipment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Equipment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEquipment sets the old Equipment of the mutation.
func withEquipment(node *Equipment) equipmentOption {
	return func(m *EquipmentMutation) {
		m.oldValue = func(context.Context) (*Equipment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EquipmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EquipmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *EquipmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEquipment sets the equipment field.
func (m *EquipmentMutation) SetEquipment(s string) {
	m.equipment = &s
}

// Equipment returns the equipment value in the mutation.
func (m *EquipmentMutation) Equipment() (r string, exists bool) {
	v := m.equipment
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipment returns the old equipment value of the Equipment.
// If the Equipment object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EquipmentMutation) OldEquipment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEquipment is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEquipment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipment: %w", err)
	}
	return oldValue.Equipment, nil
}

// ResetEquipment reset all changes of the "equipment" field.
func (m *EquipmentMutation) ResetEquipment() {
	m.equipment = nil
}

// AddRoomIDs adds the room edge to Room by ids.
func (m *EquipmentMutation) AddRoomIDs(ids ...int) {
	if m.room == nil {
		m.room = make(map[int]struct{})
	}
	for i := range ids {
		m.room[ids[i]] = struct{}{}
	}
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (m *EquipmentMutation) RemoveRoomIDs(ids ...int) {
	if m.removedroom == nil {
		m.removedroom = make(map[int]struct{})
	}
	for i := range ids {
		m.removedroom[ids[i]] = struct{}{}
	}
}

// RemovedRoom returns the removed ids of room.
func (m *EquipmentMutation) RemovedRoomIDs() (ids []int) {
	for id := range m.removedroom {
		ids = append(ids, id)
	}
	return
}

// RoomIDs returns the room ids in the mutation.
func (m *EquipmentMutation) RoomIDs() (ids []int) {
	for id := range m.room {
		ids = append(ids, id)
	}
	return
}

// ResetRoom reset all changes of the "room" edge.
func (m *EquipmentMutation) ResetRoom() {
	m.room = nil
	m.removedroom = nil
}

// Op returns the operation name.
func (m *EquipmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Equipment).
func (m *EquipmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *EquipmentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.equipment != nil {
		fields = append(fields, equipment.FieldEquipment)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *EquipmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case equipment.FieldEquipment:
		return m.Equipment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *EquipmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case equipment.FieldEquipment:
		return m.OldEquipment(ctx)
	}
	return nil, fmt.Errorf("unknown Equipment field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EquipmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case equipment.FieldEquipment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipment(v)
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *EquipmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *EquipmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EquipmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Equipment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *EquipmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *EquipmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *EquipmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Equipment nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *EquipmentMutation) ResetField(name string) error {
	switch name {
	case equipment.FieldEquipment:
		m.ResetEquipment()
		return nil
	}
	return fmt.Errorf("unknown Equipment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *EquipmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.room != nil {
		edges = append(edges, equipment.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *EquipmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case equipment.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.room))
		for id := range m.room {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *EquipmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroom != nil {
		edges = append(edges, equipment.EdgeRoom)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *EquipmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case equipment.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.removedroom))
		for id := range m.removedroom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *EquipmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *EquipmentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *EquipmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Equipment unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *EquipmentMutation) ResetEdge(name string) error {
	switch name {
	case equipment.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown Equipment edge %s", name)
}

// FacilityMutation represents an operation that mutate the Facilities
// nodes in the graph.
type FacilityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	facility      *string
	clearedFields map[string]struct{}
	room          map[int]struct{}
	removedroom   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Facility, error)
}

var _ ent.Mutation = (*FacilityMutation)(nil)

// facilityOption allows to manage the mutation configuration using functional options.
type facilityOption func(*FacilityMutation)

// newFacilityMutation creates new mutation for $n.Name.
func newFacilityMutation(c config, op Op, opts ...facilityOption) *FacilityMutation {
	m := &FacilityMutation{
		config:        c,
		op:            op,
		typ:           TypeFacility,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFacilityID sets the id field of the mutation.
func withFacilityID(id int) facilityOption {
	return func(m *FacilityMutation) {
		var (
			err   error
			once  sync.Once
			value *Facility
		)
		m.oldValue = func(ctx context.Context) (*Facility, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Facility.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFacility sets the old Facility of the mutation.
func withFacility(node *Facility) facilityOption {
	return func(m *FacilityMutation) {
		m.oldValue = func(context.Context) (*Facility, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FacilityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FacilityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *FacilityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetFacility sets the facility field.
func (m *FacilityMutation) SetFacility(s string) {
	m.facility = &s
}

// Facility returns the facility value in the mutation.
func (m *FacilityMutation) Facility() (r string, exists bool) {
	v := m.facility
	if v == nil {
		return
	}
	return *v, true
}

// OldFacility returns the old facility value of the Facility.
// If the Facility object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FacilityMutation) OldFacility(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFacility is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFacility requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFacility: %w", err)
	}
	return oldValue.Facility, nil
}

// ResetFacility reset all changes of the "facility" field.
func (m *FacilityMutation) ResetFacility() {
	m.facility = nil
}

// AddRoomIDs adds the room edge to Room by ids.
func (m *FacilityMutation) AddRoomIDs(ids ...int) {
	if m.room == nil {
		m.room = make(map[int]struct{})
	}
	for i := range ids {
		m.room[ids[i]] = struct{}{}
	}
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (m *FacilityMutation) RemoveRoomIDs(ids ...int) {
	if m.removedroom == nil {
		m.removedroom = make(map[int]struct{})
	}
	for i := range ids {
		m.removedroom[ids[i]] = struct{}{}
	}
}

// RemovedRoom returns the removed ids of room.
func (m *FacilityMutation) RemovedRoomIDs() (ids []int) {
	for id := range m.removedroom {
		ids = append(ids, id)
	}
	return
}

// RoomIDs returns the room ids in the mutation.
func (m *FacilityMutation) RoomIDs() (ids []int) {
	for id := range m.room {
		ids = append(ids, id)
	}
	return
}

// ResetRoom reset all changes of the "room" edge.
func (m *FacilityMutation) ResetRoom() {
	m.room = nil
	m.removedroom = nil
}

// Op returns the operation name.
func (m *FacilityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Facility).
func (m *FacilityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *FacilityMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.facility != nil {
		fields = append(fields, facility.FieldFacility)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *FacilityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case facility.FieldFacility:
		return m.Facility()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *FacilityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case facility.FieldFacility:
		return m.OldFacility(ctx)
	}
	return nil, fmt.Errorf("unknown Facility field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FacilityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case facility.FieldFacility:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFacility(v)
		return nil
	}
	return fmt.Errorf("unknown Facility field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *FacilityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *FacilityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FacilityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Facility numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *FacilityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *FacilityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *FacilityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Facility nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *FacilityMutation) ResetField(name string) error {
	switch name {
	case facility.FieldFacility:
		m.ResetFacility()
		return nil
	}
	return fmt.Errorf("unknown Facility field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *FacilityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.room != nil {
		edges = append(edges, facility.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *FacilityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case facility.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.room))
		for id := range m.room {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *FacilityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroom != nil {
		edges = append(edges, facility.EdgeRoom)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *FacilityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case facility.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.removedroom))
		for id := range m.removedroom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *FacilityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *FacilityMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *FacilityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Facility unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *FacilityMutation) ResetEdge(name string) error {
	switch name {
	case facility.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown Facility edge %s", name)
}

// NearbyPlaceMutation represents an operation that mutate the NearbyPlaces
// nodes in the graph.
type NearbyPlaceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	placename     *string
	clearedFields map[string]struct{}
	room          map[int]struct{}
	removedroom   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*NearbyPlace, error)
}

var _ ent.Mutation = (*NearbyPlaceMutation)(nil)

// nearbyplaceOption allows to manage the mutation configuration using functional options.
type nearbyplaceOption func(*NearbyPlaceMutation)

// newNearbyPlaceMutation creates new mutation for $n.Name.
func newNearbyPlaceMutation(c config, op Op, opts ...nearbyplaceOption) *NearbyPlaceMutation {
	m := &NearbyPlaceMutation{
		config:        c,
		op:            op,
		typ:           TypeNearbyPlace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNearbyPlaceID sets the id field of the mutation.
func withNearbyPlaceID(id int) nearbyplaceOption {
	return func(m *NearbyPlaceMutation) {
		var (
			err   error
			once  sync.Once
			value *NearbyPlace
		)
		m.oldValue = func(ctx context.Context) (*NearbyPlace, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NearbyPlace.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNearbyPlace sets the old NearbyPlace of the mutation.
func withNearbyPlace(node *NearbyPlace) nearbyplaceOption {
	return func(m *NearbyPlaceMutation) {
		m.oldValue = func(context.Context) (*NearbyPlace, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NearbyPlaceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NearbyPlaceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *NearbyPlaceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPlacename sets the placename field.
func (m *NearbyPlaceMutation) SetPlacename(s string) {
	m.placename = &s
}

// Placename returns the placename value in the mutation.
func (m *NearbyPlaceMutation) Placename() (r string, exists bool) {
	v := m.placename
	if v == nil {
		return
	}
	return *v, true
}

// OldPlacename returns the old placename value of the NearbyPlace.
// If the NearbyPlace object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NearbyPlaceMutation) OldPlacename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPlacename is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPlacename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlacename: %w", err)
	}
	return oldValue.Placename, nil
}

// ResetPlacename reset all changes of the "placename" field.
func (m *NearbyPlaceMutation) ResetPlacename() {
	m.placename = nil
}

// AddRoomIDs adds the room edge to Room by ids.
func (m *NearbyPlaceMutation) AddRoomIDs(ids ...int) {
	if m.room == nil {
		m.room = make(map[int]struct{})
	}
	for i := range ids {
		m.room[ids[i]] = struct{}{}
	}
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (m *NearbyPlaceMutation) RemoveRoomIDs(ids ...int) {
	if m.removedroom == nil {
		m.removedroom = make(map[int]struct{})
	}
	for i := range ids {
		m.removedroom[ids[i]] = struct{}{}
	}
}

// RemovedRoom returns the removed ids of room.
func (m *NearbyPlaceMutation) RemovedRoomIDs() (ids []int) {
	for id := range m.removedroom {
		ids = append(ids, id)
	}
	return
}

// RoomIDs returns the room ids in the mutation.
func (m *NearbyPlaceMutation) RoomIDs() (ids []int) {
	for id := range m.room {
		ids = append(ids, id)
	}
	return
}

// ResetRoom reset all changes of the "room" edge.
func (m *NearbyPlaceMutation) ResetRoom() {
	m.room = nil
	m.removedroom = nil
}

// Op returns the operation name.
func (m *NearbyPlaceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NearbyPlace).
func (m *NearbyPlaceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *NearbyPlaceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.placename != nil {
		fields = append(fields, nearbyplace.FieldPlacename)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *NearbyPlaceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nearbyplace.FieldPlacename:
		return m.Placename()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *NearbyPlaceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nearbyplace.FieldPlacename:
		return m.OldPlacename(ctx)
	}
	return nil, fmt.Errorf("unknown NearbyPlace field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NearbyPlaceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nearbyplace.FieldPlacename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlacename(v)
		return nil
	}
	return fmt.Errorf("unknown NearbyPlace field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *NearbyPlaceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *NearbyPlaceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NearbyPlaceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NearbyPlace numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *NearbyPlaceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *NearbyPlaceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *NearbyPlaceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NearbyPlace nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *NearbyPlaceMutation) ResetField(name string) error {
	switch name {
	case nearbyplace.FieldPlacename:
		m.ResetPlacename()
		return nil
	}
	return fmt.Errorf("unknown NearbyPlace field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *NearbyPlaceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.room != nil {
		edges = append(edges, nearbyplace.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *NearbyPlaceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nearbyplace.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.room))
		for id := range m.room {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *NearbyPlaceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroom != nil {
		edges = append(edges, nearbyplace.EdgeRoom)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *NearbyPlaceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case nearbyplace.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.removedroom))
		for id := range m.removedroom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *NearbyPlaceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *NearbyPlaceMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *NearbyPlaceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown NearbyPlace unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *NearbyPlaceMutation) ResetEdge(name string) error {
	switch name {
	case nearbyplace.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown NearbyPlace edge %s", name)
}

// QuantityMutation represents an operation that mutate the Quantities
// nodes in the graph.
type QuantityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	quantity      *int
	addquantity   *int
	clearedFields map[string]struct{}
	room          map[int]struct{}
	removedroom   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Quantity, error)
}

var _ ent.Mutation = (*QuantityMutation)(nil)

// quantityOption allows to manage the mutation configuration using functional options.
type quantityOption func(*QuantityMutation)

// newQuantityMutation creates new mutation for $n.Name.
func newQuantityMutation(c config, op Op, opts ...quantityOption) *QuantityMutation {
	m := &QuantityMutation{
		config:        c,
		op:            op,
		typ:           TypeQuantity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuantityID sets the id field of the mutation.
func withQuantityID(id int) quantityOption {
	return func(m *QuantityMutation) {
		var (
			err   error
			once  sync.Once
			value *Quantity
		)
		m.oldValue = func(ctx context.Context) (*Quantity, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Quantity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuantity sets the old Quantity of the mutation.
func withQuantity(node *Quantity) quantityOption {
	return func(m *QuantityMutation) {
		m.oldValue = func(context.Context) (*Quantity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuantityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuantityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *QuantityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetQuantity sets the quantity field.
func (m *QuantityMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the quantity value in the mutation.
func (m *QuantityMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old quantity value of the Quantity.
// If the Quantity object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QuantityMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuantity is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to quantity.
func (m *QuantityMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the quantity field in this mutation.
func (m *QuantityMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity reset all changes of the "quantity" field.
func (m *QuantityMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// AddRoomIDs adds the room edge to Room by ids.
func (m *QuantityMutation) AddRoomIDs(ids ...int) {
	if m.room == nil {
		m.room = make(map[int]struct{})
	}
	for i := range ids {
		m.room[ids[i]] = struct{}{}
	}
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (m *QuantityMutation) RemoveRoomIDs(ids ...int) {
	if m.removedroom == nil {
		m.removedroom = make(map[int]struct{})
	}
	for i := range ids {
		m.removedroom[ids[i]] = struct{}{}
	}
}

// RemovedRoom returns the removed ids of room.
func (m *QuantityMutation) RemovedRoomIDs() (ids []int) {
	for id := range m.removedroom {
		ids = append(ids, id)
	}
	return
}

// RoomIDs returns the room ids in the mutation.
func (m *QuantityMutation) RoomIDs() (ids []int) {
	for id := range m.room {
		ids = append(ids, id)
	}
	return
}

// ResetRoom reset all changes of the "room" edge.
func (m *QuantityMutation) ResetRoom() {
	m.room = nil
	m.removedroom = nil
}

// Op returns the operation name.
func (m *QuantityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Quantity).
func (m *QuantityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *QuantityMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.quantity != nil {
		fields = append(fields, quantity.FieldQuantity)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *QuantityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case quantity.FieldQuantity:
		return m.Quantity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *QuantityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case quantity.FieldQuantity:
		return m.OldQuantity(ctx)
	}
	return nil, fmt.Errorf("unknown Quantity field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *QuantityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case quantity.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown Quantity field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *QuantityMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, quantity.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *QuantityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case quantity.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *QuantityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case quantity.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown Quantity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *QuantityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *QuantityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuantityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Quantity nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *QuantityMutation) ResetField(name string) error {
	switch name {
	case quantity.FieldQuantity:
		m.ResetQuantity()
		return nil
	}
	return fmt.Errorf("unknown Quantity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *QuantityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.room != nil {
		edges = append(edges, quantity.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *QuantityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case quantity.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.room))
		for id := range m.room {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *QuantityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroom != nil {
		edges = append(edges, quantity.EdgeRoom)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *QuantityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case quantity.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.removedroom))
		for id := range m.removedroom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *QuantityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *QuantityMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *QuantityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Quantity unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *QuantityMutation) ResetEdge(name string) error {
	switch name {
	case quantity.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown Quantity edge %s", name)
}

// RoomMutation represents an operation that mutate the Rooms
// nodes in the graph.
type RoomMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	roomprice          *int
	addroomprice       *int
	roomtypename       *string
	clearedFields      map[string]struct{}
	quantity           *int
	clearedquantity    bool
	staytype           *int
	clearedstaytype    bool
	facilities         map[int]struct{}
	removedfacilities  map[int]struct{}
	equipments         map[int]struct{}
	removedequipments  map[int]struct{}
	nearbyplace        map[int]struct{}
	removednearbyplace map[int]struct{}
	done               bool
	oldValue           func(context.Context) (*Room, error)
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows to manage the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for $n.Name.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the id field of the mutation.
func withRoomID(id int) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRoomprice sets the roomprice field.
func (m *RoomMutation) SetRoomprice(i int) {
	m.roomprice = &i
	m.addroomprice = nil
}

// Roomprice returns the roomprice value in the mutation.
func (m *RoomMutation) Roomprice() (r int, exists bool) {
	v := m.roomprice
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomprice returns the old roomprice value of the Room.
// If the Room object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomMutation) OldRoomprice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoomprice is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoomprice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomprice: %w", err)
	}
	return oldValue.Roomprice, nil
}

// AddRoomprice adds i to roomprice.
func (m *RoomMutation) AddRoomprice(i int) {
	if m.addroomprice != nil {
		*m.addroomprice += i
	} else {
		m.addroomprice = &i
	}
}

// AddedRoomprice returns the value that was added to the roomprice field in this mutation.
func (m *RoomMutation) AddedRoomprice() (r int, exists bool) {
	v := m.addroomprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoomprice reset all changes of the "roomprice" field.
func (m *RoomMutation) ResetRoomprice() {
	m.roomprice = nil
	m.addroomprice = nil
}

// SetRoomtypename sets the roomtypename field.
func (m *RoomMutation) SetRoomtypename(s string) {
	m.roomtypename = &s
}

// Roomtypename returns the roomtypename value in the mutation.
func (m *RoomMutation) Roomtypename() (r string, exists bool) {
	v := m.roomtypename
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomtypename returns the old roomtypename value of the Room.
// If the Room object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomMutation) OldRoomtypename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoomtypename is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoomtypename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomtypename: %w", err)
	}
	return oldValue.Roomtypename, nil
}

// ResetRoomtypename reset all changes of the "roomtypename" field.
func (m *RoomMutation) ResetRoomtypename() {
	m.roomtypename = nil
}

// SetQuantityID sets the quantity edge to Quantity by id.
func (m *RoomMutation) SetQuantityID(id int) {
	m.quantity = &id
}

// ClearQuantity clears the quantity edge to Quantity.
func (m *RoomMutation) ClearQuantity() {
	m.clearedquantity = true
}

// QuantityCleared returns if the edge quantity was cleared.
func (m *RoomMutation) QuantityCleared() bool {
	return m.clearedquantity
}

// QuantityID returns the quantity id in the mutation.
func (m *RoomMutation) QuantityID() (id int, exists bool) {
	if m.quantity != nil {
		return *m.quantity, true
	}
	return
}

// QuantityIDs returns the quantity ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// QuantityID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) QuantityIDs() (ids []int) {
	if id := m.quantity; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuantity reset all changes of the "quantity" edge.
func (m *RoomMutation) ResetQuantity() {
	m.quantity = nil
	m.clearedquantity = false
}

// SetStaytypeID sets the staytype edge to StayType by id.
func (m *RoomMutation) SetStaytypeID(id int) {
	m.staytype = &id
}

// ClearStaytype clears the staytype edge to StayType.
func (m *RoomMutation) ClearStaytype() {
	m.clearedstaytype = true
}

// StaytypeCleared returns if the edge staytype was cleared.
func (m *RoomMutation) StaytypeCleared() bool {
	return m.clearedstaytype
}

// StaytypeID returns the staytype id in the mutation.
func (m *RoomMutation) StaytypeID() (id int, exists bool) {
	if m.staytype != nil {
		return *m.staytype, true
	}
	return
}

// StaytypeIDs returns the staytype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// StaytypeID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) StaytypeIDs() (ids []int) {
	if id := m.staytype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStaytype reset all changes of the "staytype" edge.
func (m *RoomMutation) ResetStaytype() {
	m.staytype = nil
	m.clearedstaytype = false
}

// AddFacilityIDs adds the facilities edge to Facility by ids.
func (m *RoomMutation) AddFacilityIDs(ids ...int) {
	if m.facilities == nil {
		m.facilities = make(map[int]struct{})
	}
	for i := range ids {
		m.facilities[ids[i]] = struct{}{}
	}
}

// RemoveFacilityIDs removes the facilities edge to Facility by ids.
func (m *RoomMutation) RemoveFacilityIDs(ids ...int) {
	if m.removedfacilities == nil {
		m.removedfacilities = make(map[int]struct{})
	}
	for i := range ids {
		m.removedfacilities[ids[i]] = struct{}{}
	}
}

// RemovedFacilities returns the removed ids of facilities.
func (m *RoomMutation) RemovedFacilitiesIDs() (ids []int) {
	for id := range m.removedfacilities {
		ids = append(ids, id)
	}
	return
}

// FacilitiesIDs returns the facilities ids in the mutation.
func (m *RoomMutation) FacilitiesIDs() (ids []int) {
	for id := range m.facilities {
		ids = append(ids, id)
	}
	return
}

// ResetFacilities reset all changes of the "facilities" edge.
func (m *RoomMutation) ResetFacilities() {
	m.facilities = nil
	m.removedfacilities = nil
}

// AddEquipmentIDs adds the equipments edge to Equipment by ids.
func (m *RoomMutation) AddEquipmentIDs(ids ...int) {
	if m.equipments == nil {
		m.equipments = make(map[int]struct{})
	}
	for i := range ids {
		m.equipments[ids[i]] = struct{}{}
	}
}

// RemoveEquipmentIDs removes the equipments edge to Equipment by ids.
func (m *RoomMutation) RemoveEquipmentIDs(ids ...int) {
	if m.removedequipments == nil {
		m.removedequipments = make(map[int]struct{})
	}
	for i := range ids {
		m.removedequipments[ids[i]] = struct{}{}
	}
}

// RemovedEquipments returns the removed ids of equipments.
func (m *RoomMutation) RemovedEquipmentsIDs() (ids []int) {
	for id := range m.removedequipments {
		ids = append(ids, id)
	}
	return
}

// EquipmentsIDs returns the equipments ids in the mutation.
func (m *RoomMutation) EquipmentsIDs() (ids []int) {
	for id := range m.equipments {
		ids = append(ids, id)
	}
	return
}

// ResetEquipments reset all changes of the "equipments" edge.
func (m *RoomMutation) ResetEquipments() {
	m.equipments = nil
	m.removedequipments = nil
}

// AddNearbyplaceIDs adds the nearbyplace edge to NearbyPlace by ids.
func (m *RoomMutation) AddNearbyplaceIDs(ids ...int) {
	if m.nearbyplace == nil {
		m.nearbyplace = make(map[int]struct{})
	}
	for i := range ids {
		m.nearbyplace[ids[i]] = struct{}{}
	}
}

// RemoveNearbyplaceIDs removes the nearbyplace edge to NearbyPlace by ids.
func (m *RoomMutation) RemoveNearbyplaceIDs(ids ...int) {
	if m.removednearbyplace == nil {
		m.removednearbyplace = make(map[int]struct{})
	}
	for i := range ids {
		m.removednearbyplace[ids[i]] = struct{}{}
	}
}

// RemovedNearbyplace returns the removed ids of nearbyplace.
func (m *RoomMutation) RemovedNearbyplaceIDs() (ids []int) {
	for id := range m.removednearbyplace {
		ids = append(ids, id)
	}
	return
}

// NearbyplaceIDs returns the nearbyplace ids in the mutation.
func (m *RoomMutation) NearbyplaceIDs() (ids []int) {
	for id := range m.nearbyplace {
		ids = append(ids, id)
	}
	return
}

// ResetNearbyplace reset all changes of the "nearbyplace" edge.
func (m *RoomMutation) ResetNearbyplace() {
	m.nearbyplace = nil
	m.removednearbyplace = nil
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.roomprice != nil {
		fields = append(fields, room.FieldRoomprice)
	}
	if m.roomtypename != nil {
		fields = append(fields, room.FieldRoomtypename)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case room.FieldRoomprice:
		return m.Roomprice()
	case room.FieldRoomtypename:
		return m.Roomtypename()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case room.FieldRoomprice:
		return m.OldRoomprice(ctx)
	case room.FieldRoomtypename:
		return m.OldRoomtypename(ctx)
	}
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case room.FieldRoomprice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomprice(v)
		return nil
	case room.FieldRoomtypename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomtypename(v)
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomMutation) AddedFields() []string {
	var fields []string
	if m.addroomprice != nil {
		fields = append(fields, room.FieldRoomprice)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case room.FieldRoomprice:
		return m.AddedRoomprice()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	case room.FieldRoomprice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoomprice(v)
		return nil
	}
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	switch name {
	case room.FieldRoomprice:
		m.ResetRoomprice()
		return nil
	case room.FieldRoomtypename:
		m.ResetRoomtypename()
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.quantity != nil {
		edges = append(edges, room.EdgeQuantity)
	}
	if m.staytype != nil {
		edges = append(edges, room.EdgeStaytype)
	}
	if m.facilities != nil {
		edges = append(edges, room.EdgeFacilities)
	}
	if m.equipments != nil {
		edges = append(edges, room.EdgeEquipments)
	}
	if m.nearbyplace != nil {
		edges = append(edges, room.EdgeNearbyplace)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeQuantity:
		if id := m.quantity; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgeStaytype:
		if id := m.staytype; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgeFacilities:
		ids := make([]ent.Value, 0, len(m.facilities))
		for id := range m.facilities {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeEquipments:
		ids := make([]ent.Value, 0, len(m.equipments))
		for id := range m.equipments {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeNearbyplace:
		ids := make([]ent.Value, 0, len(m.nearbyplace))
		for id := range m.nearbyplace {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedfacilities != nil {
		edges = append(edges, room.EdgeFacilities)
	}
	if m.removedequipments != nil {
		edges = append(edges, room.EdgeEquipments)
	}
	if m.removednearbyplace != nil {
		edges = append(edges, room.EdgeNearbyplace)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeFacilities:
		ids := make([]ent.Value, 0, len(m.removedfacilities))
		for id := range m.removedfacilities {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeEquipments:
		ids := make([]ent.Value, 0, len(m.removedequipments))
		for id := range m.removedequipments {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeNearbyplace:
		ids := make([]ent.Value, 0, len(m.removednearbyplace))
		for id := range m.removednearbyplace {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedquantity {
		edges = append(edges, room.EdgeQuantity)
	}
	if m.clearedstaytype {
		edges = append(edges, room.EdgeStaytype)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeQuantity:
		return m.clearedquantity
	case room.EdgeStaytype:
		return m.clearedstaytype
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	case room.EdgeQuantity:
		m.ClearQuantity()
		return nil
	case room.EdgeStaytype:
		m.ClearStaytype()
		return nil
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeQuantity:
		m.ResetQuantity()
		return nil
	case room.EdgeStaytype:
		m.ResetStaytype()
		return nil
	case room.EdgeFacilities:
		m.ResetFacilities()
		return nil
	case room.EdgeEquipments:
		m.ResetEquipments()
		return nil
	case room.EdgeNearbyplace:
		m.ResetNearbyplace()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}

// StayTypeMutation represents an operation that mutate the StayTypes
// nodes in the graph.
type StayTypeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	staytype      *string
	clearedFields map[string]struct{}
	room          map[int]struct{}
	removedroom   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*StayType, error)
}

var _ ent.Mutation = (*StayTypeMutation)(nil)

// staytypeOption allows to manage the mutation configuration using functional options.
type staytypeOption func(*StayTypeMutation)

// newStayTypeMutation creates new mutation for $n.Name.
func newStayTypeMutation(c config, op Op, opts ...staytypeOption) *StayTypeMutation {
	m := &StayTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeStayType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStayTypeID sets the id field of the mutation.
func withStayTypeID(id int) staytypeOption {
	return func(m *StayTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *StayType
		)
		m.oldValue = func(ctx context.Context) (*StayType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StayType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStayType sets the old StayType of the mutation.
func withStayType(node *StayType) staytypeOption {
	return func(m *StayTypeMutation) {
		m.oldValue = func(context.Context) (*StayType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StayTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StayTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *StayTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStaytype sets the staytype field.
func (m *StayTypeMutation) SetStaytype(s string) {
	m.staytype = &s
}

// Staytype returns the staytype value in the mutation.
func (m *StayTypeMutation) Staytype() (r string, exists bool) {
	v := m.staytype
	if v == nil {
		return
	}
	return *v, true
}

// OldStaytype returns the old staytype value of the StayType.
// If the StayType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *StayTypeMutation) OldStaytype(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStaytype is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStaytype requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStaytype: %w", err)
	}
	return oldValue.Staytype, nil
}

// ResetStaytype reset all changes of the "staytype" field.
func (m *StayTypeMutation) ResetStaytype() {
	m.staytype = nil
}

// AddRoomIDs adds the room edge to Room by ids.
func (m *StayTypeMutation) AddRoomIDs(ids ...int) {
	if m.room == nil {
		m.room = make(map[int]struct{})
	}
	for i := range ids {
		m.room[ids[i]] = struct{}{}
	}
}

// RemoveRoomIDs removes the room edge to Room by ids.
func (m *StayTypeMutation) RemoveRoomIDs(ids ...int) {
	if m.removedroom == nil {
		m.removedroom = make(map[int]struct{})
	}
	for i := range ids {
		m.removedroom[ids[i]] = struct{}{}
	}
}

// RemovedRoom returns the removed ids of room.
func (m *StayTypeMutation) RemovedRoomIDs() (ids []int) {
	for id := range m.removedroom {
		ids = append(ids, id)
	}
	return
}

// RoomIDs returns the room ids in the mutation.
func (m *StayTypeMutation) RoomIDs() (ids []int) {
	for id := range m.room {
		ids = append(ids, id)
	}
	return
}

// ResetRoom reset all changes of the "room" edge.
func (m *StayTypeMutation) ResetRoom() {
	m.room = nil
	m.removedroom = nil
}

// Op returns the operation name.
func (m *StayTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StayType).
func (m *StayTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *StayTypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.staytype != nil {
		fields = append(fields, staytype.FieldStaytype)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *StayTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case staytype.FieldStaytype:
		return m.Staytype()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *StayTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case staytype.FieldStaytype:
		return m.OldStaytype(ctx)
	}
	return nil, fmt.Errorf("unknown StayType field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StayTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case staytype.FieldStaytype:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStaytype(v)
		return nil
	}
	return fmt.Errorf("unknown StayType field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *StayTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *StayTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StayTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StayType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *StayTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *StayTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *StayTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StayType nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *StayTypeMutation) ResetField(name string) error {
	switch name {
	case staytype.FieldStaytype:
		m.ResetStaytype()
		return nil
	}
	return fmt.Errorf("unknown StayType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *StayTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.room != nil {
		edges = append(edges, staytype.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *StayTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case staytype.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.room))
		for id := range m.room {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *StayTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroom != nil {
		edges = append(edges, staytype.EdgeRoom)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *StayTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case staytype.EdgeRoom:
		ids := make([]ent.Value, 0, len(m.removedroom))
		for id := range m.removedroom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *StayTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *StayTypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *StayTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown StayType unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *StayTypeMutation) ResetEdge(name string) error {
	switch name {
	case staytype.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown StayType edge %s", name)
}
