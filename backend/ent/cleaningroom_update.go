// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/cleanername"
	"github.com/team15/app/ent/cleaningroom"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/lengthtime"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/roomdetail"
)

// CleaningroomUpdate is the builder for updating Cleaningroom entities.
type CleaningroomUpdate struct {
	config
	hooks      []Hook
	mutation   *CleaningroomMutation
	predicates []predicate.Cleaningroom
}

// Where adds a new predicate for the builder.
func (cu *CleaningroomUpdate) Where(ps ...predicate.Cleaningroom) *CleaningroomUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetNote sets the note field.
func (cu *CleaningroomUpdate) SetNote(s string) *CleaningroomUpdate {
	cu.mutation.SetNote(s)
	return cu
}

// SetDateandstarttime sets the dateandstarttime field.
func (cu *CleaningroomUpdate) SetDateandstarttime(t time.Time) *CleaningroomUpdate {
	cu.mutation.SetDateandstarttime(t)
	return cu
}

// SetPhonenumber sets the phonenumber field.
func (cu *CleaningroomUpdate) SetPhonenumber(s string) *CleaningroomUpdate {
	cu.mutation.SetPhonenumber(s)
	return cu
}

// SetNumofem sets the numofem field.
func (cu *CleaningroomUpdate) SetNumofem(i int) *CleaningroomUpdate {
	cu.mutation.ResetNumofem()
	cu.mutation.SetNumofem(i)
	return cu
}

// AddNumofem adds i to numofem.
func (cu *CleaningroomUpdate) AddNumofem(i int) *CleaningroomUpdate {
	cu.mutation.AddNumofem(i)
	return cu
}

// SetRoomdetailID sets the roomdetail edge to Roomdetail by id.
func (cu *CleaningroomUpdate) SetRoomdetailID(id int) *CleaningroomUpdate {
	cu.mutation.SetRoomdetailID(id)
	return cu
}

// SetNillableRoomdetailID sets the roomdetail edge to Roomdetail by id if the given value is not nil.
func (cu *CleaningroomUpdate) SetNillableRoomdetailID(id *int) *CleaningroomUpdate {
	if id != nil {
		cu = cu.SetRoomdetailID(*id)
	}
	return cu
}

// SetRoomdetail sets the roomdetail edge to Roomdetail.
func (cu *CleaningroomUpdate) SetRoomdetail(r *Roomdetail) *CleaningroomUpdate {
	return cu.SetRoomdetailID(r.ID)
}

// SetCleanernameID sets the Cleanername edge to Cleanername by id.
func (cu *CleaningroomUpdate) SetCleanernameID(id int) *CleaningroomUpdate {
	cu.mutation.SetCleanernameID(id)
	return cu
}

// SetNillableCleanernameID sets the Cleanername edge to Cleanername by id if the given value is not nil.
func (cu *CleaningroomUpdate) SetNillableCleanernameID(id *int) *CleaningroomUpdate {
	if id != nil {
		cu = cu.SetCleanernameID(*id)
	}
	return cu
}

// SetCleanername sets the Cleanername edge to Cleanername.
func (cu *CleaningroomUpdate) SetCleanername(c *Cleanername) *CleaningroomUpdate {
	return cu.SetCleanernameID(c.ID)
}

// SetLengthtimeID sets the Lengthtime edge to Lengthtime by id.
func (cu *CleaningroomUpdate) SetLengthtimeID(id int) *CleaningroomUpdate {
	cu.mutation.SetLengthtimeID(id)
	return cu
}

// SetNillableLengthtimeID sets the Lengthtime edge to Lengthtime by id if the given value is not nil.
func (cu *CleaningroomUpdate) SetNillableLengthtimeID(id *int) *CleaningroomUpdate {
	if id != nil {
		cu = cu.SetLengthtimeID(*id)
	}
	return cu
}

// SetLengthtime sets the Lengthtime edge to Lengthtime.
func (cu *CleaningroomUpdate) SetLengthtime(l *Lengthtime) *CleaningroomUpdate {
	return cu.SetLengthtimeID(l.ID)
}

// SetEmployeeID sets the Employee edge to Employee by id.
func (cu *CleaningroomUpdate) SetEmployeeID(id int) *CleaningroomUpdate {
	cu.mutation.SetEmployeeID(id)
	return cu
}

// SetNillableEmployeeID sets the Employee edge to Employee by id if the given value is not nil.
func (cu *CleaningroomUpdate) SetNillableEmployeeID(id *int) *CleaningroomUpdate {
	if id != nil {
		cu = cu.SetEmployeeID(*id)
	}
	return cu
}

// SetEmployee sets the Employee edge to Employee.
func (cu *CleaningroomUpdate) SetEmployee(e *Employee) *CleaningroomUpdate {
	return cu.SetEmployeeID(e.ID)
}

// Mutation returns the CleaningroomMutation object of the builder.
func (cu *CleaningroomUpdate) Mutation() *CleaningroomMutation {
	return cu.mutation
}

// ClearRoomdetail clears the roomdetail edge to Roomdetail.
func (cu *CleaningroomUpdate) ClearRoomdetail() *CleaningroomUpdate {
	cu.mutation.ClearRoomdetail()
	return cu
}

// ClearCleanername clears the Cleanername edge to Cleanername.
func (cu *CleaningroomUpdate) ClearCleanername() *CleaningroomUpdate {
	cu.mutation.ClearCleanername()
	return cu
}

// ClearLengthtime clears the Lengthtime edge to Lengthtime.
func (cu *CleaningroomUpdate) ClearLengthtime() *CleaningroomUpdate {
	cu.mutation.ClearLengthtime()
	return cu
}

// ClearEmployee clears the Employee edge to Employee.
func (cu *CleaningroomUpdate) ClearEmployee() *CleaningroomUpdate {
	cu.mutation.ClearEmployee()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CleaningroomUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := cu.mutation.Note(); ok {
		if err := cleaningroom.NoteValidator(v); err != nil {
			return 0, &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Phonenumber(); ok {
		if err := cleaningroom.PhonenumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "phonenumber", err: fmt.Errorf("ent: validator failed for field \"phonenumber\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Numofem(); ok {
		if err := cleaningroom.NumofemValidator(v); err != nil {
			return 0, &ValidationError{Name: "numofem", err: fmt.Errorf("ent: validator failed for field \"numofem\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CleaningroomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CleaningroomUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CleaningroomUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CleaningroomUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CleaningroomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cleaningroom.Table,
			Columns: cleaningroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cleaningroom.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cleaningroom.FieldNote,
		})
	}
	if value, ok := cu.mutation.Dateandstarttime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cleaningroom.FieldDateandstarttime,
		})
	}
	if value, ok := cu.mutation.Phonenumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cleaningroom.FieldPhonenumber,
		})
	}
	if value, ok := cu.mutation.Numofem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cleaningroom.FieldNumofem,
		})
	}
	if value, ok := cu.mutation.AddedNumofem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cleaningroom.FieldNumofem,
		})
	}
	if cu.mutation.RoomdetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.RoomdetailTable,
			Columns: []string{cleaningroom.RoomdetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RoomdetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.RoomdetailTable,
			Columns: []string{cleaningroom.RoomdetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CleanernameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.CleanernameTable,
			Columns: []string{cleaningroom.CleanernameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleanername.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CleanernameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.CleanernameTable,
			Columns: []string{cleaningroom.CleanernameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleanername.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.LengthtimeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.LengthtimeTable,
			Columns: []string{cleaningroom.LengthtimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lengthtime.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LengthtimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.LengthtimeTable,
			Columns: []string{cleaningroom.LengthtimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lengthtime.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.EmployeeTable,
			Columns: []string{cleaningroom.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.EmployeeTable,
			Columns: []string{cleaningroom.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cleaningroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CleaningroomUpdateOne is the builder for updating a single Cleaningroom entity.
type CleaningroomUpdateOne struct {
	config
	hooks    []Hook
	mutation *CleaningroomMutation
}

// SetNote sets the note field.
func (cuo *CleaningroomUpdateOne) SetNote(s string) *CleaningroomUpdateOne {
	cuo.mutation.SetNote(s)
	return cuo
}

// SetDateandstarttime sets the dateandstarttime field.
func (cuo *CleaningroomUpdateOne) SetDateandstarttime(t time.Time) *CleaningroomUpdateOne {
	cuo.mutation.SetDateandstarttime(t)
	return cuo
}

// SetPhonenumber sets the phonenumber field.
func (cuo *CleaningroomUpdateOne) SetPhonenumber(s string) *CleaningroomUpdateOne {
	cuo.mutation.SetPhonenumber(s)
	return cuo
}

// SetNumofem sets the numofem field.
func (cuo *CleaningroomUpdateOne) SetNumofem(i int) *CleaningroomUpdateOne {
	cuo.mutation.ResetNumofem()
	cuo.mutation.SetNumofem(i)
	return cuo
}

// AddNumofem adds i to numofem.
func (cuo *CleaningroomUpdateOne) AddNumofem(i int) *CleaningroomUpdateOne {
	cuo.mutation.AddNumofem(i)
	return cuo
}

// SetRoomdetailID sets the roomdetail edge to Roomdetail by id.
func (cuo *CleaningroomUpdateOne) SetRoomdetailID(id int) *CleaningroomUpdateOne {
	cuo.mutation.SetRoomdetailID(id)
	return cuo
}

// SetNillableRoomdetailID sets the roomdetail edge to Roomdetail by id if the given value is not nil.
func (cuo *CleaningroomUpdateOne) SetNillableRoomdetailID(id *int) *CleaningroomUpdateOne {
	if id != nil {
		cuo = cuo.SetRoomdetailID(*id)
	}
	return cuo
}

// SetRoomdetail sets the roomdetail edge to Roomdetail.
func (cuo *CleaningroomUpdateOne) SetRoomdetail(r *Roomdetail) *CleaningroomUpdateOne {
	return cuo.SetRoomdetailID(r.ID)
}

// SetCleanernameID sets the Cleanername edge to Cleanername by id.
func (cuo *CleaningroomUpdateOne) SetCleanernameID(id int) *CleaningroomUpdateOne {
	cuo.mutation.SetCleanernameID(id)
	return cuo
}

// SetNillableCleanernameID sets the Cleanername edge to Cleanername by id if the given value is not nil.
func (cuo *CleaningroomUpdateOne) SetNillableCleanernameID(id *int) *CleaningroomUpdateOne {
	if id != nil {
		cuo = cuo.SetCleanernameID(*id)
	}
	return cuo
}

// SetCleanername sets the Cleanername edge to Cleanername.
func (cuo *CleaningroomUpdateOne) SetCleanername(c *Cleanername) *CleaningroomUpdateOne {
	return cuo.SetCleanernameID(c.ID)
}

// SetLengthtimeID sets the Lengthtime edge to Lengthtime by id.
func (cuo *CleaningroomUpdateOne) SetLengthtimeID(id int) *CleaningroomUpdateOne {
	cuo.mutation.SetLengthtimeID(id)
	return cuo
}

// SetNillableLengthtimeID sets the Lengthtime edge to Lengthtime by id if the given value is not nil.
func (cuo *CleaningroomUpdateOne) SetNillableLengthtimeID(id *int) *CleaningroomUpdateOne {
	if id != nil {
		cuo = cuo.SetLengthtimeID(*id)
	}
	return cuo
}

// SetLengthtime sets the Lengthtime edge to Lengthtime.
func (cuo *CleaningroomUpdateOne) SetLengthtime(l *Lengthtime) *CleaningroomUpdateOne {
	return cuo.SetLengthtimeID(l.ID)
}

// SetEmployeeID sets the Employee edge to Employee by id.
func (cuo *CleaningroomUpdateOne) SetEmployeeID(id int) *CleaningroomUpdateOne {
	cuo.mutation.SetEmployeeID(id)
	return cuo
}

// SetNillableEmployeeID sets the Employee edge to Employee by id if the given value is not nil.
func (cuo *CleaningroomUpdateOne) SetNillableEmployeeID(id *int) *CleaningroomUpdateOne {
	if id != nil {
		cuo = cuo.SetEmployeeID(*id)
	}
	return cuo
}

// SetEmployee sets the Employee edge to Employee.
func (cuo *CleaningroomUpdateOne) SetEmployee(e *Employee) *CleaningroomUpdateOne {
	return cuo.SetEmployeeID(e.ID)
}

// Mutation returns the CleaningroomMutation object of the builder.
func (cuo *CleaningroomUpdateOne) Mutation() *CleaningroomMutation {
	return cuo.mutation
}

// ClearRoomdetail clears the roomdetail edge to Roomdetail.
func (cuo *CleaningroomUpdateOne) ClearRoomdetail() *CleaningroomUpdateOne {
	cuo.mutation.ClearRoomdetail()
	return cuo
}

// ClearCleanername clears the Cleanername edge to Cleanername.
func (cuo *CleaningroomUpdateOne) ClearCleanername() *CleaningroomUpdateOne {
	cuo.mutation.ClearCleanername()
	return cuo
}

// ClearLengthtime clears the Lengthtime edge to Lengthtime.
func (cuo *CleaningroomUpdateOne) ClearLengthtime() *CleaningroomUpdateOne {
	cuo.mutation.ClearLengthtime()
	return cuo
}

// ClearEmployee clears the Employee edge to Employee.
func (cuo *CleaningroomUpdateOne) ClearEmployee() *CleaningroomUpdateOne {
	cuo.mutation.ClearEmployee()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *CleaningroomUpdateOne) Save(ctx context.Context) (*Cleaningroom, error) {
	if v, ok := cuo.mutation.Note(); ok {
		if err := cleaningroom.NoteValidator(v); err != nil {
			return nil, &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Phonenumber(); ok {
		if err := cleaningroom.PhonenumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "phonenumber", err: fmt.Errorf("ent: validator failed for field \"phonenumber\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Numofem(); ok {
		if err := cleaningroom.NumofemValidator(v); err != nil {
			return nil, &ValidationError{Name: "numofem", err: fmt.Errorf("ent: validator failed for field \"numofem\": %w", err)}
		}
	}

	var (
		err  error
		node *Cleaningroom
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CleaningroomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CleaningroomUpdateOne) SaveX(ctx context.Context) *Cleaningroom {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *CleaningroomUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CleaningroomUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CleaningroomUpdateOne) sqlSave(ctx context.Context) (c *Cleaningroom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cleaningroom.Table,
			Columns: cleaningroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cleaningroom.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Cleaningroom.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cleaningroom.FieldNote,
		})
	}
	if value, ok := cuo.mutation.Dateandstarttime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cleaningroom.FieldDateandstarttime,
		})
	}
	if value, ok := cuo.mutation.Phonenumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cleaningroom.FieldPhonenumber,
		})
	}
	if value, ok := cuo.mutation.Numofem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cleaningroom.FieldNumofem,
		})
	}
	if value, ok := cuo.mutation.AddedNumofem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cleaningroom.FieldNumofem,
		})
	}
	if cuo.mutation.RoomdetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.RoomdetailTable,
			Columns: []string{cleaningroom.RoomdetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RoomdetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.RoomdetailTable,
			Columns: []string{cleaningroom.RoomdetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CleanernameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.CleanernameTable,
			Columns: []string{cleaningroom.CleanernameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleanername.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CleanernameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.CleanernameTable,
			Columns: []string{cleaningroom.CleanernameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cleanername.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.LengthtimeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.LengthtimeTable,
			Columns: []string{cleaningroom.LengthtimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lengthtime.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LengthtimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.LengthtimeTable,
			Columns: []string{cleaningroom.LengthtimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lengthtime.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.EmployeeTable,
			Columns: []string{cleaningroom.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cleaningroom.EmployeeTable,
			Columns: []string{cleaningroom.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Cleaningroom{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cleaningroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
