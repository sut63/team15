// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team15/app/ent/deposit"
	"github.com/team15/app/ent/employee"
	"github.com/team15/app/ent/lease"
	"github.com/team15/app/ent/predicate"
	"github.com/team15/app/ent/roomdetail"
	"github.com/team15/app/ent/wifi"
)

// LeaseUpdate is the builder for updating Lease entities.
type LeaseUpdate struct {
	config
	hooks      []Hook
	mutation   *LeaseMutation
	predicates []predicate.Lease
}

// Where adds a new predicate for the builder.
func (lu *LeaseUpdate) Where(ps ...predicate.Lease) *LeaseUpdate {
	lu.predicates = append(lu.predicates, ps...)
	return lu
}

// SetAddedtime sets the addedtime field.
func (lu *LeaseUpdate) SetAddedtime(t time.Time) *LeaseUpdate {
	lu.mutation.SetAddedtime(t)
	return lu
}

// SetTenant sets the tenant field.
func (lu *LeaseUpdate) SetTenant(s string) *LeaseUpdate {
	lu.mutation.SetTenant(s)
	return lu
}

// SetWifiID sets the Wifi edge to Wifi by id.
func (lu *LeaseUpdate) SetWifiID(id int) *LeaseUpdate {
	lu.mutation.SetWifiID(id)
	return lu
}

// SetNillableWifiID sets the Wifi edge to Wifi by id if the given value is not nil.
func (lu *LeaseUpdate) SetNillableWifiID(id *int) *LeaseUpdate {
	if id != nil {
		lu = lu.SetWifiID(*id)
	}
	return lu
}

// SetWifi sets the Wifi edge to Wifi.
func (lu *LeaseUpdate) SetWifi(w *Wifi) *LeaseUpdate {
	return lu.SetWifiID(w.ID)
}

// SetRoomdetailID sets the Roomdetail edge to Roomdetail by id.
func (lu *LeaseUpdate) SetRoomdetailID(id int) *LeaseUpdate {
	lu.mutation.SetRoomdetailID(id)
	return lu
}

// SetRoomdetail sets the Roomdetail edge to Roomdetail.
func (lu *LeaseUpdate) SetRoomdetail(r *Roomdetail) *LeaseUpdate {
	return lu.SetRoomdetailID(r.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (lu *LeaseUpdate) SetEmployeeID(id int) *LeaseUpdate {
	lu.mutation.SetEmployeeID(id)
	return lu
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (lu *LeaseUpdate) SetNillableEmployeeID(id *int) *LeaseUpdate {
	if id != nil {
		lu = lu.SetEmployeeID(*id)
	}
	return lu
}

// SetEmployee sets the employee edge to Employee.
func (lu *LeaseUpdate) SetEmployee(e *Employee) *LeaseUpdate {
	return lu.SetEmployeeID(e.ID)
}

// AddLeaseIDs adds the leases edge to Deposit by ids.
func (lu *LeaseUpdate) AddLeaseIDs(ids ...int) *LeaseUpdate {
	lu.mutation.AddLeaseIDs(ids...)
	return lu
}

// AddLeases adds the leases edges to Deposit.
func (lu *LeaseUpdate) AddLeases(d ...*Deposit) *LeaseUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return lu.AddLeaseIDs(ids...)
}

// Mutation returns the LeaseMutation object of the builder.
func (lu *LeaseUpdate) Mutation() *LeaseMutation {
	return lu.mutation
}

// ClearWifi clears the Wifi edge to Wifi.
func (lu *LeaseUpdate) ClearWifi() *LeaseUpdate {
	lu.mutation.ClearWifi()
	return lu
}

// ClearRoomdetail clears the Roomdetail edge to Roomdetail.
func (lu *LeaseUpdate) ClearRoomdetail() *LeaseUpdate {
	lu.mutation.ClearRoomdetail()
	return lu
}

// ClearEmployee clears the employee edge to Employee.
func (lu *LeaseUpdate) ClearEmployee() *LeaseUpdate {
	lu.mutation.ClearEmployee()
	return lu
}

// RemoveLeaseIDs removes the leases edge to Deposit by ids.
func (lu *LeaseUpdate) RemoveLeaseIDs(ids ...int) *LeaseUpdate {
	lu.mutation.RemoveLeaseIDs(ids...)
	return lu
}

// RemoveLeases removes leases edges to Deposit.
func (lu *LeaseUpdate) RemoveLeases(d ...*Deposit) *LeaseUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return lu.RemoveLeaseIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (lu *LeaseUpdate) Save(ctx context.Context) (int, error) {

	if _, ok := lu.mutation.RoomdetailID(); lu.mutation.RoomdetailCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"Roomdetail\"")
	}

	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LeaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LeaseUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LeaseUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LeaseUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LeaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lease.Table,
			Columns: lease.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lease.FieldID,
			},
		},
	}
	if ps := lu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Addedtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lease.FieldAddedtime,
		})
	}
	if value, ok := lu.mutation.Tenant(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lease.FieldTenant,
		})
	}
	if lu.mutation.WifiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lease.WifiTable,
			Columns: []string{lease.WifiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wifi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.WifiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lease.WifiTable,
			Columns: []string{lease.WifiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wifi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.RoomdetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lease.RoomdetailTable,
			Columns: []string{lease.RoomdetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RoomdetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lease.RoomdetailTable,
			Columns: []string{lease.RoomdetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lease.EmployeeTable,
			Columns: []string{lease.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lease.EmployeeTable,
			Columns: []string{lease.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := lu.mutation.RemovedLeasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lease.LeasesTable,
			Columns: []string{lease.LeasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deposit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LeasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lease.LeasesTable,
			Columns: []string{lease.LeasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deposit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lease.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LeaseUpdateOne is the builder for updating a single Lease entity.
type LeaseUpdateOne struct {
	config
	hooks    []Hook
	mutation *LeaseMutation
}

// SetAddedtime sets the addedtime field.
func (luo *LeaseUpdateOne) SetAddedtime(t time.Time) *LeaseUpdateOne {
	luo.mutation.SetAddedtime(t)
	return luo
}

// SetTenant sets the tenant field.
func (luo *LeaseUpdateOne) SetTenant(s string) *LeaseUpdateOne {
	luo.mutation.SetTenant(s)
	return luo
}

// SetWifiID sets the Wifi edge to Wifi by id.
func (luo *LeaseUpdateOne) SetWifiID(id int) *LeaseUpdateOne {
	luo.mutation.SetWifiID(id)
	return luo
}

// SetNillableWifiID sets the Wifi edge to Wifi by id if the given value is not nil.
func (luo *LeaseUpdateOne) SetNillableWifiID(id *int) *LeaseUpdateOne {
	if id != nil {
		luo = luo.SetWifiID(*id)
	}
	return luo
}

// SetWifi sets the Wifi edge to Wifi.
func (luo *LeaseUpdateOne) SetWifi(w *Wifi) *LeaseUpdateOne {
	return luo.SetWifiID(w.ID)
}

// SetRoomdetailID sets the Roomdetail edge to Roomdetail by id.
func (luo *LeaseUpdateOne) SetRoomdetailID(id int) *LeaseUpdateOne {
	luo.mutation.SetRoomdetailID(id)
	return luo
}

// SetRoomdetail sets the Roomdetail edge to Roomdetail.
func (luo *LeaseUpdateOne) SetRoomdetail(r *Roomdetail) *LeaseUpdateOne {
	return luo.SetRoomdetailID(r.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (luo *LeaseUpdateOne) SetEmployeeID(id int) *LeaseUpdateOne {
	luo.mutation.SetEmployeeID(id)
	return luo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (luo *LeaseUpdateOne) SetNillableEmployeeID(id *int) *LeaseUpdateOne {
	if id != nil {
		luo = luo.SetEmployeeID(*id)
	}
	return luo
}

// SetEmployee sets the employee edge to Employee.
func (luo *LeaseUpdateOne) SetEmployee(e *Employee) *LeaseUpdateOne {
	return luo.SetEmployeeID(e.ID)
}

// AddLeaseIDs adds the leases edge to Deposit by ids.
func (luo *LeaseUpdateOne) AddLeaseIDs(ids ...int) *LeaseUpdateOne {
	luo.mutation.AddLeaseIDs(ids...)
	return luo
}

// AddLeases adds the leases edges to Deposit.
func (luo *LeaseUpdateOne) AddLeases(d ...*Deposit) *LeaseUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return luo.AddLeaseIDs(ids...)
}

// Mutation returns the LeaseMutation object of the builder.
func (luo *LeaseUpdateOne) Mutation() *LeaseMutation {
	return luo.mutation
}

// ClearWifi clears the Wifi edge to Wifi.
func (luo *LeaseUpdateOne) ClearWifi() *LeaseUpdateOne {
	luo.mutation.ClearWifi()
	return luo
}

// ClearRoomdetail clears the Roomdetail edge to Roomdetail.
func (luo *LeaseUpdateOne) ClearRoomdetail() *LeaseUpdateOne {
	luo.mutation.ClearRoomdetail()
	return luo
}

// ClearEmployee clears the employee edge to Employee.
func (luo *LeaseUpdateOne) ClearEmployee() *LeaseUpdateOne {
	luo.mutation.ClearEmployee()
	return luo
}

// RemoveLeaseIDs removes the leases edge to Deposit by ids.
func (luo *LeaseUpdateOne) RemoveLeaseIDs(ids ...int) *LeaseUpdateOne {
	luo.mutation.RemoveLeaseIDs(ids...)
	return luo
}

// RemoveLeases removes leases edges to Deposit.
func (luo *LeaseUpdateOne) RemoveLeases(d ...*Deposit) *LeaseUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return luo.RemoveLeaseIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (luo *LeaseUpdateOne) Save(ctx context.Context) (*Lease, error) {

	if _, ok := luo.mutation.RoomdetailID(); luo.mutation.RoomdetailCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"Roomdetail\"")
	}

	var (
		err  error
		node *Lease
	)
	if len(luo.hooks) == 0 {
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LeaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LeaseUpdateOne) SaveX(ctx context.Context) *Lease {
	l, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return l
}

// Exec executes the query on the entity.
func (luo *LeaseUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LeaseUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LeaseUpdateOne) sqlSave(ctx context.Context) (l *Lease, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lease.Table,
			Columns: lease.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lease.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Lease.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := luo.mutation.Addedtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lease.FieldAddedtime,
		})
	}
	if value, ok := luo.mutation.Tenant(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lease.FieldTenant,
		})
	}
	if luo.mutation.WifiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lease.WifiTable,
			Columns: []string{lease.WifiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wifi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.WifiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lease.WifiTable,
			Columns: []string{lease.WifiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wifi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.RoomdetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lease.RoomdetailTable,
			Columns: []string{lease.RoomdetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RoomdetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lease.RoomdetailTable,
			Columns: []string{lease.RoomdetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lease.EmployeeTable,
			Columns: []string{lease.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lease.EmployeeTable,
			Columns: []string{lease.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := luo.mutation.RemovedLeasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lease.LeasesTable,
			Columns: []string{lease.LeasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deposit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LeasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lease.LeasesTable,
			Columns: []string{lease.LeasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deposit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	l = &Lease{config: luo.config}
	_spec.Assign = l.assignValues
	_spec.ScanValues = l.scanValues()
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lease.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return l, nil
}
