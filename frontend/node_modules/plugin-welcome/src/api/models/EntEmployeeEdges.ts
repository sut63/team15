/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntCleaningRoom,
    EntCleaningRoomFromJSON,
    EntCleaningRoomFromJSONTyped,
    EntCleaningRoomToJSON,
    EntDeposit,
    EntDepositFromJSON,
    EntDepositFromJSONTyped,
    EntDepositToJSON,
    EntJobposition,
    EntJobpositionFromJSON,
    EntJobpositionFromJSONTyped,
    EntJobpositionToJSON,
    EntLease,
    EntLeaseFromJSON,
    EntLeaseFromJSONTyped,
    EntLeaseToJSON,
    EntRepairinvoice,
    EntRepairinvoiceFromJSON,
    EntRepairinvoiceFromJSONTyped,
    EntRepairinvoiceToJSON,
    EntRoomdetail,
    EntRoomdetailFromJSON,
    EntRoomdetailFromJSONTyped,
    EntRoomdetailToJSON,
} from './';

/**
 * 
 * @export
 * @interface EntEmployeeEdges
 */
export interface EntEmployeeEdges {
    /**
     * Cleaningrooms holds the value of the cleaningrooms edge.
     * @type {Array<EntCleaningRoom>}
     * @memberof EntEmployeeEdges
     */
    cleaningrooms?: Array<EntCleaningRoom>;
    /**
     * Employees holds the value of the employees edge.
     * @type {Array<EntDeposit>}
     * @memberof EntEmployeeEdges
     */
    employees?: Array<EntDeposit>;
    /**
     * 
     * @type {EntJobposition}
     * @memberof EntEmployeeEdges
     */
    jobposition?: EntJobposition;
    /**
     * Leases holds the value of the leases edge.
     * @type {Array<EntLease>}
     * @memberof EntEmployeeEdges
     */
    leases?: Array<EntLease>;
    /**
     * Repairinvoices holds the value of the repairinvoices edge.
     * @type {Array<EntRepairinvoice>}
     * @memberof EntEmployeeEdges
     */
    repairinvoices?: Array<EntRepairinvoice>;
    /**
     * Roomdetails holds the value of the roomdetails edge.
     * @type {Array<EntRoomdetail>}
     * @memberof EntEmployeeEdges
     */
    roomdetails?: Array<EntRoomdetail>;
}

export function EntEmployeeEdgesFromJSON(json: any): EntEmployeeEdges {
    return EntEmployeeEdgesFromJSONTyped(json, false);
}

export function EntEmployeeEdgesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntEmployeeEdges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cleaningrooms': !exists(json, 'Cleaningrooms') ? undefined : ((json['cleaningrooms'] as Array<any>).map(EntCleaningRoomFromJSON)),
        'employees': !exists(json, 'Employees') ? undefined : ((json['Employees'] as Array<any>).map(EntDepositFromJSON)),
        'jobposition': !exists(json, 'Jobposition') ? undefined : EntJobpositionFromJSON(json['Jobposition']),
        'leases': !exists(json, 'Leases') ? undefined : ((json['Leases'] as Array<any>).map(EntLeaseFromJSON)),
        'repairinvoices': !exists(json, 'Repairinvoices') ? undefined : ((json['Repairinvoices'] as Array<any>).map(EntRepairinvoiceFromJSON)),
        'roomdetails': !exists(json, 'Roomdetails') ? undefined : ((json['Roomdetails'] as Array<any>).map(EntRoomdetailFromJSON)),
    };
}

export function EntEmployeeEdgesToJSON(value?: EntEmployeeEdges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cleaningrooms': value.cleaningrooms === undefined ? undefined : ((value.cleaningrooms as Array<any>).map(EntCleaningRoomToJSON)),
        'employees': value.employees === undefined ? undefined : ((value.employees as Array<any>).map(EntDepositToJSON)),
        'jobposition': EntJobpositionToJSON(value.jobposition),
        'leases': value.leases === undefined ? undefined : ((value.leases as Array<any>).map(EntLeaseToJSON)),
        'repairinvoices': value.repairinvoices === undefined ? undefined : ((value.repairinvoices as Array<any>).map(EntRepairinvoiceToJSON)),
        'roomdetails': value.roomdetails === undefined ? undefined : ((value.roomdetails as Array<any>).map(EntRoomdetailToJSON)),
    };
}


