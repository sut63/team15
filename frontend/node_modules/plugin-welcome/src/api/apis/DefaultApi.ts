/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersBill,
    ControllersBillFromJSON,
    ControllersBillToJSON,
    ControllersCleaningroom,
    ControllersCleaningroomFromJSON,
    ControllersCleaningroomToJSON,
    ControllersDeposit,
    ControllersDepositFromJSON,
    ControllersDepositToJSON,
    ControllersLease,
    ControllersLeaseFromJSON,
    ControllersLeaseToJSON,
    ControllersRepairinvoice,
    ControllersRepairinvoiceFromJSON,
    ControllersRepairinvoiceToJSON,
    ControllersRoomdetail,
    ControllersRoomdetailFromJSON,
    ControllersRoomdetailToJSON,
    EntBedtype,
    EntBedtypeFromJSON,
    EntBedtypeToJSON,
    EntBill,
    EntBillFromJSON,
    EntBillToJSON,
    EntCleanername,
    EntCleanernameFromJSON,
    EntCleanernameToJSON,
    EntCleaningroom,
    EntCleaningroomFromJSON,
    EntCleaningroomToJSON,
    EntDeposit,
    EntDepositFromJSON,
    EntDepositToJSON,
    EntEmployee,
    EntEmployeeFromJSON,
    EntEmployeeToJSON,
    EntLease,
    EntLeaseFromJSON,
    EntLeaseToJSON,
    EntLengthtime,
    EntLengthtimeFromJSON,
    EntLengthtimeToJSON,
    EntPayment,
    EntPaymentFromJSON,
    EntPaymentToJSON,
    EntPetrule,
    EntPetruleFromJSON,
    EntPetruleToJSON,
    EntPledge,
    EntPledgeFromJSON,
    EntPledgeToJSON,
    EntRentalstatus,
    EntRentalstatusFromJSON,
    EntRentalstatusToJSON,
    EntRepairinvoice,
    EntRepairinvoiceFromJSON,
    EntRepairinvoiceToJSON,
    EntRoomdetail,
    EntRoomdetailFromJSON,
    EntRoomdetailToJSON,
    EntSituation,
    EntSituationFromJSON,
    EntSituationToJSON,
    EntStatusd,
    EntStatusdFromJSON,
    EntStatusdToJSON,
    EntStaytype,
    EntStaytypeFromJSON,
    EntStaytypeToJSON,
    EntWifi,
    EntWifiFromJSON,
    EntWifiToJSON,
} from '../models';

export interface CreateBedtypeRequest {
    bedtype: EntBedtype;
}

export interface CreateBillRequest {
    bill: ControllersBill;
}

export interface CreateCleaningroomRequest {
    cleaningroom: ControllersCleaningroom;
}

export interface CreateDepositRequest {
    deposit: ControllersDeposit;
}

export interface CreateLeaseRequest {
    lease: ControllersLease;
}

export interface CreatePaymentRequest {
    payment: EntPayment;
}

export interface CreatePetruleRequest {
    petrule: EntPetrule;
}

export interface CreatePledgeRequest {
    pledge: EntPledge;
}

export interface CreateRentalstatusRequest {
    rentalstatus: EntRentalstatus;
}

export interface CreateRepairinvoiceRequest {
    repairinvoice: ControllersRepairinvoice;
}

export interface CreateRoomdetailRequest {
    roomdetail: ControllersRoomdetail;
}

export interface CreateSituationRequest {
    situation: EntSituation;
}

export interface CreateStatusdRequest {
    statusd: EntStatusd;
}

export interface CreateStaytypeRequest {
    staytype: EntStaytype;
}

export interface CreateWifiRequest {
    wifi: EntWifi;
}

export interface DeleteBedtypeRequest {
    id: number;
}

export interface DeleteEmployeeRequest {
    id: number;
}

export interface DeletePaymentRequest {
    id: number;
}

export interface DeletePetruleRequest {
    id: number;
}

export interface DeletePledgeRequest {
    id: number;
}

export interface DeleteRoomdetailRequest {
    id: number;
}

export interface DeleteSituationRequest {
    id: number;
}

export interface DeleteStatusdRequest {
    id: number;
}

export interface DeleteStaytypeRequest {
    id: number;
}

export interface DeleteWifiRequest {
    id: number;
}

export interface GetBedtypeRequest {
    id: number;
}

export interface GetCleanernameRequest {
    id: number;
}

export interface GetCleaningroomRequest {
    id: number;
}

export interface GetDepositByDepositidRequest {
    parcelcode?: string;
    lease?: number;
    statusd?: number;
}

export interface GetEmployeeRequest {
    id: number;
}

export interface GetLengthtimeRequest {
    id: number;
}

export interface GetPaymentRequest {
    id: number;
}

export interface GetPetruleRequest {
    id: number;
}

export interface GetPledgeRequest {
    id: number;
}

export interface GetRentalstatusRequest {
    id: number;
}

export interface GetRoomdetailRequest {
    id: number;
}

export interface GetRoomdetailByRoomnameRequest {
    roomtypename?: string;
    price?: number;
    bedtype?: number;
    staytype?: number;
    petrule?: number;
}

export interface GetSituationRequest {
    id: number;
}

export interface GetStatusdRequest {
    id: number;
}

export interface GetStaytypeRequest {
    id: number;
}

export interface GetWifiRequest {
    id: number;
}

export interface ListBillRequest {
    limit?: number;
    offset?: number;
}

export interface ListCleanernameRequest {
    limit?: number;
    offset?: number;
}

export interface ListDepositRequest {
    limit?: number;
    offset?: number;
}

export interface ListLeaseRequest {
    limit?: number;
    offset?: number;
}

export interface ListLengthtimeRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaymentRequest {
    limit?: number;
    offset?: number;
}

export interface ListRentalstatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListRepairinvoiceRequest {
    limit?: number;
    offset?: number;
}

export interface ListSituationRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatusdRequest {
    limit?: number;
    offset?: number;
}

export interface ListStaytypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListWifiRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create bedtype
     * Create bedtype
     */
    async createBedtypeRaw(requestParameters: CreateBedtypeRequest): Promise<runtime.ApiResponse<EntBedtype>> {
        if (requestParameters.bedtype === null || requestParameters.bedtype === undefined) {
            throw new runtime.RequiredError('bedtype','Required parameter requestParameters.bedtype was null or undefined when calling createBedtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bedtypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBedtypeToJSON(requestParameters.bedtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBedtypeFromJSON(jsonValue));
    }

    /**
     * Create bedtype
     * Create bedtype
     */
    async createBedtype(requestParameters: CreateBedtypeRequest): Promise<EntBedtype> {
        const response = await this.createBedtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create bill
     * Create bill
     */
    async createBillRaw(requestParameters: CreateBillRequest): Promise<runtime.ApiResponse<ControllersBill>> {
        if (requestParameters.bill === null || requestParameters.bill === undefined) {
            throw new runtime.RequiredError('bill','Required parameter requestParameters.bill was null or undefined when calling createBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bills`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersBillToJSON(requestParameters.bill),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBillFromJSON(jsonValue));
    }

    /**
     * Create bill
     * Create bill
     */
    async createBill(requestParameters: CreateBillRequest): Promise<ControllersBill> {
        const response = await this.createBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create cleaningroom
     * Create cleaningroom
     */
    async createCleaningroomRaw(requestParameters: CreateCleaningroomRequest): Promise<runtime.ApiResponse<EntCleaningroom>> {
        if (requestParameters.cleaningroom === null || requestParameters.cleaningroom === undefined) {
            throw new runtime.RequiredError('cleaningroom','Required parameter requestParameters.cleaningroom was null or undefined when calling createCleaningroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cleaningrooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersCleaningroomToJSON(requestParameters.cleaningroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCleaningroomFromJSON(jsonValue));
    }

    /**
     * Create cleaningroom
     * Create cleaningroom
     */
    async createCleaningroom(requestParameters: CreateCleaningroomRequest): Promise<EntCleaningroom> {
        const response = await this.createCleaningroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create deposit
     * Create deposit
     */
    async createDepositRaw(requestParameters: CreateDepositRequest): Promise<runtime.ApiResponse<ControllersDeposit>> {
        if (requestParameters.deposit === null || requestParameters.deposit === undefined) {
            throw new runtime.RequiredError('deposit','Required parameter requestParameters.deposit was null or undefined when calling createDeposit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deposits`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersDepositToJSON(requestParameters.deposit),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersDepositFromJSON(jsonValue));
    }

    /**
     * Create deposit
     * Create deposit
     */
    async createDeposit(requestParameters: CreateDepositRequest): Promise<ControllersDeposit> {
        const response = await this.createDepositRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create lease
     * Create lease
     */
    async createLeaseRaw(requestParameters: CreateLeaseRequest): Promise<runtime.ApiResponse<ControllersLease>> {
        if (requestParameters.lease === null || requestParameters.lease === undefined) {
            throw new runtime.RequiredError('lease','Required parameter requestParameters.lease was null or undefined when calling createLease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/leases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersLeaseToJSON(requestParameters.lease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersLeaseFromJSON(jsonValue));
    }

    /**
     * Create lease
     * Create lease
     */
    async createLease(requestParameters: CreateLeaseRequest): Promise<ControllersLease> {
        const response = await this.createLeaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create payment
     * Create payment
     */
    async createPaymentRaw(requestParameters: CreatePaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.payment === null || requestParameters.payment === undefined) {
            throw new runtime.RequiredError('payment','Required parameter requestParameters.payment was null or undefined when calling createPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymentToJSON(requestParameters.payment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * Create payment
     * Create payment
     */
    async createPayment(requestParameters: CreatePaymentRequest): Promise<EntPayment> {
        const response = await this.createPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create petrule
     * Create petrule
     */
    async createPetruleRaw(requestParameters: CreatePetruleRequest): Promise<runtime.ApiResponse<EntPetrule>> {
        if (requestParameters.petrule === null || requestParameters.petrule === undefined) {
            throw new runtime.RequiredError('petrule','Required parameter requestParameters.petrule was null or undefined when calling createPetrule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/petrules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPetruleToJSON(requestParameters.petrule),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPetruleFromJSON(jsonValue));
    }

    /**
     * Create petrule
     * Create petrule
     */
    async createPetrule(requestParameters: CreatePetruleRequest): Promise<EntPetrule> {
        const response = await this.createPetruleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create pledge
     * Create pledge
     */
    async createPledgeRaw(requestParameters: CreatePledgeRequest): Promise<runtime.ApiResponse<EntPledge>> {
        if (requestParameters.pledge === null || requestParameters.pledge === undefined) {
            throw new runtime.RequiredError('pledge','Required parameter requestParameters.pledge was null or undefined when calling createPledge.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pledges`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPledgeToJSON(requestParameters.pledge),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPledgeFromJSON(jsonValue));
    }

    /**
     * Create pledge
     * Create pledge
     */
    async createPledge(requestParameters: CreatePledgeRequest): Promise<EntPledge> {
        const response = await this.createPledgeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create rentalstatus
     * Create rentalstatus
     */
    async createRentalstatusRaw(requestParameters: CreateRentalstatusRequest): Promise<runtime.ApiResponse<EntRentalstatus>> {
        if (requestParameters.rentalstatus === null || requestParameters.rentalstatus === undefined) {
            throw new runtime.RequiredError('rentalstatus','Required parameter requestParameters.rentalstatus was null or undefined when calling createRentalstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rentalstatuss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRentalstatusToJSON(requestParameters.rentalstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRentalstatusFromJSON(jsonValue));
    }

    /**
     * Create rentalstatus
     * Create rentalstatus
     */
    async createRentalstatus(requestParameters: CreateRentalstatusRequest): Promise<EntRentalstatus> {
        const response = await this.createRentalstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create repairinvoice
     * Create repairinvoice
     */
    async createRepairinvoiceRaw(requestParameters: CreateRepairinvoiceRequest): Promise<runtime.ApiResponse<ControllersRepairinvoice>> {
        if (requestParameters.repairinvoice === null || requestParameters.repairinvoice === undefined) {
            throw new runtime.RequiredError('repairinvoice','Required parameter requestParameters.repairinvoice was null or undefined when calling createRepairinvoice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/repairinvoices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRepairinvoiceToJSON(requestParameters.repairinvoice),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersRepairinvoiceFromJSON(jsonValue));
    }

    /**
     * Create repairinvoice
     * Create repairinvoice
     */
    async createRepairinvoice(requestParameters: CreateRepairinvoiceRequest): Promise<ControllersRepairinvoice> {
        const response = await this.createRepairinvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create roomdetail
     * Create roomdetail
     */
    async createRoomdetailRaw(requestParameters: CreateRoomdetailRequest): Promise<runtime.ApiResponse<EntRoomdetail>> {
        if (requestParameters.roomdetail === null || requestParameters.roomdetail === undefined) {
            throw new runtime.RequiredError('roomdetail','Required parameter requestParameters.roomdetail was null or undefined when calling createRoomdetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomdetails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRoomdetailToJSON(requestParameters.roomdetail),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomdetailFromJSON(jsonValue));
    }

    /**
     * Create roomdetail
     * Create roomdetail
     */
    async createRoomdetail(requestParameters: CreateRoomdetailRequest): Promise<EntRoomdetail> {
        const response = await this.createRoomdetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create situation
     * Create situation
     */
    async createSituationRaw(requestParameters: CreateSituationRequest): Promise<runtime.ApiResponse<EntSituation>> {
        if (requestParameters.situation === null || requestParameters.situation === undefined) {
            throw new runtime.RequiredError('situation','Required parameter requestParameters.situation was null or undefined when calling createSituation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/situations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSituationToJSON(requestParameters.situation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSituationFromJSON(jsonValue));
    }

    /**
     * Create situation
     * Create situation
     */
    async createSituation(requestParameters: CreateSituationRequest): Promise<EntSituation> {
        const response = await this.createSituationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statusd
     * Create statusd
     */
    async createStatusdRaw(requestParameters: CreateStatusdRequest): Promise<runtime.ApiResponse<EntStatusd>> {
        if (requestParameters.statusd === null || requestParameters.statusd === undefined) {
            throw new runtime.RequiredError('statusd','Required parameter requestParameters.statusd was null or undefined when calling createStatusd.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statusds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusdToJSON(requestParameters.statusd),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusdFromJSON(jsonValue));
    }

    /**
     * Create statusd
     * Create statusd
     */
    async createStatusd(requestParameters: CreateStatusdRequest): Promise<EntStatusd> {
        const response = await this.createStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create staytype
     * Create staytype
     */
    async createStaytypeRaw(requestParameters: CreateStaytypeRequest): Promise<runtime.ApiResponse<EntStaytype>> {
        if (requestParameters.staytype === null || requestParameters.staytype === undefined) {
            throw new runtime.RequiredError('staytype','Required parameter requestParameters.staytype was null or undefined when calling createStaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/staytypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStaytypeToJSON(requestParameters.staytype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStaytypeFromJSON(jsonValue));
    }

    /**
     * Create staytype
     * Create staytype
     */
    async createStaytype(requestParameters: CreateStaytypeRequest): Promise<EntStaytype> {
        const response = await this.createStaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create wifi
     * Create wifi
     */
    async createWifiRaw(requestParameters: CreateWifiRequest): Promise<runtime.ApiResponse<EntWifi>> {
        if (requestParameters.wifi === null || requestParameters.wifi === undefined) {
            throw new runtime.RequiredError('wifi','Required parameter requestParameters.wifi was null or undefined when calling createWifi.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wifis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntWifiToJSON(requestParameters.wifi),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntWifiFromJSON(jsonValue));
    }

    /**
     * Create wifi
     * Create wifi
     */
    async createWifi(requestParameters: CreateWifiRequest): Promise<EntWifi> {
        const response = await this.createWifiRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bedtype by ID
     * Delete a bedtype entity by ID
     */
    async deleteBedtypeRaw(requestParameters: DeleteBedtypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBedtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bedtype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get bedtype by ID
     * Delete a bedtype entity by ID
     */
    async deleteBedtype(requestParameters: DeleteBedtypeRequest): Promise<object> {
        const response = await this.deleteBedtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployeeRaw(requestParameters: DeleteEmployeeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employee/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployee(requestParameters: DeleteEmployeeRequest): Promise<object> {
        const response = await this.deleteEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get payment by ID
     * Delete a payment entity by ID
     */
    async deletePaymentRaw(requestParameters: DeletePaymentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get payment by ID
     * Delete a payment entity by ID
     */
    async deletePayment(requestParameters: DeletePaymentRequest): Promise<object> {
        const response = await this.deletePaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get petrule by ID
     * Delete a petrule entity by ID
     */
    async deletePetruleRaw(requestParameters: DeletePetruleRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePetrule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/petrule/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get petrule by ID
     * Delete a petrule entity by ID
     */
    async deletePetrule(requestParameters: DeletePetruleRequest): Promise<object> {
        const response = await this.deletePetruleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get pledge by ID
     * Delete a pledge entity by ID
     */
    async deletePledgeRaw(requestParameters: DeletePledgeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePledge.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pledge/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get pledge by ID
     * Delete a pledge entity by ID
     */
    async deletePledge(requestParameters: DeletePledgeRequest): Promise<object> {
        const response = await this.deletePledgeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomdetail by ID
     * Delete a roomdetail entity by ID
     */
    async deleteRoomdetailRaw(requestParameters: DeleteRoomdetailRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoomdetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomdetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get roomdetail by ID
     * Delete a roomdetail entity by ID
     */
    async deleteRoomdetail(requestParameters: DeleteRoomdetailRequest): Promise<object> {
        const response = await this.deleteRoomdetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * get situation by ID
     * Delete a situation entity by ID
     */
    async deleteSituationRaw(requestParameters: DeleteSituationRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSituation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/situation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get situation by ID
     * Delete a situation entity by ID
     */
    async deleteSituation(requestParameters: DeleteSituationRequest): Promise<object> {
        const response = await this.deleteSituationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusd by ID
     * Delete a statusd entity by ID
     */
    async deleteStatusdRaw(requestParameters: DeleteStatusdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatusd.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusd/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get statusd by ID
     * Delete a statusd entity by ID
     */
    async deleteStatusd(requestParameters: DeleteStatusdRequest): Promise<object> {
        const response = await this.deleteStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * get staytype by ID
     * Delete a staytype entity by ID
     */
    async deleteStaytypeRaw(requestParameters: DeleteStaytypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staytype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get staytype by ID
     * Delete a staytype entity by ID
     */
    async deleteStaytype(requestParameters: DeleteStaytypeRequest): Promise<object> {
        const response = await this.deleteStaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get wifi by ID
     * Delete a wifi entity by ID
     */
    async deleteWifiRaw(requestParameters: DeleteWifiRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWifi.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wifis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get wifi by ID
     * Delete a wifi entity by ID
     */
    async deleteWifi(requestParameters: DeleteWifiRequest): Promise<object> {
        const response = await this.deleteWifiRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bedtype by ID
     * Get a bedtype entity by ID
     */
    async getBedtypeRaw(requestParameters: GetBedtypeRequest): Promise<runtime.ApiResponse<EntBedtype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBedtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bedtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBedtypeFromJSON(jsonValue));
    }

    /**
     * get bedtype by ID
     * Get a bedtype entity by ID
     */
    async getBedtype(requestParameters: GetBedtypeRequest): Promise<EntBedtype> {
        const response = await this.getBedtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get cleanername by ID
     * Get a cleanername entity by ID
     */
    async getCleanernameRaw(requestParameters: GetCleanernameRequest): Promise<runtime.ApiResponse<EntCleanername>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCleanername.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cleanernames/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCleanernameFromJSON(jsonValue));
    }

    /**
     * get cleanername by ID
     * Get a cleanername entity by ID
     */
    async getCleanername(requestParameters: GetCleanernameRequest): Promise<EntCleanername> {
        const response = await this.getCleanernameRaw(requestParameters);
        return await response.value();
    }

    /**
     * get cleaningroom by ID
     * Get a cleaningroom entity by ID
     */
    async getCleaningroomRaw(requestParameters: GetCleaningroomRequest): Promise<runtime.ApiResponse<EntCleaningroom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCleaningroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cleaningrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCleaningroomFromJSON(jsonValue));
    }

    /**
     * get cleaningroom by ID
     * Get a cleaningroom entity by ID
     */
    async getCleaningroom(requestParameters: GetCleaningroomRequest): Promise<EntCleaningroom> {
        const response = await this.getCleaningroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get deposit by Depositid
     * Get a deposit entity by Depositid
     */
    async getDepositByDepositidRaw(requestParameters: GetDepositByDepositidRequest): Promise<runtime.ApiResponse<EntDeposit>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parcelcode !== undefined) {
            queryParameters['parcelcode'] = requestParameters.parcelcode;
        }

        if (requestParameters.lease !== undefined) {
            queryParameters['lease'] = requestParameters.lease;
        }

        if (requestParameters.statusd !== undefined) {
            queryParameters['statusd'] = requestParameters.statusd;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchdeposits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepositFromJSON(jsonValue));
    }

    /**
     * get deposit by Depositid
     * Get a deposit entity by Depositid
     */
    async getDepositByDepositid(requestParameters: GetDepositByDepositidRequest): Promise<EntDeposit> {
        const response = await this.getDepositByDepositidRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployeeRaw(requestParameters: GetEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployee(requestParameters: GetEmployeeRequest): Promise<EntEmployee> {
        const response = await this.getEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get lengthtime by ID
     * Get a lengthtime entity by ID
     */
    async getLengthtimeRaw(requestParameters: GetLengthtimeRequest): Promise<runtime.ApiResponse<EntLengthtime>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLengthtime.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lengthtimes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLengthtimeFromJSON(jsonValue));
    }

    /**
     * get lengthtime by ID
     * Get a lengthtime entity by ID
     */
    async getLengthtime(requestParameters: GetLengthtimeRequest): Promise<EntLengthtime> {
        const response = await this.getLengthtimeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get payment by ID
     * Get a payment entity by ID
     */
    async getPaymentRaw(requestParameters: GetPaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * get payment by ID
     * Get a payment entity by ID
     */
    async getPayment(requestParameters: GetPaymentRequest): Promise<EntPayment> {
        const response = await this.getPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get petrule by ID
     * Get a petrule entity by ID
     */
    async getPetruleRaw(requestParameters: GetPetruleRequest): Promise<runtime.ApiResponse<EntPetrule>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPetrule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/petrules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPetruleFromJSON(jsonValue));
    }

    /**
     * get petrule by ID
     * Get a petrule entity by ID
     */
    async getPetrule(requestParameters: GetPetruleRequest): Promise<EntPetrule> {
        const response = await this.getPetruleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get pledge by ID
     * Get a pledge entity by ID
     */
    async getPledgeRaw(requestParameters: GetPledgeRequest): Promise<runtime.ApiResponse<EntPledge>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPledge.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pledges/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPledgeFromJSON(jsonValue));
    }

    /**
     * get pledge by ID
     * Get a pledge entity by ID
     */
    async getPledge(requestParameters: GetPledgeRequest): Promise<EntPledge> {
        const response = await this.getPledgeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get rentalstatus by ID
     * Get a rentalstatus entity by ID
     */
    async getRentalstatusRaw(requestParameters: GetRentalstatusRequest): Promise<runtime.ApiResponse<EntRentalstatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRentalstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Rentalstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRentalstatusFromJSON(jsonValue));
    }

    /**
     * get rentalstatus by ID
     * Get a rentalstatus entity by ID
     */
    async getRentalstatus(requestParameters: GetRentalstatusRequest): Promise<EntRentalstatus> {
        const response = await this.getRentalstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomdetail by ID
     * Get a roomdetail entity by ID
     */
    async getRoomdetailRaw(requestParameters: GetRoomdetailRequest): Promise<runtime.ApiResponse<EntRoomdetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomdetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomdetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomdetailFromJSON(jsonValue));
    }

    /**
     * get roomdetail by ID
     * Get a roomdetail entity by ID
     */
    async getRoomdetail(requestParameters: GetRoomdetailRequest): Promise<EntRoomdetail> {
        const response = await this.getRoomdetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomdetail by Roomname
     * Get a roomdetail entity by Roomname
     */
    async getRoomdetailByRoomnameRaw(requestParameters: GetRoomdetailByRoomnameRequest): Promise<runtime.ApiResponse<EntRoomdetail>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.roomtypename !== undefined) {
            queryParameters['roomtypename'] = requestParameters.roomtypename;
        }

        if (requestParameters.price !== undefined) {
            queryParameters['price'] = requestParameters.price;
        }

        if (requestParameters.bedtype !== undefined) {
            queryParameters['bedtype'] = requestParameters.bedtype;
        }

        if (requestParameters.staytype !== undefined) {
            queryParameters['staytype'] = requestParameters.staytype;
        }

        if (requestParameters.petrule !== undefined) {
            queryParameters['petrule'] = requestParameters.petrule;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchroomdetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomdetailFromJSON(jsonValue));
    }

    /**
     * get roomdetail by Roomname
     * Get a roomdetail entity by Roomname
     */
    async getRoomdetailByRoomname(requestParameters: GetRoomdetailByRoomnameRequest): Promise<EntRoomdetail> {
        const response = await this.getRoomdetailByRoomnameRaw(requestParameters);
        return await response.value();
    }

    /**
     * get situation by ID
     * Get a situation entity by ID
     */
    async getSituationRaw(requestParameters: GetSituationRequest): Promise<runtime.ApiResponse<EntSituation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSituation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/situations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSituationFromJSON(jsonValue));
    }

    /**
     * get situation by ID
     * Get a situation entity by ID
     */
    async getSituation(requestParameters: GetSituationRequest): Promise<EntSituation> {
        const response = await this.getSituationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusd by ID
     * Get a statusd entity by ID
     */
    async getStatusdRaw(requestParameters: GetStatusdRequest): Promise<runtime.ApiResponse<EntStatusd>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatusd.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusdFromJSON(jsonValue));
    }

    /**
     * get statusd by ID
     * Get a statusd entity by ID
     */
    async getStatusd(requestParameters: GetStatusdRequest): Promise<EntStatusd> {
        const response = await this.getStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * get staytype by ID
     * Get a staytype entity by ID
     */
    async getStaytypeRaw(requestParameters: GetStaytypeRequest): Promise<runtime.ApiResponse<EntStaytype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staytypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStaytypeFromJSON(jsonValue));
    }

    /**
     * get staytype by ID
     * Get a staytype entity by ID
     */
    async getStaytype(requestParameters: GetStaytypeRequest): Promise<EntStaytype> {
        const response = await this.getStaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get wifi by ID
     * Get a wifi entity by ID
     */
    async getWifiRaw(requestParameters: GetWifiRequest): Promise<runtime.ApiResponse<EntWifi>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWifi.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wifis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntWifiFromJSON(jsonValue));
    }

    /**
     * get wifi by ID
     * Get a wifi entity by ID
     */
    async getWifi(requestParameters: GetWifiRequest): Promise<EntWifi> {
        const response = await this.getWifiRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bedtype entities
     * List bedtype entities
     */
    async listBedtypeRaw(): Promise<runtime.ApiResponse<Array<EntBedtype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bedtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBedtypeFromJSON));
    }

    /**
     * list bedtype entities
     * List bedtype entities
     */
    async listBedtype(): Promise<Array<EntBedtype>> {
        const response = await this.listBedtypeRaw();
        return await response.value();
    }

    /**
     * list bill entities
     * List bill entities
     */
    async listBillRaw(requestParameters: ListBillRequest): Promise<runtime.ApiResponse<Array<EntBill>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBillFromJSON));
    }

    /**
     * list bill entities
     * List bill entities
     */
    async listBill(requestParameters: ListBillRequest): Promise<Array<EntBill>> {
        const response = await this.listBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * list cleanername entities
     * List cleanername entities
     */
    async listCleanernameRaw(requestParameters: ListCleanernameRequest): Promise<runtime.ApiResponse<Array<EntCleanername>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cleanernames`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCleanernameFromJSON));
    }

    /**
     * list cleanername entities
     * List cleanername entities
     */
    async listCleanername(requestParameters: ListCleanernameRequest): Promise<Array<EntCleanername>> {
        const response = await this.listCleanernameRaw(requestParameters);
        return await response.value();
    }

    /**
     * list cleaningroom entities
     * List cleaningroom entities
     */
    async listCleaningroomRaw(): Promise<runtime.ApiResponse<Array<EntCleaningroom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cleaningrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCleaningroomFromJSON));
    }

    /**
     * list cleaningroom entities
     * List cleaningroom entities
     */
    async listCleaningroom(): Promise<Array<EntCleaningroom>> {
        const response = await this.listCleaningroomRaw();
        return await response.value();
    }

    /**
     * list deposit entities
     * List deposit entities
     */
    async listDepositRaw(requestParameters: ListDepositRequest): Promise<runtime.ApiResponse<Array<EntDeposit>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deposits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepositFromJSON));
    }

    /**
     * list deposit entities
     * List deposit entities
     */
    async listDeposit(requestParameters: ListDepositRequest): Promise<Array<EntDeposit>> {
        const response = await this.listDepositRaw(requestParameters);
        return await response.value();
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployeeRaw(): Promise<runtime.ApiResponse<Array<EntEmployee>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeFromJSON));
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployee(): Promise<Array<EntEmployee>> {
        const response = await this.listEmployeeRaw();
        return await response.value();
    }

    /**
     * list lease entities
     * List lease entities
     */
    async listLeaseRaw(requestParameters: ListLeaseRequest): Promise<runtime.ApiResponse<Array<EntLease>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/leases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntLeaseFromJSON));
    }

    /**
     * list lease entities
     * List lease entities
     */
    async listLease(requestParameters: ListLeaseRequest): Promise<Array<EntLease>> {
        const response = await this.listLeaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list lengthtime entities
     * List lengthtime entities
     */
    async listLengthtimeRaw(requestParameters: ListLengthtimeRequest): Promise<runtime.ApiResponse<Array<EntLengthtime>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lengthtimes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntLengthtimeFromJSON));
    }

    /**
     * list lengthtime entities
     * List lengthtime entities
     */
    async listLengthtime(requestParameters: ListLengthtimeRequest): Promise<Array<EntLengthtime>> {
        const response = await this.listLengthtimeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPaymentRaw(requestParameters: ListPaymentRequest): Promise<runtime.ApiResponse<Array<EntPayment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymentFromJSON));
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPayment(requestParameters: ListPaymentRequest): Promise<Array<EntPayment>> {
        const response = await this.listPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list petrule entities
     * List petrule entities
     */
    async listPetruleRaw(): Promise<runtime.ApiResponse<Array<EntPetrule>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/petrules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPetruleFromJSON));
    }

    /**
     * list petrule entities
     * List petrule entities
     */
    async listPetrule(): Promise<Array<EntPetrule>> {
        const response = await this.listPetruleRaw();
        return await response.value();
    }

    /**
     * list pledge entities
     * List pledge entities
     */
    async listPledgeRaw(): Promise<runtime.ApiResponse<Array<EntPledge>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pledges`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPledgeFromJSON));
    }

    /**
     * list pledge entities
     * List pledge entities
     */
    async listPledge(): Promise<Array<EntPledge>> {
        const response = await this.listPledgeRaw();
        return await response.value();
    }

    /**
     * list rentalstatus entities
     * List rentalstatus entities
     */
    async listRentalstatusRaw(requestParameters: ListRentalstatusRequest): Promise<runtime.ApiResponse<Array<EntRentalstatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rentalstatuss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRentalstatusFromJSON));
    }

    /**
     * list rentalstatus entities
     * List rentalstatus entities
     */
    async listRentalstatus(requestParameters: ListRentalstatusRequest): Promise<Array<EntRentalstatus>> {
        const response = await this.listRentalstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list repairinvoice entities
     * List repairinvoice entities
     */
    async listRepairinvoiceRaw(requestParameters: ListRepairinvoiceRequest): Promise<runtime.ApiResponse<Array<EntRepairinvoice>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/repairinvoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRepairinvoiceFromJSON));
    }

    /**
     * list repairinvoice entities
     * List repairinvoice entities
     */
    async listRepairinvoice(requestParameters: ListRepairinvoiceRequest): Promise<Array<EntRepairinvoice>> {
        const response = await this.listRepairinvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomdetail entities
     * List roomdetail entities
     */
    async listRoomdetailRaw(): Promise<runtime.ApiResponse<Array<EntRoomdetail>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomdetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomdetailFromJSON));
    }

    /**
     * list roomdetail entities
     * List roomdetail entities
     */
    async listRoomdetail(): Promise<Array<EntRoomdetail>> {
        const response = await this.listRoomdetailRaw();
        return await response.value();
    }

    /**
     * list situation entities
     * List situation entities
     */
    async listSituationRaw(requestParameters: ListSituationRequest): Promise<runtime.ApiResponse<Array<EntSituation>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/situations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSituationFromJSON));
    }

    /**
     * list situation entities
     * List situation entities
     */
    async listSituation(requestParameters: ListSituationRequest): Promise<Array<EntSituation>> {
        const response = await this.listSituationRaw(requestParameters);
        return await response.value();
    }

    /**
     * list statusd entities
     * List statusd entities
     */
    async listStatusdRaw(requestParameters: ListStatusdRequest): Promise<runtime.ApiResponse<Array<EntStatusd>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatusdFromJSON));
    }

    /**
     * list statusd entities
     * List statusd entities
     */
    async listStatusd(requestParameters: ListStatusdRequest): Promise<Array<EntStatusd>> {
        const response = await this.listStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * list staytype entities
     * List staytype entities
     */
    async listStaytypeRaw(requestParameters: ListStaytypeRequest): Promise<runtime.ApiResponse<Array<EntStaytype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staytypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStaytypeFromJSON));
    }

    /**
     * list staytype entities
     * List staytype entities
     */
    async listStaytype(requestParameters: ListStaytypeRequest): Promise<Array<EntStaytype>> {
        const response = await this.listStaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list wifi entities
     * List wifi entities
     */
    async listWifiRaw(requestParameters: ListWifiRequest): Promise<runtime.ApiResponse<Array<EntWifi>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wifis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntWifiFromJSON));
    }

    /**
     * list wifi entities
     * List wifi entities
     */
    async listWifi(requestParameters: ListWifiRequest): Promise<Array<EntWifi>> {
        const response = await this.listWifiRaw(requestParameters);
        return await response.value();
    }

}
