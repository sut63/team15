/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersDeposit,
    ControllersDepositFromJSON,
    ControllersDepositToJSON,
    ControllersRoom,
    ControllersRoomFromJSON,
    ControllersRoomToJSON,
    EntDeposit,
    EntDepositFromJSON,
    EntDepositToJSON,
    EntEmployee,
    EntEmployeeFromJSON,
    EntEmployeeToJSON,
    EntEquipment,
    EntEquipmentFromJSON,
    EntEquipmentToJSON,
    EntFacility,
    EntFacilityFromJSON,
    EntFacilityToJSON,
    EntNearbyPlace,
    EntNearbyPlaceFromJSON,
    EntNearbyPlaceToJSON,
    EntQuantity,
    EntQuantityFromJSON,
    EntQuantityToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
    EntStatusd,
    EntStatusdFromJSON,
    EntStatusdToJSON,
    EntStayType,
    EntStayTypeFromJSON,
    EntStayTypeToJSON,
} from '../models';

export interface CreateDepositRequest {
    deposit: ControllersDeposit;
}

export interface CreateEmployeeRequest {
    employee: EntEmployee;
}

export interface CreateEquipmentRequest {
    equipment: EntEquipment;
}

export interface CreateFacilityRequest {
    facility: EntFacility;
}

export interface CreateNearbyplaceRequest {
    nearbyplace: EntNearbyPlace;
}

export interface CreateQuantityRequest {
    quantity: EntQuantity;
}

export interface CreateRoomRequest {
    room: ControllersRoom;
}

export interface CreateStatusdRequest {
    statusd: EntStatusd;
}

export interface CreateStaytypeRequest {
    staytype: EntStayType;
}

export interface DeleteEmployeeRequest {
    id: number;
}

export interface DeleteEquipmentRequest {
    id: number;
}

export interface DeleteFacilityRequest {
    id: number;
}

export interface DeleteNearbyplaceRequest {
    id: number;
}

export interface DeleteQuantityRequest {
    id: number;
}

export interface DeleteRoomRequest {
    id: number;
}

export interface DeleteStatusdRequest {
    id: number;
}

export interface DeleteStaytypeRequest {
    id: number;
}

export interface GetEmployeeRequest {
    id: number;
}

export interface GetEquipmentRequest {
    id: number;
}

export interface GetFacilityRequest {
    id: number;
}

export interface GetNearbyplaceRequest {
    id: number;
}

export interface GetQuantityRequest {
    id: number;
}

export interface GetStatusdRequest {
    id: number;
}

export interface GetStaytypeRequest {
    id: number;
}

export interface ListDepositRequest {
    limit?: number;
    offset?: number;
}

export interface ListEmployeeRequest {
    limit?: number;
    offset?: number;
}

export interface ListEquipmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListFacilityRequest {
    limit?: number;
    offset?: number;
}

export interface ListNearbyplaceRequest {
    limit?: number;
    offset?: number;
}

export interface ListQuantityRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatusdRequest {
    limit?: number;
    offset?: number;
}

export interface ListStaytypeRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create deposit
     * Create deposit
     */
    async createDepositRaw(requestParameters: CreateDepositRequest): Promise<runtime.ApiResponse<ControllersDeposit>> {
        if (requestParameters.deposit === null || requestParameters.deposit === undefined) {
            throw new runtime.RequiredError('deposit','Required parameter requestParameters.deposit was null or undefined when calling createDeposit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deposits`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersDepositToJSON(requestParameters.deposit),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersDepositFromJSON(jsonValue));
    }

    /**
     * Create deposit
     * Create deposit
     */
    async createDeposit(requestParameters: CreateDepositRequest): Promise<ControllersDeposit> {
        const response = await this.createDepositRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployeeRaw(requestParameters: CreateEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling createEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEmployeeToJSON(requestParameters.employee),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployee(requestParameters: CreateEmployeeRequest): Promise<EntEmployee> {
        const response = await this.createEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create equipment
     * Create equipment
     */
    async createEquipmentRaw(requestParameters: CreateEquipmentRequest): Promise<runtime.ApiResponse<EntEquipment>> {
        if (requestParameters.equipment === null || requestParameters.equipment === undefined) {
            throw new runtime.RequiredError('equipment','Required parameter requestParameters.equipment was null or undefined when calling createEquipment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/equipments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEquipmentToJSON(requestParameters.equipment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEquipmentFromJSON(jsonValue));
    }

    /**
     * Create equipment
     * Create equipment
     */
    async createEquipment(requestParameters: CreateEquipmentRequest): Promise<EntEquipment> {
        const response = await this.createEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create facility
     * Create facility
     */
    async createFacilityRaw(requestParameters: CreateFacilityRequest): Promise<runtime.ApiResponse<EntFacility>> {
        if (requestParameters.facility === null || requestParameters.facility === undefined) {
            throw new runtime.RequiredError('facility','Required parameter requestParameters.facility was null or undefined when calling createFacility.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/facilitys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntFacilityToJSON(requestParameters.facility),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFacilityFromJSON(jsonValue));
    }

    /**
     * Create facility
     * Create facility
     */
    async createFacility(requestParameters: CreateFacilityRequest): Promise<EntFacility> {
        const response = await this.createFacilityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create nearbyplace
     * Create nearbyplace
     */
    async createNearbyplaceRaw(requestParameters: CreateNearbyplaceRequest): Promise<runtime.ApiResponse<EntNearbyPlace>> {
        if (requestParameters.nearbyplace === null || requestParameters.nearbyplace === undefined) {
            throw new runtime.RequiredError('nearbyplace','Required parameter requestParameters.nearbyplace was null or undefined when calling createNearbyplace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nearbyplaces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntNearbyPlaceToJSON(requestParameters.nearbyplace),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNearbyPlaceFromJSON(jsonValue));
    }

    /**
     * Create nearbyplace
     * Create nearbyplace
     */
    async createNearbyplace(requestParameters: CreateNearbyplaceRequest): Promise<EntNearbyPlace> {
        const response = await this.createNearbyplaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create quantity
     * Create quantity
     */
    async createQuantityRaw(requestParameters: CreateQuantityRequest): Promise<runtime.ApiResponse<EntQuantity>> {
        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling createQuantity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/quantitys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntQuantityToJSON(requestParameters.quantity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntQuantityFromJSON(jsonValue));
    }

    /**
     * Create quantity
     * Create quantity
     */
    async createQuantity(requestParameters: CreateQuantityRequest): Promise<EntQuantity> {
        const response = await this.createQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create room
     * Create room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<ControllersRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersRoomFromJSON(jsonValue));
    }

    /**
     * Create room
     * Create room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<ControllersRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statusd
     * Create statusd
     */
    async createStatusdRaw(requestParameters: CreateStatusdRequest): Promise<runtime.ApiResponse<EntStatusd>> {
        if (requestParameters.statusd === null || requestParameters.statusd === undefined) {
            throw new runtime.RequiredError('statusd','Required parameter requestParameters.statusd was null or undefined when calling createStatusd.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statusds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusdToJSON(requestParameters.statusd),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusdFromJSON(jsonValue));
    }

    /**
     * Create statusd
     * Create statusd
     */
    async createStatusd(requestParameters: CreateStatusdRequest): Promise<EntStatusd> {
        const response = await this.createStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create staytype
     * Create staytype
     */
    async createStaytypeRaw(requestParameters: CreateStaytypeRequest): Promise<runtime.ApiResponse<EntStayType>> {
        if (requestParameters.staytype === null || requestParameters.staytype === undefined) {
            throw new runtime.RequiredError('staytype','Required parameter requestParameters.staytype was null or undefined when calling createStaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/staytypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStayTypeToJSON(requestParameters.staytype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStayTypeFromJSON(jsonValue));
    }

    /**
     * Create staytype
     * Create staytype
     */
    async createStaytype(requestParameters: CreateStaytypeRequest): Promise<EntStayType> {
        const response = await this.createStaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployeeRaw(requestParameters: DeleteEmployeeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employee/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployee(requestParameters: DeleteEmployeeRequest): Promise<object> {
        const response = await this.deleteEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipment by ID
     * Delete a equipment entity by ID
     */
    async deleteEquipmentRaw(requestParameters: DeleteEquipmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEquipment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get equipment by ID
     * Delete a equipment entity by ID
     */
    async deleteEquipment(requestParameters: DeleteEquipmentRequest): Promise<object> {
        const response = await this.deleteEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get facility by ID
     * Delete a facility entity by ID
     */
    async deleteFacilityRaw(requestParameters: DeleteFacilityRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFacility.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facility/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get facility by ID
     * Delete a facility entity by ID
     */
    async deleteFacility(requestParameters: DeleteFacilityRequest): Promise<object> {
        const response = await this.deleteFacilityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nearbyplace by ID
     * Delete a nearbyplace entity by ID
     */
    async deleteNearbyplaceRaw(requestParameters: DeleteNearbyplaceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteNearbyplace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nearbyplace/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get nearbyplace by ID
     * Delete a nearbyplace entity by ID
     */
    async deleteNearbyplace(requestParameters: DeleteNearbyplaceRequest): Promise<object> {
        const response = await this.deleteNearbyplaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get quantity by ID
     * Delete a quantity entity by ID
     */
    async deleteQuantityRaw(requestParameters: DeleteQuantityRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteQuantity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quantity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get quantity by ID
     * Delete a quantity entity by ID
     */
    async deleteQuantity(requestParameters: DeleteQuantityRequest): Promise<object> {
        const response = await this.deleteQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Delete a room entity by ID
     */
    async deleteRoomRaw(requestParameters: DeleteRoomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get room by ID
     * Delete a room entity by ID
     */
    async deleteRoom(requestParameters: DeleteRoomRequest): Promise<object> {
        const response = await this.deleteRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusd by ID
     * Delete a statusd entity by ID
     */
    async deleteStatusdRaw(requestParameters: DeleteStatusdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatusd.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusd/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get statusd by ID
     * Delete a statusd entity by ID
     */
    async deleteStatusd(requestParameters: DeleteStatusdRequest): Promise<object> {
        const response = await this.deleteStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * get staytype by ID
     * Delete a staytype entity by ID
     */
    async deleteStaytypeRaw(requestParameters: DeleteStaytypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staytype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get staytype by ID
     * Delete a staytype entity by ID
     */
    async deleteStaytype(requestParameters: DeleteStaytypeRequest): Promise<object> {
        const response = await this.deleteStaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployeeRaw(requestParameters: GetEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployee(requestParameters: GetEmployeeRequest): Promise<EntEmployee> {
        const response = await this.getEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipment by ID
     * Get a equipment entity by ID
     */
    async getEquipmentRaw(requestParameters: GetEquipmentRequest): Promise<runtime.ApiResponse<EntEquipment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEquipment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEquipmentFromJSON(jsonValue));
    }

    /**
     * get equipment by ID
     * Get a equipment entity by ID
     */
    async getEquipment(requestParameters: GetEquipmentRequest): Promise<EntEquipment> {
        const response = await this.getEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get facility by ID
     * Get a facility entity by ID
     */
    async getFacilityRaw(requestParameters: GetFacilityRequest): Promise<runtime.ApiResponse<EntFacility>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFacility.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFacilityFromJSON(jsonValue));
    }

    /**
     * get facility by ID
     * Get a facility entity by ID
     */
    async getFacility(requestParameters: GetFacilityRequest): Promise<EntFacility> {
        const response = await this.getFacilityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nearbyplace by ID
     * Get a nearbyplace entity by ID
     */
    async getNearbyplaceRaw(requestParameters: GetNearbyplaceRequest): Promise<runtime.ApiResponse<EntNearbyPlace>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNearbyplace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nearbyplaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNearbyPlaceFromJSON(jsonValue));
    }

    /**
     * get nearbyplace by ID
     * Get a nearbyplace entity by ID
     */
    async getNearbyplace(requestParameters: GetNearbyplaceRequest): Promise<EntNearbyPlace> {
        const response = await this.getNearbyplaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get quantity by ID
     * Get a quantity entity by ID
     */
    async getQuantityRaw(requestParameters: GetQuantityRequest): Promise<runtime.ApiResponse<EntQuantity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getQuantity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quantitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntQuantityFromJSON(jsonValue));
    }

    /**
     * get quantity by ID
     * Get a quantity entity by ID
     */
    async getQuantity(requestParameters: GetQuantityRequest): Promise<EntQuantity> {
        const response = await this.getQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusd by ID
     * Get a statusd entity by ID
     */
    async getStatusdRaw(requestParameters: GetStatusdRequest): Promise<runtime.ApiResponse<EntStatusd>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatusd.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusdFromJSON(jsonValue));
    }

    /**
     * get statusd by ID
     * Get a statusd entity by ID
     */
    async getStatusd(requestParameters: GetStatusdRequest): Promise<EntStatusd> {
        const response = await this.getStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * get staytype by ID
     * Get a staytype entity by ID
     */
    async getStaytypeRaw(requestParameters: GetStaytypeRequest): Promise<runtime.ApiResponse<EntStayType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staytypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStayTypeFromJSON(jsonValue));
    }

    /**
     * get staytype by ID
     * Get a staytype entity by ID
     */
    async getStaytype(requestParameters: GetStaytypeRequest): Promise<EntStayType> {
        const response = await this.getStaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list deposit entities
     * List deposit entities
     */
    async listDepositRaw(requestParameters: ListDepositRequest): Promise<runtime.ApiResponse<Array<EntDeposit>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deposits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepositFromJSON));
    }

    /**
     * list deposit entities
     * List deposit entities
     */
    async listDeposit(requestParameters: ListDepositRequest): Promise<Array<EntDeposit>> {
        const response = await this.listDepositRaw(requestParameters);
        return await response.value();
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployeeRaw(requestParameters: ListEmployeeRequest): Promise<runtime.ApiResponse<Array<EntEmployee>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeFromJSON));
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployee(requestParameters: ListEmployeeRequest): Promise<Array<EntEmployee>> {
        const response = await this.listEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list equipment entities
     * List equipment entities
     */
    async listEquipmentRaw(requestParameters: ListEquipmentRequest): Promise<runtime.ApiResponse<Array<EntEquipment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEquipmentFromJSON));
    }

    /**
     * list equipment entities
     * List equipment entities
     */
    async listEquipment(requestParameters: ListEquipmentRequest): Promise<Array<EntEquipment>> {
        const response = await this.listEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list facility entities
     * List facility entities
     */
    async listFacilityRaw(requestParameters: ListFacilityRequest): Promise<runtime.ApiResponse<Array<EntFacility>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilitys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFacilityFromJSON));
    }

    /**
     * list facility entities
     * List facility entities
     */
    async listFacility(requestParameters: ListFacilityRequest): Promise<Array<EntFacility>> {
        const response = await this.listFacilityRaw(requestParameters);
        return await response.value();
    }

    /**
     * list nearbyplace entities
     * List nearbyplace entities
     */
    async listNearbyplaceRaw(requestParameters: ListNearbyplaceRequest): Promise<runtime.ApiResponse<Array<EntNearbyPlace>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nearbyplaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntNearbyPlaceFromJSON));
    }

    /**
     * list nearbyplace entities
     * List nearbyplace entities
     */
    async listNearbyplace(requestParameters: ListNearbyplaceRequest): Promise<Array<EntNearbyPlace>> {
        const response = await this.listNearbyplaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list quantity entities
     * List quantity entities
     */
    async listQuantityRaw(requestParameters: ListQuantityRequest): Promise<runtime.ApiResponse<Array<EntQuantity>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quantitys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntQuantityFromJSON));
    }

    /**
     * list quantity entities
     * List quantity entities
     */
    async listQuantity(requestParameters: ListQuantityRequest): Promise<Array<EntQuantity>> {
        const response = await this.listQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list statusd entities
     * List statusd entities
     */
    async listStatusdRaw(requestParameters: ListStatusdRequest): Promise<runtime.ApiResponse<Array<EntStatusd>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatusdFromJSON));
    }

    /**
     * list statusd entities
     * List statusd entities
     */
    async listStatusd(requestParameters: ListStatusdRequest): Promise<Array<EntStatusd>> {
        const response = await this.listStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * list staytype entities
     * List staytype entities
     */
    async listStaytypeRaw(requestParameters: ListStaytypeRequest): Promise<runtime.ApiResponse<Array<EntStayType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staytypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStayTypeFromJSON));
    }

    /**
     * list staytype entities
     * List staytype entities
     */
    async listStaytype(requestParameters: ListStaytypeRequest): Promise<Array<EntStayType>> {
        const response = await this.listStaytypeRaw(requestParameters);
        return await response.value();
    }

}
