/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersDeposit,
    ControllersDepositFromJSON,
    ControllersDepositToJSON,
    ControllersLease,
    ControllersLeaseFromJSON,
    ControllersLeaseToJSON,
    ControllersRoomdetail,
    ControllersRoomdetailFromJSON,
    ControllersRoomdetailToJSON,
    EntCleanerName,
    EntCleanerNameFromJSON,
    EntCleanerNameToJSON,
    EntCleaningRoom,
    EntCleaningRoomFromJSON,
    EntCleaningRoomToJSON,
    EntDeposit,
    EntDepositFromJSON,
    EntDepositToJSON,
    EntEmployee,
    EntEmployeeFromJSON,
    EntEmployeeToJSON,
    EntEquipment,
    EntEquipmentFromJSON,
    EntEquipmentToJSON,
    EntFacilitie,
    EntFacilitieFromJSON,
    EntFacilitieToJSON,
    EntLease,
    EntLeaseFromJSON,
    EntLeaseToJSON,
    EntLengthTime,
    EntLengthTimeFromJSON,
    EntLengthTimeToJSON,
    EntNearbyplace,
    EntNearbyplaceFromJSON,
    EntNearbyplaceToJSON,
    EntQuantity,
    EntQuantityFromJSON,
    EntQuantityToJSON,
    EntRoomdetail,
    EntRoomdetailFromJSON,
    EntRoomdetailToJSON,
    EntStatusd,
    EntStatusdFromJSON,
    EntStatusdToJSON,
    EntStaytype,
    EntStaytypeFromJSON,
    EntStaytypeToJSON,
    EntWifi,
    EntWifiFromJSON,
    EntWifiToJSON,
} from '../models';

export interface CreateCleaningroomRequest {
    cleaningroom: EntCleaningRoom;
}

export interface CreateDepositRequest {
    deposit: ControllersDeposit;
}

export interface CreateEquipmentRequest {
    equipment: EntEquipment;
}

export interface CreateFacilitieRequest {
    facilitie: EntFacilitie;
}

export interface CreateLeaseRequest {
    lease: ControllersLease;
}

export interface CreateNearbyplaceRequest {
    nearbyplace: EntNearbyplace;
}

export interface CreateQuantityRequest {
    quantity: EntQuantity;
}

export interface CreateRoomdetailRequest {
    roomdetail: ControllersRoomdetail;
}

export interface CreateStatusdRequest {
    statusd: EntStatusd;
}

export interface CreateStaytypeRequest {
    staytype: EntStaytype;
}

export interface CreateWifiRequest {
    wifi: EntWifi;
}

export interface DeleteEmployeeRequest {
    id: number;
}

export interface DeleteEquipmentRequest {
    id: number;
}

export interface DeleteFacilitieRequest {
    id: number;
}

export interface DeleteNearbyplaceRequest {
    id: number;
}

export interface DeleteQuantityRequest {
    id: number;
}

export interface DeleteRoomdetailRequest {
    id: number;
}

export interface DeleteStatusdRequest {
    id: number;
}

export interface DeleteStaytypeRequest {
    id: number;
}

export interface DeleteWifiRequest {
    id: number;
}

export interface GetCleanernameRequest {
    id: number;
}

export interface GetCleaningroomRequest {
    id: number;
}

export interface GetEmployeeRequest {
    id: number;
}

export interface GetEquipmentRequest {
    id: number;
}

export interface GetFacilitieRequest {
    id: number;
}

export interface GetLengthtimeRequest {
    id: number;
}

export interface GetNearbyplaceRequest {
    id: number;
}

export interface GetQuantityRequest {
    id: number;
}

export interface GetRoomdetailRequest {
    id: number;
}

export interface GetStatusdRequest {
    id: number;
}

export interface GetStaytypeRequest {
    id: number;
}

export interface GetWifiRequest {
    id: number;
}

export interface ListCleanernameRequest {
    limit?: number;
    offset?: number;
}

export interface ListCleaningroomRequest {
    limit?: number;
    offset?: number;
}

export interface ListDepositRequest {
    limit?: number;
    offset?: number;
}

export interface ListEquipmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListFacilitieRequest {
    limit?: number;
    offset?: number;
}

export interface ListLeaseRequest {
    limit?: number;
    offset?: number;
}

export interface ListLengthtimeRequest {
    limit?: number;
    offset?: number;
}

export interface ListNearbyplaceRequest {
    limit?: number;
    offset?: number;
}

export interface ListQuantityRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatusdRequest {
    limit?: number;
    offset?: number;
}

export interface ListStaytypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListWifiRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create cleaningroom
     * Create cleaningroom
     */
    async createCleaningroomRaw(requestParameters: CreateCleaningroomRequest): Promise<runtime.ApiResponse<EntCleaningRoom>> {
        if (requestParameters.cleaningroom === null || requestParameters.cleaningroom === undefined) {
            throw new runtime.RequiredError('cleaningroom','Required parameter requestParameters.cleaningroom was null or undefined when calling createCleaningroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cleaningrooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCleaningRoomToJSON(requestParameters.cleaningroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCleaningRoomFromJSON(jsonValue));
    }

    /**
     * Create cleaningroom
     * Create cleaningroom
     */
    async createCleaningroom(requestParameters: CreateCleaningroomRequest): Promise<EntCleaningRoom> {
        const response = await this.createCleaningroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create deposit
     * Create deposit
     */
    async createDepositRaw(requestParameters: CreateDepositRequest): Promise<runtime.ApiResponse<ControllersDeposit>> {
        if (requestParameters.deposit === null || requestParameters.deposit === undefined) {
            throw new runtime.RequiredError('deposit','Required parameter requestParameters.deposit was null or undefined when calling createDeposit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deposits`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersDepositToJSON(requestParameters.deposit),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersDepositFromJSON(jsonValue));
    }

    /**
     * Create deposit
     * Create deposit
     */
    async createDeposit(requestParameters: CreateDepositRequest): Promise<ControllersDeposit> {
        const response = await this.createDepositRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create equipment
     * Create equipment
     */
    async createEquipmentRaw(requestParameters: CreateEquipmentRequest): Promise<runtime.ApiResponse<EntEquipment>> {
        if (requestParameters.equipment === null || requestParameters.equipment === undefined) {
            throw new runtime.RequiredError('equipment','Required parameter requestParameters.equipment was null or undefined when calling createEquipment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/equipments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEquipmentToJSON(requestParameters.equipment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEquipmentFromJSON(jsonValue));
    }

    /**
     * Create equipment
     * Create equipment
     */
    async createEquipment(requestParameters: CreateEquipmentRequest): Promise<EntEquipment> {
        const response = await this.createEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create facilitie
     * Create facilitie
     */
    async createFacilitieRaw(requestParameters: CreateFacilitieRequest): Promise<runtime.ApiResponse<EntFacilitie>> {
        if (requestParameters.facilitie === null || requestParameters.facilitie === undefined) {
            throw new runtime.RequiredError('facilitie','Required parameter requestParameters.facilitie was null or undefined when calling createFacilitie.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/facilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntFacilitieToJSON(requestParameters.facilitie),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFacilitieFromJSON(jsonValue));
    }

    /**
     * Create facilitie
     * Create facilitie
     */
    async createFacilitie(requestParameters: CreateFacilitieRequest): Promise<EntFacilitie> {
        const response = await this.createFacilitieRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create lease
     * Create lease
     */
    async createLeaseRaw(requestParameters: CreateLeaseRequest): Promise<runtime.ApiResponse<ControllersLease>> {
        if (requestParameters.lease === null || requestParameters.lease === undefined) {
            throw new runtime.RequiredError('lease','Required parameter requestParameters.lease was null or undefined when calling createLease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/leases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersLeaseToJSON(requestParameters.lease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersLeaseFromJSON(jsonValue));
    }

    /**
     * Create lease
     * Create lease
     */
    async createLease(requestParameters: CreateLeaseRequest): Promise<ControllersLease> {
        const response = await this.createLeaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create nearbyplace
     * Create nearbyplace
     */
    async createNearbyplaceRaw(requestParameters: CreateNearbyplaceRequest): Promise<runtime.ApiResponse<EntNearbyplace>> {
        if (requestParameters.nearbyplace === null || requestParameters.nearbyplace === undefined) {
            throw new runtime.RequiredError('nearbyplace','Required parameter requestParameters.nearbyplace was null or undefined when calling createNearbyplace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nearbyplaces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntNearbyplaceToJSON(requestParameters.nearbyplace),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNearbyplaceFromJSON(jsonValue));
    }

    /**
     * Create nearbyplace
     * Create nearbyplace
     */
    async createNearbyplace(requestParameters: CreateNearbyplaceRequest): Promise<EntNearbyplace> {
        const response = await this.createNearbyplaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create quantity
     * Create quantity
     */
    async createQuantityRaw(requestParameters: CreateQuantityRequest): Promise<runtime.ApiResponse<EntQuantity>> {
        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling createQuantity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/quantitys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntQuantityToJSON(requestParameters.quantity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntQuantityFromJSON(jsonValue));
    }

    /**
     * Create quantity
     * Create quantity
     */
    async createQuantity(requestParameters: CreateQuantityRequest): Promise<EntQuantity> {
        const response = await this.createQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create roomdetail
     * Create roomdetail
     */
    async createRoomdetailRaw(requestParameters: CreateRoomdetailRequest): Promise<runtime.ApiResponse<EntRoomdetail>> {
        if (requestParameters.roomdetail === null || requestParameters.roomdetail === undefined) {
            throw new runtime.RequiredError('roomdetail','Required parameter requestParameters.roomdetail was null or undefined when calling createRoomdetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomdetails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRoomdetailToJSON(requestParameters.roomdetail),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomdetailFromJSON(jsonValue));
    }

    /**
     * Create roomdetail
     * Create roomdetail
     */
    async createRoomdetail(requestParameters: CreateRoomdetailRequest): Promise<EntRoomdetail> {
        const response = await this.createRoomdetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statusd
     * Create statusd
     */
    async createStatusdRaw(requestParameters: CreateStatusdRequest): Promise<runtime.ApiResponse<EntStatusd>> {
        if (requestParameters.statusd === null || requestParameters.statusd === undefined) {
            throw new runtime.RequiredError('statusd','Required parameter requestParameters.statusd was null or undefined when calling createStatusd.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statusds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusdToJSON(requestParameters.statusd),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusdFromJSON(jsonValue));
    }

    /**
     * Create statusd
     * Create statusd
     */
    async createStatusd(requestParameters: CreateStatusdRequest): Promise<EntStatusd> {
        const response = await this.createStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create staytype
     * Create staytype
     */
    async createStaytypeRaw(requestParameters: CreateStaytypeRequest): Promise<runtime.ApiResponse<EntStaytype>> {
        if (requestParameters.staytype === null || requestParameters.staytype === undefined) {
            throw new runtime.RequiredError('staytype','Required parameter requestParameters.staytype was null or undefined when calling createStaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/staytypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStaytypeToJSON(requestParameters.staytype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStaytypeFromJSON(jsonValue));
    }

    /**
     * Create staytype
     * Create staytype
     */
    async createStaytype(requestParameters: CreateStaytypeRequest): Promise<EntStaytype> {
        const response = await this.createStaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create wifi
     * Create wifi
     */
    async createWifiRaw(requestParameters: CreateWifiRequest): Promise<runtime.ApiResponse<EntWifi>> {
        if (requestParameters.wifi === null || requestParameters.wifi === undefined) {
            throw new runtime.RequiredError('wifi','Required parameter requestParameters.wifi was null or undefined when calling createWifi.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wifis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntWifiToJSON(requestParameters.wifi),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntWifiFromJSON(jsonValue));
    }

    /**
     * Create wifi
     * Create wifi
     */
    async createWifi(requestParameters: CreateWifiRequest): Promise<EntWifi> {
        const response = await this.createWifiRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployeeRaw(requestParameters: DeleteEmployeeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employee/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployee(requestParameters: DeleteEmployeeRequest): Promise<object> {
        const response = await this.deleteEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipment by ID
     * Delete a equipment entity by ID
     */
    async deleteEquipmentRaw(requestParameters: DeleteEquipmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEquipment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get equipment by ID
     * Delete a equipment entity by ID
     */
    async deleteEquipment(requestParameters: DeleteEquipmentRequest): Promise<object> {
        const response = await this.deleteEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get facilitie by ID
     * Delete a facilitie entity by ID
     */
    async deleteFacilitieRaw(requestParameters: DeleteFacilitieRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFacilitie.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilitie/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get facilitie by ID
     * Delete a facilitie entity by ID
     */
    async deleteFacilitie(requestParameters: DeleteFacilitieRequest): Promise<object> {
        const response = await this.deleteFacilitieRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nearbyplace by ID
     * Delete a nearbyplace entity by ID
     */
    async deleteNearbyplaceRaw(requestParameters: DeleteNearbyplaceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteNearbyplace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nearbyplace/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get nearbyplace by ID
     * Delete a nearbyplace entity by ID
     */
    async deleteNearbyplace(requestParameters: DeleteNearbyplaceRequest): Promise<object> {
        const response = await this.deleteNearbyplaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get quantity by ID
     * Delete a quantity entity by ID
     */
    async deleteQuantityRaw(requestParameters: DeleteQuantityRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteQuantity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quantity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get quantity by ID
     * Delete a quantity entity by ID
     */
    async deleteQuantity(requestParameters: DeleteQuantityRequest): Promise<object> {
        const response = await this.deleteQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomdetail by ID
     * Delete a roomdetail entity by ID
     */
    async deleteRoomdetailRaw(requestParameters: DeleteRoomdetailRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoomdetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomdetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get roomdetail by ID
     * Delete a roomdetail entity by ID
     */
    async deleteRoomdetail(requestParameters: DeleteRoomdetailRequest): Promise<object> {
        const response = await this.deleteRoomdetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusd by ID
     * Delete a statusd entity by ID
     */
    async deleteStatusdRaw(requestParameters: DeleteStatusdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatusd.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusd/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get statusd by ID
     * Delete a statusd entity by ID
     */
    async deleteStatusd(requestParameters: DeleteStatusdRequest): Promise<object> {
        const response = await this.deleteStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * get staytype by ID
     * Delete a staytype entity by ID
     */
    async deleteStaytypeRaw(requestParameters: DeleteStaytypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staytype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get staytype by ID
     * Delete a staytype entity by ID
     */
    async deleteStaytype(requestParameters: DeleteStaytypeRequest): Promise<object> {
        const response = await this.deleteStaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get wifi by ID
     * Delete a wifi entity by ID
     */
    async deleteWifiRaw(requestParameters: DeleteWifiRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWifi.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wifis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get wifi by ID
     * Delete a wifi entity by ID
     */
    async deleteWifi(requestParameters: DeleteWifiRequest): Promise<object> {
        const response = await this.deleteWifiRaw(requestParameters);
        return await response.value();
    }

    /**
     * get cleanername by ID
     * Get a cleanername entity by ID
     */
    async getCleanernameRaw(requestParameters: GetCleanernameRequest): Promise<runtime.ApiResponse<EntCleanerName>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCleanername.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cleanernames/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCleanerNameFromJSON(jsonValue));
    }

    /**
     * get cleanername by ID
     * Get a cleanername entity by ID
     */
    async getCleanername(requestParameters: GetCleanernameRequest): Promise<EntCleanerName> {
        const response = await this.getCleanernameRaw(requestParameters);
        return await response.value();
    }

    /**
     * get cleaningroom by ID
     * Get a cleaningroom entity by ID
     */
    async getCleaningroomRaw(requestParameters: GetCleaningroomRequest): Promise<runtime.ApiResponse<EntCleaningRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCleaningroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cleaningrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCleaningRoomFromJSON(jsonValue));
    }

    /**
     * get cleaningroom by ID
     * Get a cleaningroom entity by ID
     */
    async getCleaningroom(requestParameters: GetCleaningroomRequest): Promise<EntCleaningRoom> {
        const response = await this.getCleaningroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployeeRaw(requestParameters: GetEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployee(requestParameters: GetEmployeeRequest): Promise<EntEmployee> {
        const response = await this.getEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get equipment by ID
     * Get a equipment entity by ID
     */
    async getEquipmentRaw(requestParameters: GetEquipmentRequest): Promise<runtime.ApiResponse<EntEquipment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEquipment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEquipmentFromJSON(jsonValue));
    }

    /**
     * get equipment by ID
     * Get a equipment entity by ID
     */
    async getEquipment(requestParameters: GetEquipmentRequest): Promise<EntEquipment> {
        const response = await this.getEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get facilitie by ID
     * Get a facilitie entity by ID
     */
    async getFacilitieRaw(requestParameters: GetFacilitieRequest): Promise<runtime.ApiResponse<EntFacilitie>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFacilitie.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFacilitieFromJSON(jsonValue));
    }

    /**
     * get facilitie by ID
     * Get a facilitie entity by ID
     */
    async getFacilitie(requestParameters: GetFacilitieRequest): Promise<EntFacilitie> {
        const response = await this.getFacilitieRaw(requestParameters);
        return await response.value();
    }

    /**
     * get lengthtime by ID
     * Get a lengthtime entity by ID
     */
    async getLengthtimeRaw(requestParameters: GetLengthtimeRequest): Promise<runtime.ApiResponse<EntLengthTime>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLengthtime.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lengthtimes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLengthTimeFromJSON(jsonValue));
    }

    /**
     * get lengthtime by ID
     * Get a lengthtime entity by ID
     */
    async getLengthtime(requestParameters: GetLengthtimeRequest): Promise<EntLengthTime> {
        const response = await this.getLengthtimeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nearbyplace by ID
     * Get a nearbyplace entity by ID
     */
    async getNearbyplaceRaw(requestParameters: GetNearbyplaceRequest): Promise<runtime.ApiResponse<EntNearbyplace>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNearbyplace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nearbyplaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNearbyplaceFromJSON(jsonValue));
    }

    /**
     * get nearbyplace by ID
     * Get a nearbyplace entity by ID
     */
    async getNearbyplace(requestParameters: GetNearbyplaceRequest): Promise<EntNearbyplace> {
        const response = await this.getNearbyplaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get quantity by ID
     * Get a quantity entity by ID
     */
    async getQuantityRaw(requestParameters: GetQuantityRequest): Promise<runtime.ApiResponse<EntQuantity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getQuantity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quantitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntQuantityFromJSON(jsonValue));
    }

    /**
     * get quantity by ID
     * Get a quantity entity by ID
     */
    async getQuantity(requestParameters: GetQuantityRequest): Promise<EntQuantity> {
        const response = await this.getQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomdetail by ID
     * Get a roomdetail entity by ID
     */
    async getRoomdetailRaw(requestParameters: GetRoomdetailRequest): Promise<runtime.ApiResponse<EntRoomdetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomdetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomdetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomdetailFromJSON(jsonValue));
    }

    /**
     * get roomdetail by ID
     * Get a roomdetail entity by ID
     */
    async getRoomdetail(requestParameters: GetRoomdetailRequest): Promise<EntRoomdetail> {
        const response = await this.getRoomdetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusd by ID
     * Get a statusd entity by ID
     */
    async getStatusdRaw(requestParameters: GetStatusdRequest): Promise<runtime.ApiResponse<EntStatusd>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatusd.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusdFromJSON(jsonValue));
    }

    /**
     * get statusd by ID
     * Get a statusd entity by ID
     */
    async getStatusd(requestParameters: GetStatusdRequest): Promise<EntStatusd> {
        const response = await this.getStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * get staytype by ID
     * Get a staytype entity by ID
     */
    async getStaytypeRaw(requestParameters: GetStaytypeRequest): Promise<runtime.ApiResponse<EntStaytype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staytypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStaytypeFromJSON(jsonValue));
    }

    /**
     * get staytype by ID
     * Get a staytype entity by ID
     */
    async getStaytype(requestParameters: GetStaytypeRequest): Promise<EntStaytype> {
        const response = await this.getStaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get wifi by ID
     * Get a wifi entity by ID
     */
    async getWifiRaw(requestParameters: GetWifiRequest): Promise<runtime.ApiResponse<EntWifi>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWifi.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wifis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntWifiFromJSON(jsonValue));
    }

    /**
     * get wifi by ID
     * Get a wifi entity by ID
     */
    async getWifi(requestParameters: GetWifiRequest): Promise<EntWifi> {
        const response = await this.getWifiRaw(requestParameters);
        return await response.value();
    }

    /**
     * list cleanername entities
     * List cleanername entities
     */
    async listCleanernameRaw(requestParameters: ListCleanernameRequest): Promise<runtime.ApiResponse<Array<EntCleanerName>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cleanernames`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCleanerNameFromJSON));
    }

    /**
     * list cleanername entities
     * List cleanername entities
     */
    async listCleanername(requestParameters: ListCleanernameRequest): Promise<Array<EntCleanerName>> {
        const response = await this.listCleanernameRaw(requestParameters);
        return await response.value();
    }

    /**
     * list cleaningroom entities
     * List cleaningroom entities
     */
    async listCleaningroomRaw(requestParameters: ListCleaningroomRequest): Promise<runtime.ApiResponse<Array<EntCleaningRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cleaningrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCleaningRoomFromJSON));
    }

    /**
     * list cleaningroom entities
     * List cleaningroom entities
     */
    async listCleaningroom(requestParameters: ListCleaningroomRequest): Promise<Array<EntCleaningRoom>> {
        const response = await this.listCleaningroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list deposit entities
     * List deposit entities
     */
    async listDepositRaw(requestParameters: ListDepositRequest): Promise<runtime.ApiResponse<Array<EntDeposit>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deposits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepositFromJSON));
    }

    /**
     * list deposit entities
     * List deposit entities
     */
    async listDeposit(requestParameters: ListDepositRequest): Promise<Array<EntDeposit>> {
        const response = await this.listDepositRaw(requestParameters);
        return await response.value();
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployeeRaw(): Promise<runtime.ApiResponse<Array<EntEmployee>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeFromJSON));
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployee(): Promise<Array<EntEmployee>> {
        const response = await this.listEmployeeRaw();
        return await response.value();
    }

    /**
     * list equipment entities
     * List equipment entities
     */
    async listEquipmentRaw(requestParameters: ListEquipmentRequest): Promise<runtime.ApiResponse<Array<EntEquipment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEquipmentFromJSON));
    }

    /**
     * list equipment entities
     * List equipment entities
     */
    async listEquipment(requestParameters: ListEquipmentRequest): Promise<Array<EntEquipment>> {
        const response = await this.listEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list facilitie entities
     * List facilitie entities
     */
    async listFacilitieRaw(requestParameters: ListFacilitieRequest): Promise<runtime.ApiResponse<Array<EntFacilitie>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facilities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFacilitieFromJSON));
    }

    /**
     * list facilitie entities
     * List facilitie entities
     */
    async listFacilitie(requestParameters: ListFacilitieRequest): Promise<Array<EntFacilitie>> {
        const response = await this.listFacilitieRaw(requestParameters);
        return await response.value();
    }

    /**
     * list lease entities
     * List lease entities
     */
    async listLeaseRaw(requestParameters: ListLeaseRequest): Promise<runtime.ApiResponse<Array<EntLease>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/leases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntLeaseFromJSON));
    }

    /**
     * list lease entities
     * List lease entities
     */
    async listLease(requestParameters: ListLeaseRequest): Promise<Array<EntLease>> {
        const response = await this.listLeaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list lengthtime entities
     * List lengthtime entities
     */
    async listLengthtimeRaw(requestParameters: ListLengthtimeRequest): Promise<runtime.ApiResponse<Array<EntLengthTime>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lengthtimes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntLengthTimeFromJSON));
    }

    /**
     * list lengthtime entities
     * List lengthtime entities
     */
    async listLengthtime(requestParameters: ListLengthtimeRequest): Promise<Array<EntLengthTime>> {
        const response = await this.listLengthtimeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list nearbyplace entities
     * List nearbyplace entities
     */
    async listNearbyplaceRaw(requestParameters: ListNearbyplaceRequest): Promise<runtime.ApiResponse<Array<EntNearbyplace>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nearbyplaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntNearbyplaceFromJSON));
    }

    /**
     * list nearbyplace entities
     * List nearbyplace entities
     */
    async listNearbyplace(requestParameters: ListNearbyplaceRequest): Promise<Array<EntNearbyplace>> {
        const response = await this.listNearbyplaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list quantity entities
     * List quantity entities
     */
    async listQuantityRaw(requestParameters: ListQuantityRequest): Promise<runtime.ApiResponse<Array<EntQuantity>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/quantitys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntQuantityFromJSON));
    }

    /**
     * list quantity entities
     * List quantity entities
     */
    async listQuantity(requestParameters: ListQuantityRequest): Promise<Array<EntQuantity>> {
        const response = await this.listQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomdetail entities
     * List roomdetail entities
     */
    async listRoomdetailRaw(): Promise<runtime.ApiResponse<Array<EntRoomdetail>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomdetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomdetailFromJSON));
    }

    /**
     * list roomdetail entities
     * List roomdetail entities
     */
    async listRoomdetail(): Promise<Array<EntRoomdetail>> {
        const response = await this.listRoomdetailRaw();
        return await response.value();
    }

    /**
     * list statusd entities
     * List statusd entities
     */
    async listStatusdRaw(requestParameters: ListStatusdRequest): Promise<runtime.ApiResponse<Array<EntStatusd>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatusdFromJSON));
    }

    /**
     * list statusd entities
     * List statusd entities
     */
    async listStatusd(requestParameters: ListStatusdRequest): Promise<Array<EntStatusd>> {
        const response = await this.listStatusdRaw(requestParameters);
        return await response.value();
    }

    /**
     * list staytype entities
     * List staytype entities
     */
    async listStaytypeRaw(requestParameters: ListStaytypeRequest): Promise<runtime.ApiResponse<Array<EntStaytype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staytypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStaytypeFromJSON));
    }

    /**
     * list staytype entities
     * List staytype entities
     */
    async listStaytype(requestParameters: ListStaytypeRequest): Promise<Array<EntStaytype>> {
        const response = await this.listStaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list wifi entities
     * List wifi entities
     */
    async listWifiRaw(requestParameters: ListWifiRequest): Promise<runtime.ApiResponse<Array<EntWifi>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wifis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntWifiFromJSON));
    }

    /**
     * list wifi entities
     * List wifi entities
     */
    async listWifi(requestParameters: ListWifiRequest): Promise<Array<EntWifi>> {
        const response = await this.listWifiRaw(requestParameters);
        return await response.value();
    }

}
